// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dBetaBinom_MP
NumericVector dBetaBinom_MP(NumericVector ms, NumericVector ns, double piX, double thetaX, bool LOG, double NecPres);
RcppExport SEXP _maelstRom_dBetaBinom_MP(SEXP msSEXP, SEXP nsSEXP, SEXP piXSEXP, SEXP thetaXSEXP, SEXP LOGSEXP, SEXP NecPresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ms(msSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< double >::type piX(piXSEXP);
    Rcpp::traits::input_parameter< double >::type thetaX(thetaXSEXP);
    Rcpp::traits::input_parameter< bool >::type LOG(LOGSEXP);
    Rcpp::traits::input_parameter< double >::type NecPres(NecPresSEXP);
    rcpp_result_gen = Rcpp::wrap(dBetaBinom_MP(ms, ns, piX, thetaX, LOG, NecPres));
    return rcpp_result_gen;
END_RCPP
}
// grad_pi_MP
NumericVector grad_pi_MP(NumericVector ms, NumericVector ns, double piX, double thetaX, double NecPres);
RcppExport SEXP _maelstRom_grad_pi_MP(SEXP msSEXP, SEXP nsSEXP, SEXP piXSEXP, SEXP thetaXSEXP, SEXP NecPresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ms(msSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< double >::type piX(piXSEXP);
    Rcpp::traits::input_parameter< double >::type thetaX(thetaXSEXP);
    Rcpp::traits::input_parameter< double >::type NecPres(NecPresSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_pi_MP(ms, ns, piX, thetaX, NecPres));
    return rcpp_result_gen;
END_RCPP
}
// grad_theta_MP
NumericVector grad_theta_MP(NumericVector ms, NumericVector ns, double piX, double thetaX, double NecPres);
RcppExport SEXP _maelstRom_grad_theta_MP(SEXP msSEXP, SEXP nsSEXP, SEXP piXSEXP, SEXP thetaXSEXP, SEXP NecPresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ms(msSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< double >::type piX(piXSEXP);
    Rcpp::traits::input_parameter< double >::type thetaX(thetaXSEXP);
    Rcpp::traits::input_parameter< double >::type NecPres(NecPresSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_theta_MP(ms, ns, piX, thetaX, NecPres));
    return rcpp_result_gen;
END_RCPP
}
// dBetaBinom_cpp_old
NumericVector dBetaBinom_cpp_old(NumericVector ms, NumericVector ns, double pi, double theta, bool LOG);
RcppExport SEXP _maelstRom_dBetaBinom_cpp_old(SEXP msSEXP, SEXP nsSEXP, SEXP piSEXP, SEXP thetaSEXP, SEXP LOGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ms(msSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type LOG(LOGSEXP);
    rcpp_result_gen = Rcpp::wrap(dBetaBinom_cpp_old(ms, ns, pi, theta, LOG));
    return rcpp_result_gen;
END_RCPP
}
// grad_pi_old
NumericVector grad_pi_old(NumericVector ms, NumericVector ns, double pi, double theta);
RcppExport SEXP _maelstRom_grad_pi_old(SEXP msSEXP, SEXP nsSEXP, SEXP piSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ms(msSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_pi_old(ms, ns, pi, theta));
    return rcpp_result_gen;
END_RCPP
}
// grad_theta_old
NumericVector grad_theta_old(NumericVector ms, NumericVector ns, double pi, double theta);
RcppExport SEXP _maelstRom_grad_theta_old(SEXP msSEXP, SEXP nsSEXP, SEXP piSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ms(msSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_theta_old(ms, ns, pi, theta));
    return rcpp_result_gen;
END_RCPP
}
// MyOptTest
NumericVector MyOptTest(NumericVector parX);
RcppExport SEXP _maelstRom_MyOptTest(SEXP parXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type parX(parXSEXP);
    rcpp_result_gen = Rcpp::wrap(MyOptTest(parX));
    return rcpp_result_gen;
END_RCPP
}
// dBetaBin_cppi_MP
double dBetaBin_cppi_MP(double M, double N, double PI, double THETA, int NecPres);
RcppExport SEXP _maelstRom_dBetaBin_cppi_MP(SEXP MSEXP, SEXP NSEXP, SEXP PISEXP, SEXP THETASEXP, SEXP NecPresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type PI(PISEXP);
    Rcpp::traits::input_parameter< double >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< int >::type NecPres(NecPresSEXP);
    rcpp_result_gen = Rcpp::wrap(dBetaBin_cppi_MP(M, N, PI, THETA, NecPres));
    return rcpp_result_gen;
END_RCPP
}
// dBetaBin_cppi
double dBetaBin_cppi(double M, double N, double PI, double THETA, bool LOG, int MemLim, int Xtra);
RcppExport SEXP _maelstRom_dBetaBin_cppi(SEXP MSEXP, SEXP NSEXP, SEXP PISEXP, SEXP THETASEXP, SEXP LOGSEXP, SEXP MemLimSEXP, SEXP XtraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type PI(PISEXP);
    Rcpp::traits::input_parameter< double >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< bool >::type LOG(LOGSEXP);
    Rcpp::traits::input_parameter< int >::type MemLim(MemLimSEXP);
    Rcpp::traits::input_parameter< int >::type Xtra(XtraSEXP);
    rcpp_result_gen = Rcpp::wrap(dBetaBin_cppi(M, N, PI, THETA, LOG, MemLim, Xtra));
    return rcpp_result_gen;
END_RCPP
}
// dBetaBinom
NumericVector dBetaBinom(NumericVector ms, NumericVector ns, double pi, double theta, bool LOG, int MemLim, int Xtra);
RcppExport SEXP _maelstRom_dBetaBinom(SEXP msSEXP, SEXP nsSEXP, SEXP piSEXP, SEXP thetaSEXP, SEXP LOGSEXP, SEXP MemLimSEXP, SEXP XtraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ms(msSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type LOG(LOGSEXP);
    Rcpp::traits::input_parameter< int >::type MemLim(MemLimSEXP);
    Rcpp::traits::input_parameter< int >::type Xtra(XtraSEXP);
    rcpp_result_gen = Rcpp::wrap(dBetaBinom(ms, ns, pi, theta, LOG, MemLim, Xtra));
    return rcpp_result_gen;
END_RCPP
}
// GradPi_cppi_MP
double GradPi_cppi_MP(double M, double N, double PI, double THETA, int NecPres);
RcppExport SEXP _maelstRom_GradPi_cppi_MP(SEXP MSEXP, SEXP NSEXP, SEXP PISEXP, SEXP THETASEXP, SEXP NecPresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type PI(PISEXP);
    Rcpp::traits::input_parameter< double >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< int >::type NecPres(NecPresSEXP);
    rcpp_result_gen = Rcpp::wrap(GradPi_cppi_MP(M, N, PI, THETA, NecPres));
    return rcpp_result_gen;
END_RCPP
}
// GradPi_cppi
double GradPi_cppi(double M, double N, double PI, double THETA, int MemLim, int Xtra);
RcppExport SEXP _maelstRom_GradPi_cppi(SEXP MSEXP, SEXP NSEXP, SEXP PISEXP, SEXP THETASEXP, SEXP MemLimSEXP, SEXP XtraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type PI(PISEXP);
    Rcpp::traits::input_parameter< double >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< int >::type MemLim(MemLimSEXP);
    Rcpp::traits::input_parameter< int >::type Xtra(XtraSEXP);
    rcpp_result_gen = Rcpp::wrap(GradPi_cppi(M, N, PI, THETA, MemLim, Xtra));
    return rcpp_result_gen;
END_RCPP
}
// grad_pi
NumericVector grad_pi(NumericVector ms, NumericVector ns, double pi, double theta, int MemLim, int Xtra);
RcppExport SEXP _maelstRom_grad_pi(SEXP msSEXP, SEXP nsSEXP, SEXP piSEXP, SEXP thetaSEXP, SEXP MemLimSEXP, SEXP XtraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ms(msSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type MemLim(MemLimSEXP);
    Rcpp::traits::input_parameter< int >::type Xtra(XtraSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_pi(ms, ns, pi, theta, MemLim, Xtra));
    return rcpp_result_gen;
END_RCPP
}
// GradTheta_cppi_MP
double GradTheta_cppi_MP(double M, double N, double PI, double THETA, int NecPres);
RcppExport SEXP _maelstRom_GradTheta_cppi_MP(SEXP MSEXP, SEXP NSEXP, SEXP PISEXP, SEXP THETASEXP, SEXP NecPresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type PI(PISEXP);
    Rcpp::traits::input_parameter< double >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< int >::type NecPres(NecPresSEXP);
    rcpp_result_gen = Rcpp::wrap(GradTheta_cppi_MP(M, N, PI, THETA, NecPres));
    return rcpp_result_gen;
END_RCPP
}
// GradTheta_cppi
double GradTheta_cppi(double M, double N, double PI, double THETA, int MemLim, int Xtra);
RcppExport SEXP _maelstRom_GradTheta_cppi(SEXP MSEXP, SEXP NSEXP, SEXP PISEXP, SEXP THETASEXP, SEXP MemLimSEXP, SEXP XtraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type PI(PISEXP);
    Rcpp::traits::input_parameter< double >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< int >::type MemLim(MemLimSEXP);
    Rcpp::traits::input_parameter< int >::type Xtra(XtraSEXP);
    rcpp_result_gen = Rcpp::wrap(GradTheta_cppi(M, N, PI, THETA, MemLim, Xtra));
    return rcpp_result_gen;
END_RCPP
}
// grad_theta
NumericVector grad_theta(NumericVector ms, NumericVector ns, double pi, double theta, int MemLim, int Xtra);
RcppExport SEXP _maelstRom_grad_theta(SEXP msSEXP, SEXP nsSEXP, SEXP piSEXP, SEXP thetaSEXP, SEXP MemLimSEXP, SEXP XtraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ms(msSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type MemLim(MemLimSEXP);
    Rcpp::traits::input_parameter< int >::type Xtra(XtraSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_theta(ms, ns, pi, theta, MemLim, Xtra));
    return rcpp_result_gen;
END_RCPP
}
// CppCnT_Optim
NumericVector CppCnT_Optim(NumericVector StartVals, NumericVector ref_counts, NumericVector var_counts, NumericVector isCase, NumericVector sprv, int MemLim, int Xtra, double step_size, double tol, double epsabs);
RcppExport SEXP _maelstRom_CppCnT_Optim(SEXP StartValsSEXP, SEXP ref_countsSEXP, SEXP var_countsSEXP, SEXP isCaseSEXP, SEXP sprvSEXP, SEXP MemLimSEXP, SEXP XtraSEXP, SEXP step_sizeSEXP, SEXP tolSEXP, SEXP epsabsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type StartVals(StartValsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_counts(ref_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_counts(var_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type isCase(isCaseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sprv(sprvSEXP);
    Rcpp::traits::input_parameter< int >::type MemLim(MemLimSEXP);
    Rcpp::traits::input_parameter< int >::type Xtra(XtraSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type epsabs(epsabsSEXP);
    rcpp_result_gen = Rcpp::wrap(CppCnT_Optim(StartVals, ref_counts, var_counts, isCase, sprv, MemLim, Xtra, step_size, tol, epsabs));
    return rcpp_result_gen;
END_RCPP
}
// CppHom_Optim
NumericVector CppHom_Optim(double ThetaHomStart, double SE, NumericVector ref_counts, NumericVector var_counts, NumericVector spr, NumericVector spv, int MemLim, int Xtra, double step_size, double tol, double epsabs);
RcppExport SEXP _maelstRom_CppHom_Optim(SEXP ThetaHomStartSEXP, SEXP SESEXP, SEXP ref_countsSEXP, SEXP var_countsSEXP, SEXP sprSEXP, SEXP spvSEXP, SEXP MemLimSEXP, SEXP XtraSEXP, SEXP step_sizeSEXP, SEXP tolSEXP, SEXP epsabsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type ThetaHomStart(ThetaHomStartSEXP);
    Rcpp::traits::input_parameter< double >::type SE(SESEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_counts(ref_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_counts(var_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type spr(sprSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type spv(spvSEXP);
    Rcpp::traits::input_parameter< int >::type MemLim(MemLimSEXP);
    Rcpp::traits::input_parameter< int >::type Xtra(XtraSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type epsabs(epsabsSEXP);
    rcpp_result_gen = Rcpp::wrap(CppHom_Optim(ThetaHomStart, SE, ref_counts, var_counts, spr, spv, MemLim, Xtra, step_size, tol, epsabs));
    return rcpp_result_gen;
END_RCPP
}
// CppHet_Optim
NumericVector CppHet_Optim(NumericVector StartVals, NumericVector ref_counts, NumericVector var_counts, NumericVector sprv, int MemLim, int Xtra, double step_size, double tol, double epsabs);
RcppExport SEXP _maelstRom_CppHet_Optim(SEXP StartValsSEXP, SEXP ref_countsSEXP, SEXP var_countsSEXP, SEXP sprvSEXP, SEXP MemLimSEXP, SEXP XtraSEXP, SEXP step_sizeSEXP, SEXP tolSEXP, SEXP epsabsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type StartVals(StartValsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_counts(ref_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_counts(var_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sprv(sprvSEXP);
    Rcpp::traits::input_parameter< int >::type MemLim(MemLimSEXP);
    Rcpp::traits::input_parameter< int >::type Xtra(XtraSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type epsabs(epsabsSEXP);
    rcpp_result_gen = Rcpp::wrap(CppHet_Optim(StartVals, ref_counts, var_counts, sprv, MemLim, Xtra, step_size, tol, epsabs));
    return rcpp_result_gen;
END_RCPP
}
// CppHetH0_Optim
NumericVector CppHetH0_Optim(double ThetaHetStart, double probshift, NumericVector ref_counts, NumericVector var_counts, NumericVector sprv, int MemLim, int Xtra, double step_size, double tol, double epsabs);
RcppExport SEXP _maelstRom_CppHetH0_Optim(SEXP ThetaHetStartSEXP, SEXP probshiftSEXP, SEXP ref_countsSEXP, SEXP var_countsSEXP, SEXP sprvSEXP, SEXP MemLimSEXP, SEXP XtraSEXP, SEXP step_sizeSEXP, SEXP tolSEXP, SEXP epsabsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type ThetaHetStart(ThetaHetStartSEXP);
    Rcpp::traits::input_parameter< double >::type probshift(probshiftSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_counts(ref_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_counts(var_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sprv(sprvSEXP);
    Rcpp::traits::input_parameter< int >::type MemLim(MemLimSEXP);
    Rcpp::traits::input_parameter< int >::type Xtra(XtraSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type epsabs(epsabsSEXP);
    rcpp_result_gen = Rcpp::wrap(CppHetH0_Optim(ThetaHetStart, probshift, ref_counts, var_counts, sprv, MemLim, Xtra, step_size, tol, epsabs));
    return rcpp_result_gen;
END_RCPP
}
// GradPiPi_cppi_MP
double GradPiPi_cppi_MP(double M, double N, double PI, double THETA, int NecPres);
RcppExport SEXP _maelstRom_GradPiPi_cppi_MP(SEXP MSEXP, SEXP NSEXP, SEXP PISEXP, SEXP THETASEXP, SEXP NecPresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type PI(PISEXP);
    Rcpp::traits::input_parameter< double >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< int >::type NecPres(NecPresSEXP);
    rcpp_result_gen = Rcpp::wrap(GradPiPi_cppi_MP(M, N, PI, THETA, NecPres));
    return rcpp_result_gen;
END_RCPP
}
// GradPiPi_cppi
double GradPiPi_cppi(double M, double N, double PI, double THETA, int MemLim, int Xtra);
RcppExport SEXP _maelstRom_GradPiPi_cppi(SEXP MSEXP, SEXP NSEXP, SEXP PISEXP, SEXP THETASEXP, SEXP MemLimSEXP, SEXP XtraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type PI(PISEXP);
    Rcpp::traits::input_parameter< double >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< int >::type MemLim(MemLimSEXP);
    Rcpp::traits::input_parameter< int >::type Xtra(XtraSEXP);
    rcpp_result_gen = Rcpp::wrap(GradPiPi_cppi(M, N, PI, THETA, MemLim, Xtra));
    return rcpp_result_gen;
END_RCPP
}
// grad_pi_pi
NumericVector grad_pi_pi(NumericVector ms, NumericVector ns, double pi, double theta, int MemLim, int Xtra);
RcppExport SEXP _maelstRom_grad_pi_pi(SEXP msSEXP, SEXP nsSEXP, SEXP piSEXP, SEXP thetaSEXP, SEXP MemLimSEXP, SEXP XtraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ms(msSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type MemLim(MemLimSEXP);
    Rcpp::traits::input_parameter< int >::type Xtra(XtraSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_pi_pi(ms, ns, pi, theta, MemLim, Xtra));
    return rcpp_result_gen;
END_RCPP
}
// GradPiTheta_cppi_MP
double GradPiTheta_cppi_MP(double M, double N, double PI, double THETA, int NecPres);
RcppExport SEXP _maelstRom_GradPiTheta_cppi_MP(SEXP MSEXP, SEXP NSEXP, SEXP PISEXP, SEXP THETASEXP, SEXP NecPresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type PI(PISEXP);
    Rcpp::traits::input_parameter< double >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< int >::type NecPres(NecPresSEXP);
    rcpp_result_gen = Rcpp::wrap(GradPiTheta_cppi_MP(M, N, PI, THETA, NecPres));
    return rcpp_result_gen;
END_RCPP
}
// GradPiTheta_cppi
double GradPiTheta_cppi(double M, double N, double PI, double THETA, int MemLim, int Xtra);
RcppExport SEXP _maelstRom_GradPiTheta_cppi(SEXP MSEXP, SEXP NSEXP, SEXP PISEXP, SEXP THETASEXP, SEXP MemLimSEXP, SEXP XtraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type PI(PISEXP);
    Rcpp::traits::input_parameter< double >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< int >::type MemLim(MemLimSEXP);
    Rcpp::traits::input_parameter< int >::type Xtra(XtraSEXP);
    rcpp_result_gen = Rcpp::wrap(GradPiTheta_cppi(M, N, PI, THETA, MemLim, Xtra));
    return rcpp_result_gen;
END_RCPP
}
// grad_pi_theta
NumericVector grad_pi_theta(NumericVector ms, NumericVector ns, double pi, double theta, int MemLim, int Xtra);
RcppExport SEXP _maelstRom_grad_pi_theta(SEXP msSEXP, SEXP nsSEXP, SEXP piSEXP, SEXP thetaSEXP, SEXP MemLimSEXP, SEXP XtraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ms(msSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type MemLim(MemLimSEXP);
    Rcpp::traits::input_parameter< int >::type Xtra(XtraSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_pi_theta(ms, ns, pi, theta, MemLim, Xtra));
    return rcpp_result_gen;
END_RCPP
}
// MPhelper_GradThetaTheta
double MPhelper_GradThetaTheta(double M, double N, double PI, int NecPres);
RcppExport SEXP _maelstRom_MPhelper_GradThetaTheta(SEXP MSEXP, SEXP NSEXP, SEXP PISEXP, SEXP NecPresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type PI(PISEXP);
    Rcpp::traits::input_parameter< int >::type NecPres(NecPresSEXP);
    rcpp_result_gen = Rcpp::wrap(MPhelper_GradThetaTheta(M, N, PI, NecPres));
    return rcpp_result_gen;
END_RCPP
}
// GradThetaTheta_cppi_MP
double GradThetaTheta_cppi_MP(double M, double N, double PI, double THETA, int NecPres);
RcppExport SEXP _maelstRom_GradThetaTheta_cppi_MP(SEXP MSEXP, SEXP NSEXP, SEXP PISEXP, SEXP THETASEXP, SEXP NecPresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type PI(PISEXP);
    Rcpp::traits::input_parameter< double >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< int >::type NecPres(NecPresSEXP);
    rcpp_result_gen = Rcpp::wrap(GradThetaTheta_cppi_MP(M, N, PI, THETA, NecPres));
    return rcpp_result_gen;
END_RCPP
}
// GradThetaTheta_cppi
double GradThetaTheta_cppi(double M, double N, double PI, double THETA, int MemLim, int Xtra);
RcppExport SEXP _maelstRom_GradThetaTheta_cppi(SEXP MSEXP, SEXP NSEXP, SEXP PISEXP, SEXP THETASEXP, SEXP MemLimSEXP, SEXP XtraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type PI(PISEXP);
    Rcpp::traits::input_parameter< double >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< int >::type MemLim(MemLimSEXP);
    Rcpp::traits::input_parameter< int >::type Xtra(XtraSEXP);
    rcpp_result_gen = Rcpp::wrap(GradThetaTheta_cppi(M, N, PI, THETA, MemLim, Xtra));
    return rcpp_result_gen;
END_RCPP
}
// grad_theta_theta
NumericVector grad_theta_theta(NumericVector ms, NumericVector ns, double pi, double theta, int MemLim, int Xtra);
RcppExport SEXP _maelstRom_grad_theta_theta(SEXP msSEXP, SEXP nsSEXP, SEXP piSEXP, SEXP thetaSEXP, SEXP MemLimSEXP, SEXP XtraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ms(msSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type MemLim(MemLimSEXP);
    Rcpp::traits::input_parameter< int >::type Xtra(XtraSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_theta_theta(ms, ns, pi, theta, MemLim, Xtra));
    return rcpp_result_gen;
END_RCPP
}
// logSums_MaxMethod_CPP
double logSums_MaxMethod_CPP(std::vector<double> logvec);
RcppExport SEXP _maelstRom_logSums_MaxMethod_CPP(SEXP logvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type logvec(logvecSEXP);
    rcpp_result_gen = Rcpp::wrap(logSums_MaxMethod_CPP(logvec));
    return rcpp_result_gen;
END_RCPP
}
// logSums_MaxMethod_CPP_R
double logSums_MaxMethod_CPP_R(NumericVector logvec);
RcppExport SEXP _maelstRom_logSums_MaxMethod_CPP_R(SEXP logvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type logvec(logvecSEXP);
    rcpp_result_gen = Rcpp::wrap(logSums_MaxMethod_CPP_R(logvec));
    return rcpp_result_gen;
END_RCPP
}
// logSums_MaxMethodSigned_CPP
double logSums_MaxMethodSigned_CPP(std::vector<double> logvec, std::vector<int> signvec);
RcppExport SEXP _maelstRom_logSums_MaxMethodSigned_CPP(SEXP logvecSEXP, SEXP signvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type logvec(logvecSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type signvec(signvecSEXP);
    rcpp_result_gen = Rcpp::wrap(logSums_MaxMethodSigned_CPP(logvec, signvec));
    return rcpp_result_gen;
END_RCPP
}
// LogTrapezoidalInt_CPP
double LogTrapezoidalInt_CPP(double lower, double upper, int n, double a, double b, double q, int TC, int RC, int curTR, int curRC);
RcppExport SEXP _maelstRom_LogTrapezoidalInt_CPP(SEXP lowerSEXP, SEXP upperSEXP, SEXP nSEXP, SEXP aSEXP, SEXP bSEXP, SEXP qSEXP, SEXP TCSEXP, SEXP RCSEXP, SEXP curTRSEXP, SEXP curRCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type TC(TCSEXP);
    Rcpp::traits::input_parameter< int >::type RC(RCSEXP);
    Rcpp::traits::input_parameter< int >::type curTR(curTRSEXP);
    Rcpp::traits::input_parameter< int >::type curRC(curRCSEXP);
    rcpp_result_gen = Rcpp::wrap(LogTrapezoidalInt_CPP(lower, upper, n, a, b, q, TC, RC, curTR, curRC));
    return rcpp_result_gen;
END_RCPP
}
// LogNewtonCotes_CPP
double LogNewtonCotes_CPP(double lower, double upper, double a, double b, double q, int TC, int RC, int curTR, int curRC, NumericVector Wvec);
RcppExport SEXP _maelstRom_LogNewtonCotes_CPP(SEXP lowerSEXP, SEXP upperSEXP, SEXP aSEXP, SEXP bSEXP, SEXP qSEXP, SEXP TCSEXP, SEXP RCSEXP, SEXP curTRSEXP, SEXP curRCSEXP, SEXP WvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type TC(TCSEXP);
    Rcpp::traits::input_parameter< int >::type RC(RCSEXP);
    Rcpp::traits::input_parameter< int >::type curTR(curTRSEXP);
    Rcpp::traits::input_parameter< int >::type curRC(curRCSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wvec(WvecSEXP);
    rcpp_result_gen = Rcpp::wrap(LogNewtonCotes_CPP(lower, upper, a, b, q, TC, RC, curTR, curRC, Wvec));
    return rcpp_result_gen;
END_RCPP
}
// LogGaussianQuad_CPP
double LogGaussianQuad_CPP(double lower, double upper, double a, double b, double q, int TC, int RC, int curTR, int curRC, NumericVector Wvec, NumericVector Nvec);
RcppExport SEXP _maelstRom_LogGaussianQuad_CPP(SEXP lowerSEXP, SEXP upperSEXP, SEXP aSEXP, SEXP bSEXP, SEXP qSEXP, SEXP TCSEXP, SEXP RCSEXP, SEXP curTRSEXP, SEXP curRCSEXP, SEXP WvecSEXP, SEXP NvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type TC(TCSEXP);
    Rcpp::traits::input_parameter< int >::type RC(RCSEXP);
    Rcpp::traits::input_parameter< int >::type curTR(curTRSEXP);
    Rcpp::traits::input_parameter< int >::type curRC(curRCSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wvec(WvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Nvec(NvecSEXP);
    rcpp_result_gen = Rcpp::wrap(LogGaussianQuad_CPP(lower, upper, a, b, q, TC, RC, curTR, curRC, Wvec, Nvec));
    return rcpp_result_gen;
END_RCPP
}
// LogTanhSinhQuad_CPP
double LogTanhSinhQuad_CPP(double lower, double upper, int n, double a, double b, double q, int TC, int RC, int curTR, int curRC, double prec);
RcppExport SEXP _maelstRom_LogTanhSinhQuad_CPP(SEXP lowerSEXP, SEXP upperSEXP, SEXP nSEXP, SEXP aSEXP, SEXP bSEXP, SEXP qSEXP, SEXP TCSEXP, SEXP RCSEXP, SEXP curTRSEXP, SEXP curRCSEXP, SEXP precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type TC(TCSEXP);
    Rcpp::traits::input_parameter< int >::type RC(RCSEXP);
    Rcpp::traits::input_parameter< int >::type curTR(curTRSEXP);
    Rcpp::traits::input_parameter< int >::type curRC(curRCSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    rcpp_result_gen = Rcpp::wrap(LogTanhSinhQuad_CPP(lower, upper, n, a, b, q, TC, RC, curTR, curRC, prec));
    return rcpp_result_gen;
END_RCPP
}
// TumPurHelpFun_CPP
double TumPurHelpFun_CPP(std::vector<int> RCcol, int TC, std::vector<int> TumReads_oi, double a, double b, double q, std::vector<double> SCP_oi, int n, std::basic_string<char> NumIntMethod, double prec, NumericVector Wvec, NumericVector Nvec);
RcppExport SEXP _maelstRom_TumPurHelpFun_CPP(SEXP RCcolSEXP, SEXP TCSEXP, SEXP TumReads_oiSEXP, SEXP aSEXP, SEXP bSEXP, SEXP qSEXP, SEXP SCP_oiSEXP, SEXP nSEXP, SEXP NumIntMethodSEXP, SEXP precSEXP, SEXP WvecSEXP, SEXP NvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type RCcol(RCcolSEXP);
    Rcpp::traits::input_parameter< int >::type TC(TCSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type TumReads_oi(TumReads_oiSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type SCP_oi(SCP_oiSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::basic_string<char> >::type NumIntMethod(NumIntMethodSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wvec(WvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Nvec(NvecSEXP);
    rcpp_result_gen = Rcpp::wrap(TumPurHelpFun_CPP(RCcol, TC, TumReads_oi, a, b, q, SCP_oi, n, NumIntMethod, prec, Wvec, Nvec));
    return rcpp_result_gen;
END_RCPP
}
// TumPurHelpFun_CPP_R
double TumPurHelpFun_CPP_R(NumericVector RCcol, int TC, NumericVector TumReads_oi, double a, double b, double q, NumericVector SCP_oi, int n, std::basic_string<char> NumIntMethod, double prec, NumericVector Wvec, NumericVector Nvec);
RcppExport SEXP _maelstRom_TumPurHelpFun_CPP_R(SEXP RCcolSEXP, SEXP TCSEXP, SEXP TumReads_oiSEXP, SEXP aSEXP, SEXP bSEXP, SEXP qSEXP, SEXP SCP_oiSEXP, SEXP nSEXP, SEXP NumIntMethodSEXP, SEXP precSEXP, SEXP WvecSEXP, SEXP NvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type RCcol(RCcolSEXP);
    Rcpp::traits::input_parameter< int >::type TC(TCSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type TumReads_oi(TumReads_oiSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SCP_oi(SCP_oiSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::basic_string<char> >::type NumIntMethod(NumIntMethodSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wvec(WvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Nvec(NvecSEXP);
    rcpp_result_gen = Rcpp::wrap(TumPurHelpFun_CPP_R(RCcol, TC, TumReads_oi, a, b, q, SCP_oi, n, NumIntMethod, prec, Wvec, Nvec));
    return rcpp_result_gen;
END_RCPP
}
// TumPur_LogLik_CPP
double TumPur_LogLik_CPP(NumericVector optpars, NumericVector ref_counts, NumericVector var_counts, NumericVector tumpur, NumericVector weights, double SCPthreshold, int n, std::basic_string<char> NumIntMethod, double prec, NumericVector Wvec, NumericVector Nvec);
RcppExport SEXP _maelstRom_TumPur_LogLik_CPP(SEXP optparsSEXP, SEXP ref_countsSEXP, SEXP var_countsSEXP, SEXP tumpurSEXP, SEXP weightsSEXP, SEXP SCPthresholdSEXP, SEXP nSEXP, SEXP NumIntMethodSEXP, SEXP precSEXP, SEXP WvecSEXP, SEXP NvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type optpars(optparsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_counts(ref_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_counts(var_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tumpur(tumpurSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type SCPthreshold(SCPthresholdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::basic_string<char> >::type NumIntMethod(NumIntMethodSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wvec(WvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Nvec(NvecSEXP);
    rcpp_result_gen = Rcpp::wrap(TumPur_LogLik_CPP(optpars, ref_counts, var_counts, tumpur, weights, SCPthreshold, n, NumIntMethod, prec, Wvec, Nvec));
    return rcpp_result_gen;
END_RCPP
}
// qbeta_C
NumericVector qbeta_C(NumericVector qs, double a, double b);
RcppExport SEXP _maelstRom_qbeta_C(SEXP qsSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type qs(qsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(qbeta_C(qs, a, b));
    return rcpp_result_gen;
END_RCPP
}
// qbeta_C3
NumericVector qbeta_C3(NumericVector qs, double a, double b);
RcppExport SEXP _maelstRom_qbeta_C3(SEXP qsSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type qs(qsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(qbeta_C3(qs, a, b));
    return rcpp_result_gen;
END_RCPP
}
// TumPur_LogLik_CPP2
double TumPur_LogLik_CPP2(NumericVector optpars, NumericVector ref_counts, NumericVector var_counts, NumericVector tumpur, NumericVector weights, double SCPthreshold, int n, std::basic_string<char> NumIntMethod, double prec, NumericVector Wvec, NumericVector Nvec);
RcppExport SEXP _maelstRom_TumPur_LogLik_CPP2(SEXP optparsSEXP, SEXP ref_countsSEXP, SEXP var_countsSEXP, SEXP tumpurSEXP, SEXP weightsSEXP, SEXP SCPthresholdSEXP, SEXP nSEXP, SEXP NumIntMethodSEXP, SEXP precSEXP, SEXP WvecSEXP, SEXP NvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type optpars(optparsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_counts(ref_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_counts(var_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tumpur(tumpurSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type SCPthreshold(SCPthresholdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::basic_string<char> >::type NumIntMethod(NumIntMethodSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wvec(WvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Nvec(NvecSEXP);
    rcpp_result_gen = Rcpp::wrap(TumPur_LogLik_CPP2(optpars, ref_counts, var_counts, tumpur, weights, SCPthreshold, n, NumIntMethod, prec, Wvec, Nvec));
    return rcpp_result_gen;
END_RCPP
}
// TumPur_LogLik_CPP2X
double TumPur_LogLik_CPP2X(NumericVector optpars, NumericVector ref_counts, NumericVector var_counts, NumericVector tumpur, NumericVector weights, double SCPthreshold, int n, std::basic_string<char> NumIntMethod, double prec, NumericVector Wvec, NumericVector Nvec);
RcppExport SEXP _maelstRom_TumPur_LogLik_CPP2X(SEXP optparsSEXP, SEXP ref_countsSEXP, SEXP var_countsSEXP, SEXP tumpurSEXP, SEXP weightsSEXP, SEXP SCPthresholdSEXP, SEXP nSEXP, SEXP NumIntMethodSEXP, SEXP precSEXP, SEXP WvecSEXP, SEXP NvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type optpars(optparsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_counts(ref_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_counts(var_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tumpur(tumpurSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type SCPthreshold(SCPthresholdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::basic_string<char> >::type NumIntMethod(NumIntMethodSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wvec(WvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Nvec(NvecSEXP);
    rcpp_result_gen = Rcpp::wrap(TumPur_LogLik_CPP2X(optpars, ref_counts, var_counts, tumpur, weights, SCPthreshold, n, NumIntMethod, prec, Wvec, Nvec));
    return rcpp_result_gen;
END_RCPP
}
// TumPur_LogLik_CPP3
double TumPur_LogLik_CPP3(double q, double a, double b, NumericVector ref_counts, NumericVector var_counts, NumericVector tumpur, NumericVector weights, double SCPthreshold, int n, std::basic_string<char> NumIntMethod, double prec, NumericVector Wvec, NumericVector Nvec);
RcppExport SEXP _maelstRom_TumPur_LogLik_CPP3(SEXP qSEXP, SEXP aSEXP, SEXP bSEXP, SEXP ref_countsSEXP, SEXP var_countsSEXP, SEXP tumpurSEXP, SEXP weightsSEXP, SEXP SCPthresholdSEXP, SEXP nSEXP, SEXP NumIntMethodSEXP, SEXP precSEXP, SEXP WvecSEXP, SEXP NvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_counts(ref_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_counts(var_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tumpur(tumpurSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type SCPthreshold(SCPthresholdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::basic_string<char> >::type NumIntMethod(NumIntMethodSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wvec(WvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Nvec(NvecSEXP);
    rcpp_result_gen = Rcpp::wrap(TumPur_LogLik_CPP3(q, a, b, ref_counts, var_counts, tumpur, weights, SCPthreshold, n, NumIntMethod, prec, Wvec, Nvec));
    return rcpp_result_gen;
END_RCPP
}
// TumPur_LogLik_CPP3X
double TumPur_LogLik_CPP3X(double q, double a, double b, double qlim, NumericVector ref_counts, NumericVector var_counts, NumericVector tumpur, NumericVector weights, double SCPthreshold, int n, std::basic_string<char> NumIntMethod, double prec, NumericVector Wvec, NumericVector Nvec);
RcppExport SEXP _maelstRom_TumPur_LogLik_CPP3X(SEXP qSEXP, SEXP aSEXP, SEXP bSEXP, SEXP qlimSEXP, SEXP ref_countsSEXP, SEXP var_countsSEXP, SEXP tumpurSEXP, SEXP weightsSEXP, SEXP SCPthresholdSEXP, SEXP nSEXP, SEXP NumIntMethodSEXP, SEXP precSEXP, SEXP WvecSEXP, SEXP NvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type qlim(qlimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_counts(ref_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_counts(var_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tumpur(tumpurSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type SCPthreshold(SCPthresholdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::basic_string<char> >::type NumIntMethod(NumIntMethodSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wvec(WvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Nvec(NvecSEXP);
    rcpp_result_gen = Rcpp::wrap(TumPur_LogLik_CPP3X(q, a, b, qlim, ref_counts, var_counts, tumpur, weights, SCPthreshold, n, NumIntMethod, prec, Wvec, Nvec));
    return rcpp_result_gen;
END_RCPP
}
// TumPur_LogLik_CPP4
double TumPur_LogLik_CPP4(double q, double a, double b, NumericVector ref_counts, NumericVector var_counts, NumericVector tumpur, NumericVector weights, double SCPthreshold, int n, std::basic_string<char> NumIntMethod, double prec, NumericVector Wvec, NumericVector Nvec);
RcppExport SEXP _maelstRom_TumPur_LogLik_CPP4(SEXP qSEXP, SEXP aSEXP, SEXP bSEXP, SEXP ref_countsSEXP, SEXP var_countsSEXP, SEXP tumpurSEXP, SEXP weightsSEXP, SEXP SCPthresholdSEXP, SEXP nSEXP, SEXP NumIntMethodSEXP, SEXP precSEXP, SEXP WvecSEXP, SEXP NvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_counts(ref_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_counts(var_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tumpur(tumpurSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type SCPthreshold(SCPthresholdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::basic_string<char> >::type NumIntMethod(NumIntMethodSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wvec(WvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Nvec(NvecSEXP);
    rcpp_result_gen = Rcpp::wrap(TumPur_LogLik_CPP4(q, a, b, ref_counts, var_counts, tumpur, weights, SCPthreshold, n, NumIntMethod, prec, Wvec, Nvec));
    return rcpp_result_gen;
END_RCPP
}
// TumPur_LogLik_CPP_DB1
std::vector<double> TumPur_LogLik_CPP_DB1(NumericVector optpars, NumericVector ref_counts, NumericVector var_counts, NumericVector tumpur, NumericVector weights, double SCPthreshold, int n, std::basic_string<char> NumIntMethod, double prec, NumericVector Wvec, NumericVector Nvec);
RcppExport SEXP _maelstRom_TumPur_LogLik_CPP_DB1(SEXP optparsSEXP, SEXP ref_countsSEXP, SEXP var_countsSEXP, SEXP tumpurSEXP, SEXP weightsSEXP, SEXP SCPthresholdSEXP, SEXP nSEXP, SEXP NumIntMethodSEXP, SEXP precSEXP, SEXP WvecSEXP, SEXP NvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type optpars(optparsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_counts(ref_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_counts(var_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tumpur(tumpurSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type SCPthreshold(SCPthresholdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::basic_string<char> >::type NumIntMethod(NumIntMethodSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wvec(WvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Nvec(NvecSEXP);
    rcpp_result_gen = Rcpp::wrap(TumPur_LogLik_CPP_DB1(optpars, ref_counts, var_counts, tumpur, weights, SCPthreshold, n, NumIntMethod, prec, Wvec, Nvec));
    return rcpp_result_gen;
END_RCPP
}
// TumPur_LogLik_CPP_DB2
std::list<std::vector<double> > TumPur_LogLik_CPP_DB2(NumericVector optpars, NumericVector ref_counts, NumericVector var_counts, NumericVector tumpur, NumericVector weights, double SCPthreshold, int n, std::basic_string<char> NumIntMethod, double prec, NumericVector Wvec, NumericVector Nvec);
RcppExport SEXP _maelstRom_TumPur_LogLik_CPP_DB2(SEXP optparsSEXP, SEXP ref_countsSEXP, SEXP var_countsSEXP, SEXP tumpurSEXP, SEXP weightsSEXP, SEXP SCPthresholdSEXP, SEXP nSEXP, SEXP NumIntMethodSEXP, SEXP precSEXP, SEXP WvecSEXP, SEXP NvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type optpars(optparsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_counts(ref_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_counts(var_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tumpur(tumpurSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type SCPthreshold(SCPthresholdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::basic_string<char> >::type NumIntMethod(NumIntMethodSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wvec(WvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Nvec(NvecSEXP);
    rcpp_result_gen = Rcpp::wrap(TumPur_LogLik_CPP_DB2(optpars, ref_counts, var_counts, tumpur, weights, SCPthreshold, n, NumIntMethod, prec, Wvec, Nvec));
    return rcpp_result_gen;
END_RCPP
}
// TumPur_LogLik_CPP_DB3
std::list<std::vector<double> > TumPur_LogLik_CPP_DB3(NumericVector optpars, NumericVector ref_counts, NumericVector var_counts, NumericVector tumpur, NumericVector weights, double SCPthreshold, int n, std::basic_string<char> NumIntMethod, double prec, NumericVector Wvec, NumericVector Nvec);
RcppExport SEXP _maelstRom_TumPur_LogLik_CPP_DB3(SEXP optparsSEXP, SEXP ref_countsSEXP, SEXP var_countsSEXP, SEXP tumpurSEXP, SEXP weightsSEXP, SEXP SCPthresholdSEXP, SEXP nSEXP, SEXP NumIntMethodSEXP, SEXP precSEXP, SEXP WvecSEXP, SEXP NvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type optpars(optparsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_counts(ref_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_counts(var_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tumpur(tumpurSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type SCPthreshold(SCPthresholdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::basic_string<char> >::type NumIntMethod(NumIntMethodSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wvec(WvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Nvec(NvecSEXP);
    rcpp_result_gen = Rcpp::wrap(TumPur_LogLik_CPP_DB3(optpars, ref_counts, var_counts, tumpur, weights, SCPthreshold, n, NumIntMethod, prec, Wvec, Nvec));
    return rcpp_result_gen;
END_RCPP
}
// BrolDB
std::vector<double> BrolDB(int TC, double TP);
RcppExport SEXP _maelstRom_BrolDB(SEXP TCSEXP, SEXP TPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type TC(TCSEXP);
    Rcpp::traits::input_parameter< double >::type TP(TPSEXP);
    rcpp_result_gen = Rcpp::wrap(BrolDB(TC, TP));
    return rcpp_result_gen;
END_RCPP
}
// TumPur_LogLik_CPP2_10
double TumPur_LogLik_CPP2_10(NumericVector optpars, NumericVector ref_counts, NumericVector var_counts, NumericVector tumpur, NumericVector weights, double SCPthreshold, int n, std::basic_string<char> NumIntMethod, double prec, NumericVector Wvec, NumericVector Nvec);
RcppExport SEXP _maelstRom_TumPur_LogLik_CPP2_10(SEXP optparsSEXP, SEXP ref_countsSEXP, SEXP var_countsSEXP, SEXP tumpurSEXP, SEXP weightsSEXP, SEXP SCPthresholdSEXP, SEXP nSEXP, SEXP NumIntMethodSEXP, SEXP precSEXP, SEXP WvecSEXP, SEXP NvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type optpars(optparsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_counts(ref_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_counts(var_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tumpur(tumpurSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type SCPthreshold(SCPthresholdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::basic_string<char> >::type NumIntMethod(NumIntMethodSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wvec(WvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Nvec(NvecSEXP);
    rcpp_result_gen = Rcpp::wrap(TumPur_LogLik_CPP2_10(optpars, ref_counts, var_counts, tumpur, weights, SCPthreshold, n, NumIntMethod, prec, Wvec, Nvec));
    return rcpp_result_gen;
END_RCPP
}
// TumPur_LogLik_CPP2_100
double TumPur_LogLik_CPP2_100(NumericVector optpars, NumericVector ref_counts, NumericVector var_counts, NumericVector tumpur, NumericVector weights, double SCPthreshold, int n, std::basic_string<char> NumIntMethod, double prec, NumericVector Wvec, NumericVector Nvec);
RcppExport SEXP _maelstRom_TumPur_LogLik_CPP2_100(SEXP optparsSEXP, SEXP ref_countsSEXP, SEXP var_countsSEXP, SEXP tumpurSEXP, SEXP weightsSEXP, SEXP SCPthresholdSEXP, SEXP nSEXP, SEXP NumIntMethodSEXP, SEXP precSEXP, SEXP WvecSEXP, SEXP NvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type optpars(optparsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_counts(ref_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_counts(var_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tumpur(tumpurSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type SCPthreshold(SCPthresholdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::basic_string<char> >::type NumIntMethod(NumIntMethodSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wvec(WvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Nvec(NvecSEXP);
    rcpp_result_gen = Rcpp::wrap(TumPur_LogLik_CPP2_100(optpars, ref_counts, var_counts, tumpur, weights, SCPthreshold, n, NumIntMethod, prec, Wvec, Nvec));
    return rcpp_result_gen;
END_RCPP
}
// TumPur_LogLik_CPP2_1000
double TumPur_LogLik_CPP2_1000(NumericVector optpars, NumericVector ref_counts, NumericVector var_counts, NumericVector tumpur, NumericVector weights, double SCPthreshold, int n, std::basic_string<char> NumIntMethod, double prec, NumericVector Wvec, NumericVector Nvec);
RcppExport SEXP _maelstRom_TumPur_LogLik_CPP2_1000(SEXP optparsSEXP, SEXP ref_countsSEXP, SEXP var_countsSEXP, SEXP tumpurSEXP, SEXP weightsSEXP, SEXP SCPthresholdSEXP, SEXP nSEXP, SEXP NumIntMethodSEXP, SEXP precSEXP, SEXP WvecSEXP, SEXP NvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type optpars(optparsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_counts(ref_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_counts(var_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tumpur(tumpurSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type SCPthreshold(SCPthresholdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::basic_string<char> >::type NumIntMethod(NumIntMethodSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wvec(WvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Nvec(NvecSEXP);
    rcpp_result_gen = Rcpp::wrap(TumPur_LogLik_CPP2_1000(optpars, ref_counts, var_counts, tumpur, weights, SCPthreshold, n, NumIntMethod, prec, Wvec, Nvec));
    return rcpp_result_gen;
END_RCPP
}
// TumPur_LogLik_CPP2Y
double TumPur_LogLik_CPP2Y(NumericVector optpars, NumericVector ref_counts, NumericVector var_counts, NumericVector tumpur, NumericVector weights, double SCPthreshold, int n, std::basic_string<char> NumIntMethod, double prec, NumericVector Wvec, NumericVector Nvec);
RcppExport SEXP _maelstRom_TumPur_LogLik_CPP2Y(SEXP optparsSEXP, SEXP ref_countsSEXP, SEXP var_countsSEXP, SEXP tumpurSEXP, SEXP weightsSEXP, SEXP SCPthresholdSEXP, SEXP nSEXP, SEXP NumIntMethodSEXP, SEXP precSEXP, SEXP WvecSEXP, SEXP NvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type optpars(optparsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_counts(ref_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_counts(var_countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tumpur(tumpurSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type SCPthreshold(SCPthresholdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::basic_string<char> >::type NumIntMethod(NumIntMethodSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Wvec(WvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Nvec(NvecSEXP);
    rcpp_result_gen = Rcpp::wrap(TumPur_LogLik_CPP2Y(optpars, ref_counts, var_counts, tumpur, weights, SCPthreshold, n, NumIntMethod, prec, Wvec, Nvec));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_maelstRom_dBetaBinom_MP", (DL_FUNC) &_maelstRom_dBetaBinom_MP, 6},
    {"_maelstRom_grad_pi_MP", (DL_FUNC) &_maelstRom_grad_pi_MP, 5},
    {"_maelstRom_grad_theta_MP", (DL_FUNC) &_maelstRom_grad_theta_MP, 5},
    {"_maelstRom_dBetaBinom_cpp_old", (DL_FUNC) &_maelstRom_dBetaBinom_cpp_old, 5},
    {"_maelstRom_grad_pi_old", (DL_FUNC) &_maelstRom_grad_pi_old, 4},
    {"_maelstRom_grad_theta_old", (DL_FUNC) &_maelstRom_grad_theta_old, 4},
    {"_maelstRom_MyOptTest", (DL_FUNC) &_maelstRom_MyOptTest, 1},
    {"_maelstRom_dBetaBin_cppi_MP", (DL_FUNC) &_maelstRom_dBetaBin_cppi_MP, 5},
    {"_maelstRom_dBetaBin_cppi", (DL_FUNC) &_maelstRom_dBetaBin_cppi, 7},
    {"_maelstRom_dBetaBinom", (DL_FUNC) &_maelstRom_dBetaBinom, 7},
    {"_maelstRom_GradPi_cppi_MP", (DL_FUNC) &_maelstRom_GradPi_cppi_MP, 5},
    {"_maelstRom_GradPi_cppi", (DL_FUNC) &_maelstRom_GradPi_cppi, 6},
    {"_maelstRom_grad_pi", (DL_FUNC) &_maelstRom_grad_pi, 6},
    {"_maelstRom_GradTheta_cppi_MP", (DL_FUNC) &_maelstRom_GradTheta_cppi_MP, 5},
    {"_maelstRom_GradTheta_cppi", (DL_FUNC) &_maelstRom_GradTheta_cppi, 6},
    {"_maelstRom_grad_theta", (DL_FUNC) &_maelstRom_grad_theta, 6},
    {"_maelstRom_CppCnT_Optim", (DL_FUNC) &_maelstRom_CppCnT_Optim, 10},
    {"_maelstRom_CppHom_Optim", (DL_FUNC) &_maelstRom_CppHom_Optim, 11},
    {"_maelstRom_CppHet_Optim", (DL_FUNC) &_maelstRom_CppHet_Optim, 9},
    {"_maelstRom_CppHetH0_Optim", (DL_FUNC) &_maelstRom_CppHetH0_Optim, 10},
    {"_maelstRom_GradPiPi_cppi_MP", (DL_FUNC) &_maelstRom_GradPiPi_cppi_MP, 5},
    {"_maelstRom_GradPiPi_cppi", (DL_FUNC) &_maelstRom_GradPiPi_cppi, 6},
    {"_maelstRom_grad_pi_pi", (DL_FUNC) &_maelstRom_grad_pi_pi, 6},
    {"_maelstRom_GradPiTheta_cppi_MP", (DL_FUNC) &_maelstRom_GradPiTheta_cppi_MP, 5},
    {"_maelstRom_GradPiTheta_cppi", (DL_FUNC) &_maelstRom_GradPiTheta_cppi, 6},
    {"_maelstRom_grad_pi_theta", (DL_FUNC) &_maelstRom_grad_pi_theta, 6},
    {"_maelstRom_MPhelper_GradThetaTheta", (DL_FUNC) &_maelstRom_MPhelper_GradThetaTheta, 4},
    {"_maelstRom_GradThetaTheta_cppi_MP", (DL_FUNC) &_maelstRom_GradThetaTheta_cppi_MP, 5},
    {"_maelstRom_GradThetaTheta_cppi", (DL_FUNC) &_maelstRom_GradThetaTheta_cppi, 6},
    {"_maelstRom_grad_theta_theta", (DL_FUNC) &_maelstRom_grad_theta_theta, 6},
    {"_maelstRom_logSums_MaxMethod_CPP", (DL_FUNC) &_maelstRom_logSums_MaxMethod_CPP, 1},
    {"_maelstRom_logSums_MaxMethod_CPP_R", (DL_FUNC) &_maelstRom_logSums_MaxMethod_CPP_R, 1},
    {"_maelstRom_logSums_MaxMethodSigned_CPP", (DL_FUNC) &_maelstRom_logSums_MaxMethodSigned_CPP, 2},
    {"_maelstRom_LogTrapezoidalInt_CPP", (DL_FUNC) &_maelstRom_LogTrapezoidalInt_CPP, 10},
    {"_maelstRom_LogNewtonCotes_CPP", (DL_FUNC) &_maelstRom_LogNewtonCotes_CPP, 10},
    {"_maelstRom_LogGaussianQuad_CPP", (DL_FUNC) &_maelstRom_LogGaussianQuad_CPP, 11},
    {"_maelstRom_LogTanhSinhQuad_CPP", (DL_FUNC) &_maelstRom_LogTanhSinhQuad_CPP, 11},
    {"_maelstRom_TumPurHelpFun_CPP", (DL_FUNC) &_maelstRom_TumPurHelpFun_CPP, 12},
    {"_maelstRom_TumPurHelpFun_CPP_R", (DL_FUNC) &_maelstRom_TumPurHelpFun_CPP_R, 12},
    {"_maelstRom_TumPur_LogLik_CPP", (DL_FUNC) &_maelstRom_TumPur_LogLik_CPP, 11},
    {"_maelstRom_qbeta_C", (DL_FUNC) &_maelstRom_qbeta_C, 3},
    {"_maelstRom_qbeta_C3", (DL_FUNC) &_maelstRom_qbeta_C3, 3},
    {"_maelstRom_TumPur_LogLik_CPP2", (DL_FUNC) &_maelstRom_TumPur_LogLik_CPP2, 11},
    {"_maelstRom_TumPur_LogLik_CPP2X", (DL_FUNC) &_maelstRom_TumPur_LogLik_CPP2X, 11},
    {"_maelstRom_TumPur_LogLik_CPP3", (DL_FUNC) &_maelstRom_TumPur_LogLik_CPP3, 13},
    {"_maelstRom_TumPur_LogLik_CPP3X", (DL_FUNC) &_maelstRom_TumPur_LogLik_CPP3X, 14},
    {"_maelstRom_TumPur_LogLik_CPP4", (DL_FUNC) &_maelstRom_TumPur_LogLik_CPP4, 13},
    {"_maelstRom_TumPur_LogLik_CPP_DB1", (DL_FUNC) &_maelstRom_TumPur_LogLik_CPP_DB1, 11},
    {"_maelstRom_TumPur_LogLik_CPP_DB2", (DL_FUNC) &_maelstRom_TumPur_LogLik_CPP_DB2, 11},
    {"_maelstRom_TumPur_LogLik_CPP_DB3", (DL_FUNC) &_maelstRom_TumPur_LogLik_CPP_DB3, 11},
    {"_maelstRom_BrolDB", (DL_FUNC) &_maelstRom_BrolDB, 2},
    {"_maelstRom_TumPur_LogLik_CPP2_10", (DL_FUNC) &_maelstRom_TumPur_LogLik_CPP2_10, 11},
    {"_maelstRom_TumPur_LogLik_CPP2_100", (DL_FUNC) &_maelstRom_TumPur_LogLik_CPP2_100, 11},
    {"_maelstRom_TumPur_LogLik_CPP2_1000", (DL_FUNC) &_maelstRom_TumPur_LogLik_CPP2_1000, 11},
    {"_maelstRom_TumPur_LogLik_CPP2Y", (DL_FUNC) &_maelstRom_TumPur_LogLik_CPP2Y, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_maelstRom(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
