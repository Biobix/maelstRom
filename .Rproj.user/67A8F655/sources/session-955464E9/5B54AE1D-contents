###########################################################
#################### 0. LOAD LIBRARIES ####################
###########################################################

library("MAGE")


###########################################################
################## 1. LOAD CONTROL DATA ###################
###########################################################

# MAGE's genotyping performance is evaluated on healthy tissue (control) data.
# This doesn't mean you can't genotype tumor data, but it should be more difficult.

load("data_allchr_control.RData")


###########################################################
############# 2. GLOBAL PARAMETER ESTIMATION ##############
###########################################################

# Parameters such as Sequencing Error (SE) and inbreeding coefficient (F) should be constant across al loci,
# as such these are estimated via a quick and rough unshifted binomial fit on the data

# Define some quality criteria to determine which loci can play a part in the estimations
pA_filt <- 0.15 # Loci with a low minor allele frequency are less reliable to estimate F
SE_filt <- 0.035 # Loci for which the fitting procedure returns an absurdly high sequencing error are suspicious
NumSamp_filt <- 40 # Loci with a lot of samples are reliable
MedianCov_filt <- 10 # Loci with high coverage are suited to estimate these parameters

# A function for parallelization
GlobalEstFun <- function(data){
  
  SE_all <- c()
  F_all <- c()
  positions <- hash::keys(data)
  
  for (z in positions) {
    Fest_results <- MAGE::estimate_parameters(ref_counts = data[[z]]$ref_count, var_counts = data[[z]]$var_count, deltaF = 10^-8, maxIT = 100, 
                                              SE_prior = 0.002, F_inbr_prior = NULL, HetProb = 0.5)
    data[[z]]$nrep_0 <- Fest_results$nrep
    data[[z]]$allelefreq_0 <- Fest_results$allelefreq
    data[[z]]$est_SE <- Fest_results$SE
    data[[z]]$est_inbr <- Fest_results$F_inbr
    data[[z]]$genotype_0 <- Fest_results$genotypes
    TS <- Fest_results$genoprobs
    colnames(TS) <- c("p(rr)_0", "p(rv)_0", "p(vv)_0")
    data[[z]]<-cbind(data[[z]], TS)
    if (!(Fest_results$allelefreq <= pA_filt || Fest_results$allelefreq >= (1 - pA_filt) || Fest_results$SE > SE_filt) & 
        nrow(data[[z]])>=NumSamp_filt & median(data[[z]]$ref_count + data[[z]]$var_count) >= MedianCov_filt) {
      SE_all <- c(SE_all, Fest_results$SE)
      F_all <- c(F_all, Fest_results$F_inbr)
    }
  }
  
  return(list(data, SE_all, F_all))
  
}

cl <- parallel::makeCluster(getOption("cl.cores", 22))
parallel::clusterExport(cl, c("pA_filt", "SE_filt", "NumSamp_filt", "MedianCov_filt"))
GenoInterData <- parallel::parLapply(cl, X = data_allchr_control, fun = GlobalEstFun)
parallel::stopCluster(cl)

SE_allvec <- c()
F_allvec <- c()
for(i in 1:22){
  SE_allvec <- c(SE_allvec, (GenoInterData[[i]])[[2]])
  F_allvec <- c(F_allvec, (GenoInterData[[i]])[[3]])
}
SEmedian <- median(SE_allvec)
Fmedian <- median(F_allvec)
save(list = c("SEmedian", "Fmedian"), file = "GlobalParamEst.RData")

save("GenoInterData", file="GenoInterBackup.RData")
GenoInterData <- lapply(GenoInterData, `[[`, 1)
save("GenoInterData", file="GenoInterData.RData")



###########################################################
###################### 3. GENOTYPING ######################
###########################################################

# The betabinomial fit can perform a robust fitting procedure, for which some settings should be given:
RunDistRob <- "Cook"
RunCookMargin <- 5

dir.create("/data/user_homes/cedrics/MAGE_PrePaper/SCRIPT2_Plots")
wd_res <- "/data/user_homes/cedrics/MAGE_PrePaper/SCRIPT2_Plots/"

# Construct a function to enable parallelization
BetaBinomGenotyping <- function(data){
  positions <- names(data)
  results <- data.frame()
  for (z in positions) {
    lrt_results <- MAGE::lrt_eqtl_BetaBinom_DistRob(data_counts = data[[z]], SE = SEmedian, inbr = Fmedian, DistRob = RunDistRob, 
                                                    CookMargin = RunCookMargin, fitH0 = TRUE)
    data[[z]]<-lrt_results$data_hash
    med_ase <- MAGE::median_eqtl(data[[z]]$ref_count, data[[z]]$var_count, data[[z]]$allelefreq[1], Fmedian) # calculates a median shift
    results_z <- data.frame("position" = z, "gene" = data[[z]]$gene[1], "probshift" = as.numeric(lrt_results$AE), 
                            "LRT" = as.numeric(lrt_results$AE_lrt), "p" = as.numeric(lrt_results$AE_p), "quality" = lrt_results$quality, 
                            "allele.frequency" = data[[z]]$allelefreq[1], "dbSNP" = data[[z]]$dbSNP_ref[1], 
                            "reference" = data[[z]]$ref[1], "variant" = data[[z]]$var[1], "est_SE" = data[[z]]$est_SE[1], 
                            "coverage" = data[[z]]$coverage[1], "nr_samples" = nrow(data[[z]]), "GOF" = lrt_results$GOF, 
                            "GOFaltMEAN" = lrt_results$GOFaltMEAN, "GOFaltMEDIAN" = lrt_results$GOFaltMEDIAN, 
                            "GOFaltPERDIST" = lrt_results$GOFaltPERDIST, "GOFaltONLYHET" = lrt_results$GOFaltONLYHET, 
                            "GOFexactMEAN" = lrt_results$GOFexactMEAN, "GOFexactMEANLOG" = lrt_results$GOFexactMEANLOG, 
                            "median_ASE" = med_ase, "est_inbreeding" = data[[z]]$est_inbr[1], "tot_inbreeding" = Fmedian, 
                            "nrep_lrt" = as.numeric(lrt_results$nrep), "nrep_first" = data[[z]]$nrep[1], 
                            "theta_hom" = lrt_results$theta_hom, "theta_het" = lrt_results$theta_het,
                            stringsAsFactors = FALSE)
    results <- rbind(results, results_z) # results; one position per line
    
    # Make a plot PAS NOG AAN
    # !!!
    # !!!
    # !!!
    MAGE::plot_eqtl_BetaBinom(ref_counts=data[[z]]$ref_count, var_counts=data[[z]]$var_count, pr=lrt_results$rho_rr, prv=lrt_results$rho_rv, 
                        pv=lrt_results$rho_vv, theta_hom=lrt_results$theta_hom, theta_het=lrt_results$theta_het, probshift=as.numeric(lrt_results$AE),
                        theta_hom_NoShift=lrt_results$theta_hom_NoShift, theta_het_NoShift=lrt_results$theta_het_NoShift, SE=SEmedian, wd_res=wd_res, 
                        chr=data[[z]]$chromosome[1], position=z, gene=data[[z]]$gene[1], coverage = 50, plot_H0 = TRUE)
    
  }
  results <- MAGE::HWE_chisquared(results, Fmedian, data)
  return(list(data, results))
}

cl <- parallel::makeCluster(getOption("cl.cores", 22))
parallel::clusterExport(cl, c("RunDistRob", "RunCookMargin", "Fmedian", "SEmedian", "wd_res"))
GenoFinData <- parallel::parLapply(cl, X = GenoInterData, fun = BetaBinomGenotyping)
parallel::stopCluster(cl)


###########################################################
##################### 4. SAVE RESULTS #####################
###########################################################

SCRIPT2RES_genotyping <- lapply(GenoFinData, `[[`, 1)
SCRIPT2RES_restab <- lapply(GenoFinData, `[[`, 2)

save("SCRIPT2RES_genotyping", file="SCRIPT2RES_genotyping.RData")
save("SCRIPT2RES_restab", file="SCRIPT2RES_restab.RData")
