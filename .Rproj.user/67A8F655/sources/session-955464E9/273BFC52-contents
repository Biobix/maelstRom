###########################################################
############### 0. LOAD FILES AND PACKAGES ################
###########################################################

library(MAGE)
# Load in control- and tumor data. We limit ourselves to stage 1 tumor data in this script.
load("data_allchr_control.RData")
load("data_allchr_stage1.RData")
load("GlobalParamEst.RData")

load("sample_info_control.RData")

###########################################################
################ 1. iAI ANALYSIS FUNCTION #################
###########################################################

# The directory for QC-plots
PlotDir <- "/data/user_homes/cedrics/MAGE_finaltests/SCRIPT5_Plots_OnlyKIRC/"

iAI_Analysis <- function(datas){
  
  data <- datas[[1]]
  data_t <- datas[[2]]
  chr <- datas[[3]]
  LocNames <- names(data)
  iAI_ResDF <- data.frame(LocName = LocNames, Gene = "", PiFitH0 = 0, PiFitH1 = 0, ThetaH0 = 0, ThetaC = 0, ThetaT = 0, RhoH0 = 0, RhoC = 0, RhoT = 0, 
                          LRTpval = 0, NumHetC = 0, NumHetT = 0, RobFlagC = "", RobFlagT = "", HWEC = 0, HWET = 0, CovC = 0, CovT = 0, CovC2 = 0, 
                          CovT2 = 0, CovC_Med = 0, CovT_Med = 0, NumOutC = 0, NumOutT = 0, "nrep_H0" = 101, "nrep_H1" = 101, QualityC = "N", QualityT = "N")
  
  for(N in LocNames){
    
    CData <- data[[N]]
    CData <- CData[CData$project_ID=="TCGA-KIRC",]
    if(nrow(CData)<10){
      next
    }
    
    TData <- data_t[[N]]
    if(is.null(TData)){
      next
    }
    if(nrow(TData)==0){
      next
    }
    if(median(CData$ref_count+CData$var_count) <= 3 | median(TData$ref_count+TData$var_count) <= 3){
      next
    }
    
    iAI_ResDF$Gene[iAI_ResDF$LocName == N] <- CData$gene[1]
    C_DF <- data.frame("ref_count" = CData$ref_count, "var_count" = CData$var_count, "Tumor" = 0)
    T_DF <- data.frame("ref_count" = TData$ref_count, "var_count" = TData$var_count, "Tumor" = 1)
    
    # We FIRST remove outliers in both control- and tumordata, for which we perform separate beta-binomial fits on both
    OUTfitC <- MAGE::lrt_eqtl_BetaBinom_DistRob(data_counts = C_DF, SE = SEmedian, inbr = Fmedian, CookMargin = 5, fitH0 = FALSE)
    OUTfitT <- MAGE::lrt_eqtl_BetaBinom_DistRob(data_counts = T_DF, SE = SEmedian, inbr = Fmedian, CookMargin = 5, fitH0 = FALSE)
    OUTfitC_DH <- OUTfitC$data_hash
    OUTfitT_DH <- OUTfitT$data_hash
    C_DF$Outlier <- OUTfitC_DH$Outlier
    T_DF$Outlier <- OUTfitT_DH$Outlier
    CurDF <- rbind(C_DF, T_DF)
    
    iAI_ResDF$NumOutC[iAI_ResDF$LocName == N] <- sum(C_DF$Outlier)
    iAI_ResDF$NumOutT[iAI_ResDF$LocName == N] <- sum(T_DF$Outlier)
    
    # Perform ONE BETABINOMIAL FIT on the entire data, i.e. assuming the same theta-parameter, i.e. assuming NO iAI
    PiEstRes <- MAGE::lrt_eqtl_BetaBinom(data_counts = CurDF[CurDF$Outlier == 0,], SE = SEmedian, inbr = Fmedian, fitH0 = FALSE)
    PiEstRes_DF <- PiEstRes$data_hash
    if(sum(PiEstRes_DF$prv) < 10){
      next
    }
    PiH0 <- PiEstRes$AE
    rho_rr <- PiEstRes$rho_rr
    rho_rv <- PiEstRes$rho_rv
    rho_vv <- PiEstRes$rho_vv
    ThetaHomH0 <- PiEstRes$theta_hom
    ThetaHetH0 <- PiEstRes$theta_het
    
    iAI_ResDF$PiFitH0[iAI_ResDF$LocName == N] <- PiH0
    iAI_ResDF$ThetaH0[iAI_ResDF$LocName == N] <- ThetaHetH0
    
    # Perform a fit assuming different theta between control and tumor samples
    FullFit <- MAGE::iAI_FullModelFit(data_counts = CurDF[CurDF$Outlier == 0,], allelefreq=0.5, SE = SEmedian, inbr = Fmedian, dltaco = 10^-6, HWE = FALSE, 
                                      p_InitEst = FALSE, ThetaInits = "moment", ReEstThetas = "moment", NoSplitHom = TRUE, NoSplitHet = TRUE,
                                      ResetThetaMin = 10^-10, ResetThetaMax = 10^-1, thetaTRY = c(10^-1, 10^-3, 10^-7), probshift_init = PiH0)
    
    ParamVec <- FullFit$ParamVec
    iAI_ResDF$PiFitH1[iAI_ResDF$LocName == N] <- ParamVec["probshift"]
    iAI_ResDF$ThetaC[iAI_ResDF$LocName == N] <- ParamVec["theta_het_control"]
    iAI_ResDF$ThetaT[iAI_ResDF$LocName == N] <- ParamVec["theta_het_tumor"]
    
    # Determine the log-likelihood for both models
    
    LikTot <- MAGE::pmf_eqtl_BetaBinom(CurDF[CurDF$Outlier==0,]$ref_count, CurDF[CurDF$Outlier==0,]$var_count, probshift = PiH0, SEmedian, 
                                       rho_rr, rho_vv, rho_rv, theta_hom = ThetaHomH0, theta_het = ThetaHetH0)
    LikC <- MAGE::pmf_eqtl_BetaBinom(C_DF[C_DF$Outlier==0,]$ref_count, C_DF[C_DF$Outlier==0,]$var_count, probshift = ParamVec["probshift"], SEmedian, 
                                     ParamVec["pr"], ParamVec["pv"], ParamVec["prv"], theta_hom = ParamVec["theta_hom"], theta_het = ParamVec["theta_het_control"])
    LikT <- MAGE::pmf_eqtl_BetaBinom(T_DF[T_DF$Outlier==0,]$ref_count, T_DF[T_DF$Outlier==0,]$var_count, probshift = ParamVec["probshift"], SEmedian, 
                                     ParamVec["pr"], ParamVec["pv"], ParamVec["prv"], theta_hom = ParamVec["theta_hom"], theta_het = ParamVec["theta_het_tumor"])
    
    lrtstat <- -2 * (sum(log(LikTot)) - sum(log(c(LikC, LikT))))
    LRTpval <- pchisq(lrtstat, df = 1, lower.tail = F)
    iAI_ResDF$LRTpval[iAI_ResDF$LocName == N] <- LRTpval
    
    iAI_ResDF$NumHetC[iAI_ResDF$LocName == N] <- sum(OUTfitC_DH$prv)
    iAI_ResDF$NumHetT[iAI_ResDF$LocName == N] <- sum(OUTfitT_DH$prv)
    
    iAI_ResDF$RobFlagC[iAI_ResDF$LocName == N] <- OUTfitC$RobFlag
    iAI_ResDF$RobFlagT[iAI_ResDF$LocName == N] <- OUTfitT$RobFlag
    
    
    #SD100_C <- sqrt(PiH0 * (1-PiH0) * ((1+100*CRes$theta_het)/(100+100*CRes$theta_het)))
    #SD100_T <- sqrt(PiH0 * (1-PiH0) * ((1+100*TRes$theta_het)/(100+100*TRes$theta_het)))
    #iAI_ResDF$EffectSize[iAI_ResDF$LocName == N] <- SD100_T - SD100_C
    
    iAI_ResDF$QualityC[iAI_ResDF$LocName == N] <- OUTfitC$quality
    iAI_ResDF$QualityT[iAI_ResDF$LocName == N] <- OUTfitT$quality
    
    HWEtest_C <- MAGE::HWE_chisquared_small(Fmedian = Fmedian, OUTfitC_DH)
    iAI_ResDF$HWEC[iAI_ResDF$LocName == N] <- HWEtest_C$PVAL
    HWEtest_T <- MAGE::HWE_chisquared_small(Fmedian = Fmedian, OUTfitT_DH)
    iAI_ResDF$HWET[iAI_ResDF$LocName == N] <- HWEtest_T$PVAL
    
    iAI_ResDF$CovC[iAI_ResDF$LocName == N] <- mean(C_DF[C_DF$Outlier==0,]$ref_count + C_DF[C_DF$Outlier==0,]$var_count)
    iAI_ResDF$CovT[iAI_ResDF$LocName == N] <- mean(T_DF[T_DF$Outlier==0,]$ref_count + T_DF[T_DF$Outlier==0,]$var_count)
    
    iAI_ResDF$CovC2[iAI_ResDF$LocName == N] <- mean((C_DF[C_DF$Outlier==0,]$ref_count + C_DF[C_DF$Outlier==0,]$var_count)^2)
    iAI_ResDF$CovT2[iAI_ResDF$LocName == N] <- mean((T_DF[T_DF$Outlier==0,]$ref_count + T_DF[T_DF$Outlier==0,]$var_count)^2)
    
    iAI_ResDF$CovC_Med[iAI_ResDF$LocName == N] <- median(C_DF[C_DF$Outlier==0,]$ref_count + C_DF[C_DF$Outlier==0,]$var_count)
    iAI_ResDF$CovT_Med[iAI_ResDF$LocName == N] <- median(T_DF[T_DF$Outlier==0,]$ref_count + T_DF[T_DF$Outlier==0,]$var_count)
    
    MyPlots <- MAGE::iAIPlot_CountCorrected(ControlRef = C_DF$ref_count, ControlVar = C_DF$var_count, CaseRef = T_DF$ref_count, CaseVar = T_DF$var_count,
                                            rho_rr = ParamVec["pr"], rho_rv = ParamVec["prv"], rho_vv = ParamVec["pv"], SE = SEmedian, PiFix = ParamVec["probshift"], HomTheta = ParamVec["theta_hom"],
                                            ControlTheta = ParamVec["theta_het_control"], CaseTheta = ParamVec["theta_het_tumor"], MinCount = 0, ScaleCount = 100)
    
    File <- paste0(PlotDir, "chr", chr, "/", N,".png")
    dir.create(dirname(File), showWarnings = FALSE)
    
    png(File, height = 550, width = 1100)
    
    gridExtra::grid.arrange(MyPlots[[1]], MyPlots[[2]], ncol=2)
    
    dev.off()
    
    iAI_ResDF$nrep_H0[iAI_ResDF$LocName == N] <- PiEstRes$nrep
    iAI_ResDF$nrep_H1[iAI_ResDF$LocName == N] <- FullFit$nrep
    
  }
  
  iAI_ResDF <- iAI_ResDF[iAI_ResDF$CovC!=0,]
  
  iAI_ResDF$RhoH0 <- 1/((1/iAI_ResDF$ThetaH0)+1)
  iAI_ResDF$RhoC <- 1/((1/iAI_ResDF$ThetaC)+1)
  iAI_ResDF$RhoT <- 1/((1/iAI_ResDF$ThetaT)+1)
  
  return(iAI_ResDF)
  
}

datas <- list()
for(k in 1:22){
  TL <- list(data_allchr_control[[k]], data_allchr_stage1[[k]], k)
  datas[[k]] <- TL
}

cl <- parallel::makeCluster(getOption("cl.cores", 22))
parallel::clusterExport(cl, c("SEmedian", "Fmedian", "PlotDir"))
iAI_Res_AllChr <- parallel::parLapply(cl, X = datas, fun = iAI_Analysis)
parallel::stopCluster(cl)



iAI_Res_List <- list()
for(j in 1:22){
  bli <- iAI_Res_AllChr[[j]]
  bli$Position <- 0
  CData <- datas[[j]][[1]]
  for(Ns in bli$LocName){
    CurCData <- CData[[Ns]]
    bli$Position[bli$LocName==Ns] <- CurCData$position[1]
  }
  iAI_Res_List[[j]] <- bli
}
iAI_ResDF_Fin <- iAI_Res_List[[1]]
iAI_ResDF_Fin$Chrom <- 1
for(k in 2:22){
  iAI_ResDF_Inter <- iAI_Res_List[[k]]
  iAI_ResDF_Inter$Chrom <- k
  iAI_ResDF_Fin <- rbind(iAI_ResDF_Fin, iAI_ResDF_Inter)
}

save("iAI_ResDF_Fin", file="SCRIPT5_Results.RData")
