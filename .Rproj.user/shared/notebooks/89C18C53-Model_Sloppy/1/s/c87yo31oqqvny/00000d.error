{"frames":[{"func":"mblogit(formula = triplet ~ genotype, random = ~1 | sampleID, \n    weights = count, data = TripletDF)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mmclogit.fitPQLMQL(y = Y, s = s, w = weights, X = XD, Z = ZD, \n    d = d, method = method, estimator = estimator, control = control, \n    offset = offset)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"PQLMQL_innerFit(y.star, X, Z, W, d, offset, method, estimator, \n    control)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"lapply(Phi.start, solve)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FUN(X[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FUN(X[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"solve.default(X[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in solve.default(X[[i]], ...) : 'a' (63 x 1) must be square\n"}