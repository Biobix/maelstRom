"0",""
"0","iAI_res <- data.frame(LocName = names(controlList), PiFitH0 = 0, PiFitH1 = 0, ThetaH0 = 0, ThetaC = 0, ThetaT = 0, RhoH0 = 0, RhoC = 0, RhoT = 0,"
"0","                                      LRTpval = 0, NumHetC = 0, NumHetT = 0, RobFlagC = """", RobFlagT = """", HWEC = 0, HWET = 0, CovC_mean = 0, "
"0","                                      CovT_mean = 0, CovC_med = 0, CovT_med = 0, NumOutC = 0, NumOutT = 0, QualityC = ""N"", QualityT = ""N"","
"0","                                      pr = 0, prv = 0, pv = 0, ThetaHom = 0)"
"0",""
"0","for(SNP in names(controlList)){"
"0","  "
"0","  C_DF <- data.frame(""ref_count"" = controlList[[SNP]]$ref_count, ""var_count"" = controlList[[SNP]]$var_count, ""Tumor"" = 0)"
"0","  T_DF <- data.frame(""ref_count"" = caseList[[SNP]]$ref_count, ""var_count"" = caseList[[SNP]]$var_count, ""Tumor"" = 1)"
"0","  "
"0","  # Previously, we used lrt_eqtl_BetaBinom_DistRob() to ROBUSTLY fit our models by removing outliers via Cook's distance."
"0","  # Now however, we're working with data from two different sources (control- and tumor tissue) and have no way of knowing in advance how similar these are."
"0","  # As such, outlier detections should happen ON BOTH SETS SEPARATELY yet the two hypotheses we'll be fitting share all or some parameters between the two."
"0","  # For this, we can use the lrt_eqtl_BetaBinom_DistRob() function with its ""fitH0"" set to false, which will not complete the entire eqtl-detection pipeline,"
"0","  # but will cut it short before fitting the unshifted model. By running this function on both our datasets separately in advance of the iAI-relevant fits,"
"0","  # we ensure correct outlier detection Ã¡nd the use of the same dataset in our upcoming likelihood ratio tests."
"0","  "
"0","  "
"0","  # 1. Detect and extract outliers using lrt_eqtl_BetaBinom_DistRob()"
"0","  OUTfitC <- MAGE::lrt_eqtl_BetaBinom_DistRob(data_counts = C_DF, SE = SEmedian, inbr = Fmedian, CookMargin = 5, fitH0 = FALSE)"
"0","  OUTfitT <- MAGE::lrt_eqtl_BetaBinom_DistRob(data_counts = T_DF, SE = SEmedian, inbr = Fmedian, CookMargin = 5, fitH0 = FALSE)"
"0","  OUTfitC_DH <- OUTfitC$data_hash; OUTfitT_DH <- OUTfitT$data_hash"
"0","  C_DF$Outlier <- OUTfitC_DH$Outlier; T_DF$Outlier <- OUTfitT_DH$Outlier"
"0","  CurDF <- rbind(C_DF, T_DF)"
"0","  # These results are also handy for an estimation of the number of heterozygotes in controls and tumors AND the number of outliers, both good filter criteria."
"0","  # We can also include a ""RobFlag"" which gives more information about outlier detection (e.g. none detected, or so unreasonably many that none were removed)"
"0","  iAI_res$NumHetC[iAI_res$LocName == SNP] <- sum(OUTfitC_DH$prv); iAI_res$NumHetT[iAI_res$LocName == SNP] <- sum(OUTfitT_DH$prv)"
"0","  iAI_res$NumOutC[iAI_res$LocName == SNP] <- sum(C_DF$Outlier); iAI_res$NumOutT[iAI_res$LocName == SNP] <- sum(T_DF$Outlier)"
"0","  iAI_res$RobFlagC[iAI_res$LocName == SNP] <- OUTfitC$RobFlag; iAI_res$RobFlagT[iAI_res$LocName == SNP] <- OUTfitT$RobFlag"
"0","  "
"0","  "
"0","  # 2. Perform one fit on the entire (non-outlying) data, i.e. all parameters shared, i.e. assuming no iAI; the null hypothesis in iAI detection"
"0","  NOiAI_fit <- MAGE::lrt_eqtl_BetaBinom(data_counts = CurDF[CurDF$Outlier == 0,], SE = SEmedian, inbr = Fmedian, fitH0 = FALSE)"
"0","  NOiAI_fit_DF <- NOiAI_fit$data_hash"
"0","  PiH0 <- NOiAI_fit$probshift"
"0","  rho_rr <- NOiAI_fit$rho_rr; rho_rv <- NOiAI_fit$rho_rv; rho_vv <- NOiAI_fit$rho_vv"
"0","  ThetaHomH0 <- NOiAI_fit$theta_hom_H1; ThetaHetH0 <- NOiAI_fit$theta_het_H1"
"0","  "
"0","  iAI_res$PiFitH0[iAI_res$LocName == SNP] <- PiH0"
"0","  iAI_res$ThetaH0[iAI_res$LocName == SNP] <- ThetaHetH0"
"0","  "
"0","  "
"0","  # 3. Perform a fit on the (non-outlying) data allowing separate theta_het parameters for control- and tumor-data"
"0","  FullFit <- MAGE::iAI_FullModelFit(data_counts = CurDF[CurDF$Outlier == 0,], SE = SEmedian, inbr = Fmedian, probshift_init = PiH0)"
"0","  ParamVec <- FullFit$ParamVec"
"0","  iAI_res$PiFitH1[iAI_res$LocName == SNP] <- ParamVec[""probshift""]"
"0","  iAI_res$ThetaC[iAI_res$LocName == SNP] <- ParamVec[""theta_het_control""]; iAI_res$ThetaT[iAI_res$LocName == SNP] <- ParamVec[""theta_het_tumor""]"
"0","    "
"0","  "
"0","  # 4. Perform the Likelihood Ratio Test for iAI detection"
"0","  # Likelihood of fit with all parameters shared:"
"0","  LikTot <- MAGE::pmf_eqtl_BetaBinom(CurDF[CurDF$Outlier==0,]$ref_count, CurDF[CurDF$Outlier==0,]$var_count, probshift = PiH0, SEmedian, "
"0","                                       rho_rr, rho_vv, rho_rv, theta_hom = ThetaHomH0, theta_het = ThetaHetH0)"
"0","  # Likelihood of fit with separate theta_het (calculated in two steps because of the different theta)"
"0","  LikC <- MAGE::pmf_eqtl_BetaBinom(C_DF[C_DF$Outlier==0,]$ref_count, C_DF[C_DF$Outlier==0,]$var_count, probshift = ParamVec[""probshift""], SEmedian, "
"0","                                   ParamVec[""pr""], ParamVec[""pv""], ParamVec[""prv""], theta_hom = ParamVec[""theta_hom""], theta_het = ParamVec[""theta_het_control""])"
"0","  LikT <- MAGE::pmf_eqtl_BetaBinom(T_DF[T_DF$Outlier==0,]$ref_count, T_DF[T_DF$Outlier==0,]$var_count, probshift = ParamVec[""probshift""], SEmedian, "
"0","                                   ParamVec[""pr""], ParamVec[""pv""], ParamVec[""prv""], theta_hom = ParamVec[""theta_hom""], theta_het = ParamVec[""theta_het_tumor""])"
"0","  lrtstat <- -2 * (sum(log(LikTot)) - sum(log(c(LikC, LikT))))"
"0","  LRTpval <- pchisq(lrtstat, df = 1, lower.tail = F)"
"0","  iAI_res$LRTpval[iAI_res$LocName == SNP] <- LRTpval"
"0","  "
"0","  "
"0","  # 5. Fill out the results dataframe"
"0","  iAI_res$QualityC[iAI_res$LocName == SNP] <- OUTfitC$quality; iAI_res$QualityT[iAI_res$LocName == SNP] <- OUTfitT$quality # spot bad quality data"
"0","  # Test HWE on both the control and tumor data:"
"0","  HWEtest_C <- MAGE::HWE_chisquared_small(Fmedian = Fmedian, OUTfitC_DH); iAI_res$HWEC[iAI_res$LocName == SNP] <- HWEtest_C$PVAL"
"0","  HWEtest_T <- MAGE::HWE_chisquared_small(Fmedian = Fmedian, OUTfitT_DH); iAI_res$HWET[iAI_res$LocName == SNP] <- HWEtest_T$PVAL"
"0","  # Mean and median coverages:"
"0","  iAI_res$CovC_mean[iAI_res$LocName == SNP] <- mean(C_DF[C_DF$Outlier==0,]$ref_count + C_DF[C_DF$Outlier==0,]$var_count)"
"0","  iAI_res$CovT_mean[iAI_res$LocName == SNP] <- mean(T_DF[T_DF$Outlier==0,]$ref_count + T_DF[T_DF$Outlier==0,]$var_count)"
"0","  iAI_res$CovC_med[iAI_res$LocName == SNP] <- median(C_DF[C_DF$Outlier==0,]$ref_count + C_DF[C_DF$Outlier==0,]$var_count)"
"0","  iAI_res$CovT_med[iAI_res$LocName == SNP] <- median(T_DF[T_DF$Outlier==0,]$ref_count + T_DF[T_DF$Outlier==0,]$var_count)"
"0","  iAI_res$pr[iAI_res$LocName == SNP] <- ParamVec[""pr""]; iAI_res$prv[iAI_res$LocName == SNP] <- ParamVec[""prv""]; iAI_res$pv[iAI_res$LocName == SNP] <- ParamVec[""pv""]"
"0","  iAI_res$ThetaHom[iAI_res$LocName == SNP] <- ParamVec[""theta_hom""]"
"0","}"
"0",""
"0","iAI_res$RhoH0 <- 1/((1/iAI_res$ThetaH0)+1)"
"0","iAI_res$RhoC <- 1/((1/iAI_res$ThetaC)+1)"
"0","iAI_res$RhoT <- 1/((1/iAI_res$ThetaT)+1)"
"0","  "
