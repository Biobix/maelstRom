% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{logSums_MaxMethodSigned_CPP}
\alias{logSums_MaxMethodSigned_CPP}
\title{Returns an (approximate) log of a sum based on individual logs of the terms being summed, but can include negative terms (see further)}
\usage{
logSums_MaxMethodSigned_CPP(logvec, signvec)
}
\arguments{
\item{logvec}{Numeric vector. separate log values, of which we want to calculate the log of the sum of their (non-log) values}

\item{signvec}{Numeric vector. separate signs of the values being summed/subtracted (as +1 or -1), as their log-values provided in logvec can,
of course, not contain this information.}
}
\value{
The log of the sum of the values for which the separate logs were supplied as input.
}
\description{
\code{logSums_MaxMethod_CPP} is an internal C++ implementation of logSum_MaxMethod, and
calculates the (approximate) log of a sum of terms, based on the individual logs of these terms.
Simply taking the exponent of these individual terms, then summing them, then taking the log again, is usually not possible if taking the exponent of the
supplied values results in a numeric overflow. The rationale here is:
}
\details{
log(x + y + z) =(suppose x is the MAXIMUM amongst {x,y,z}) log(((x+y+z)/x) * x) = log(x) + log((x+y+z)/x) = log(x) + log(x/x + y/x + z/x) =
log(x) + log(exp(log(x/x)) + exp(log(y/x)) + exp(log(z/x))) = log(x) + log(exp(log(x)-log(x)) + exp(log(y)-log(x)) + exp(log(z)-log(x)))

Now, log(x)-log(x) cancels out, and the remaining (log(y)-log(x)) and (log(z)-log(x)) are negative (x is the maximum amontst {x,y,z}) meaning that,
worst case scenario, x is that much larger than y and z that these terms are high and negative, resulting in a calculated exp-value of zero;
this isn't too bad though, as the first term (log(x)) is still there, and if x is so much higher than the other terms, then the log of sums will be
mainly dictated by x anyway (when remaining on R's default numerical precision, and given a limited number of terms being summed; once again, this value is approximate).

In this implementation, negative terms are actually allowed, but the sign of terms should be supplied as a separate input "signvec"
If negative, a term's separate contribution to the final big log-term in the formula above (e.g. exp(log(y)-log(x)) for term y)
is subtracted instead of added. This is okay as long as the final result of which the log is eventually taken still ends up being positive.
Accordingly, this method should only be used if this is actually expected.
For example, this function is used by maelstRom's implementation for calculating the probability distrubution of a sum
of two completely correlated beta-binomials using the  Newton-Cotes numerical integration method,
for which we expect positive outcomes for maelstRom's applications (integration of probability distributions).
}
