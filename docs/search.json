[{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_Allelic_Dispersion_tutorial.html","id":"maelstrom-modeller-of-allele-specific-transcriptomics","dir":"Articles","previous_headings":"","what":"maelstRom: Modeller of Allele-Specific Transcriptomics","title":"maelstRom Allelic Dispersion tutorial","text":"Welcome tutorial vignette Modeller Allele-Specific Transcriptomics, maelstRom! R package offers extensive likelihood-based modelling Allele-Specific Expression (ASE) phenomena, includes statistical tests detection (e.g. genome-wide cis-eqtl mapping) differential occurrence (e.g. copy-number alterations /hypermethylated loci diseases cancer). functionalities rely solely regular RNAseq data, without requirement additional experiments genotyping, specialized data-types paired RNAseq. vignette step--step guide basic ASE-analysis using maelstRom starting raw allelic counts, input pre-processing vizualization final results. instructions installing maelstRom, please consult maelstRom’s github home page https://biobix.github.io/maelstRom/.","code":""},{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_Allelic_Dispersion_tutorial.html","id":"a-toy-dataset","dir":"Articles","previous_headings":"","what":"A toy dataset","title":"maelstRom Allelic Dispersion tutorial","text":"maelstRom relies per-locus per-sample nucleotide counts (/T/C/G), relying single-nucleotide polymorphisms (SNPs) differentiate alleles. counts easily obtained RNAseq BAM SAM files, either custom scripting extisting functionalities SAMtool’s mpileup, GATK’s CollectAllelicCounts (https://gatk.broadinstitute.org/hc/en-us/articles/360037594071-CollectAllelicCounts); latter already filters nucleotide counts just one reference- variant-allele. toy data example input data included maelstRom, used throughout remainder vignette. toy data consists hypothetical control (healthy) case (diseased) dataset: toy data contains nucleotide counts spanning 200 SNP loci across 71 genes (gene can contain multiple SNP loci), covered 128 control- 268 case-samples: [1] 71 [1] 200 [1] 128 [1] 268","code":"library(maelstRom) #> Package 'maelstRom' version 1.1.11 data(\"maelstRom\", package = \"maelstRom\") knitr::kable(head(ControlCountsToy)) knitr::kable(head(CaseCountsToy)) length(unique(ControlCountsToy$Gene)) length(unique(ControlCountsToy$Locus)) length(unique(ControlCountsToy$Sample)) length(unique(CaseCountsToy$Sample))"},{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_Allelic_Dispersion_tutorial.html","id":"input-pre-processing","dir":"Articles","previous_headings":"","what":"Input pre-processing","title":"maelstRom Allelic Dispersion tutorial","text":"nucleotide counts formated one giant dataframe. order use maelstRom input, need split list seperate dataframes per locus, maelstRoms models ASE per-locus level. general, every maelstRom function help page detailing expected format input.","code":"# maelstRom expects lists: controlList <- list()  caseList <- list()  for(LOC in unique(ControlCountsToy$Locus)){                 # For every locus...   interDF <- ControlCountsToy[ControlCountsToy$Locus==LOC,] # extract nucleotide counts,   controlList[[LOC]] <- interDF                             # and put it into the list }  for(LOC in unique(CaseCountsToy$Locus)){                    # Do the same for case data   interDF <- CaseCountsToy[CaseCountsToy$Locus==LOC,]   caseList[[LOC]] <- interDF }"},{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_Allelic_Dispersion_tutorial.html","id":"determine-one-reference-and-one-variant-allele","dir":"Articles","previous_headings":"","what":"Determine one reference and one variant allele","title":"maelstRom Allelic Dispersion tutorial","text":"maelstRom’s models built beta-binomial distrubution. name implies, distribution models repeated observations binary outcome thus limited two possible alleles per locus. may seem overly restrictive, ’s rather commonplace SNPs human populations exhibit, , two commonly occurring SNP variants. case three even four SNP variants considered, pairwise maelstRom fits said variants option; beta-multinomial models, model possible variants , feature current version maelstRom due limited added value practical research comparative complexity implementation. standard_alleles() takes list per-locus dataframes input, picks - second-occurring nucleotide (population-level) reference- variant nucleotide respectively, adding resulting choice corresponding reference- variant-count individual dataframe. “ref_allele” column provided dataframes (case toy data), standard_alleles() consider nucleotides listed therein possible reference- variant candidates. can used e.g. integrate expert knowledge current population (known listed nucleotides occur certain location, anything else sort artefact), limit analyses certain alleles particular interest. standard_alleles() run seperately case data, makes sense (data-analytical biological viewpoint) pick reference- variant nucleotide control data:","code":"for(n in names(controlList)){   controlList[[n]] <- maelstRom::standard_alleles(controlList[[n]]) } knitr::kable(head(controlList[[\"Locus10\"]])) for(n in names(caseList)){      interDF <- caseList[[n]]   interDF$ref_alleles <- controlList[[n]]$ref_alleles[1]   interDF$ref <- controlList[[n]]$ref[1]   interDF$var <- controlList[[n]]$var[1]   interDF$ref_count <- interDF[,which(colnames(interDF)==interDF$ref[1])]   interDF$var_count <- interDF[,which(colnames(interDF)==interDF$var[1])]      caseList[[n]] <- interDF    }  knitr::kable(head(caseList[[\"Locus10\"]]))"},{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_Allelic_Dispersion_tutorial.html","id":"prior-filtering","dir":"Articles","previous_headings":"","what":"Prior filtering","title":"maelstRom Allelic Dispersion tutorial","text":"rudimentary prior filtering always worth considering, avoids wasting time trying fit models inherently low-quality data. maelstRom’s prior_filter() provides various filtering options (see help page; minimal median coverage across locus, minimal number samples, minimal minor allele count frequency .e. % abundance variant allele RNAseq counts, etc.). tutorial, use mild prior filter, simply requiring least 20 control samples locus retained. perform prior filtering case data , remove loci removed control-data, main use case-data differential ASE compared controls. 20-control-sample requirement removes 5 loci, corresponding two genes, toy dataset:","code":"for(n in names(controlList)){   controlList[[n]] <- maelstRom::prior_filter(controlList[[n]], min_median_cov = 0,      min_nr_samples = 20, checkref_filter = FALSE, prior_allelefreq_filter = FALSE,      min_PriorAlleleFreq = 0)   if(is.null(controlList[[n]])){     # Filter out case data if corresponding control data was removed:     caseList[[n]] <- NULL    } }  # These loci were filtered out: print(setdiff(unique(ControlCountsToy$Locus), names(controlList))) #> [1] \"Locus30\"  #> [2] \"Locus31\"  #> [3] \"Locus187\" #> [4] \"Locus188\" #> [5] \"Locus189\""},{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_Allelic_Dispersion_tutorial.html","id":"enabling-parallellization","dir":"Articles","previous_headings":"","what":"Enabling parallellization","title":"maelstRom Allelic Dispersion tutorial","text":"maelstRom can run quite time larger datasets (especially applied genome-wide), tutorial illustrates (optional) parallelization using R’s parallel package. package allows use multiple cores maelstRom’s computations, least Linux (e.g. local windows installation, allows one core). number cores NC kept 1 code , picking higher number allow proportionate speed-. following code chunk splits maelstRom’s input list NC elements, required parallelization using parallel package.","code":"NC <- 1 # Number of Cores, CHANGE THIS for a speed-up when working on a linux machine  NS <- length(controlList)  spl <- c(0, cumsum(rep(floor(NS/NC),NC)+c(rep(1,NS-floor(NS/NC)*NC),          rep(0,NC-NS+floor(NS/NC)*NC))))  ParCTRL <- vector(mode = \"list\", length=NC) for(i in 1:NC){ # Put the split input data into a list for parallellisation   ParCTRL[[i]] <- controlList[(spl[i]+1):(spl[i+1])] } ParCASE <- vector(mode = \"list\", length=NC) for(i in 1:NC){ # Put the split input data into a list for parallellisation   ParCASE[[i]] <- caseList[(spl[i]+1):(spl[i+1])] }"},{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_Allelic_Dispersion_tutorial.html","id":"metaparameter-estimation","dir":"Articles","previous_headings":"","what":"Metaparameter estimation","title":"maelstRom Allelic Dispersion tutorial","text":"maelstRom’s ASE models rely two population-wide (constant) metaparameters: inbreeding coefficient F population study, sequencing error rate SE controlling occurrence “faulty” nuceotide counts homozygous individuals (.e. counts allele homozygous). can well set values based expert knowledge (e.g. natural populations approcimately panmictic, .e. exhibit inbreeding coefficient zero) /used sequencing technogy’s alignment algorithm’s propensity report faulty nucleotides. Nevertheless, maelstRom functionality quickly robustly estimate parameters supplied data, can used abscence prior knowledge , even available, safe option anyway (sanity check, incorporate error sources data biases possibly overlooked -prior estimate). happens fitting following extremely basic binomial mixture model supplied control data: $$ \\small \\begin{aligned} \\mathrm{PMF}(counts_{ref}|counts_{total}) = &\\ \\phi_{rr} * {\\tt pbinom}(x=counts_{ref} \\ |\\ n=counts_{total}, p=1-SE) \\ + \\\\ &\\ \\phi_{rv} * {\\tt pbinom}(x=counts_{ref} \\ |\\ n=counts_{total}, p=0.5) \\ + \\\\ &\\ \\phi_{vv} * {\\tt pbinom}(x=counts_{ref} \\ |\\ n=counts_{total}, p=SE) \\\\ \\end{aligned} $$ (ϕrr,ϕrv,ϕvv)(\\phi_{rr}, \\phi_{rv}, \\phi_{vv}) --fitted genotype frequencies inbreeding coefficient can estimated, SE sequencing error rate estimate. model incorporate ASE (perfectly 50-50 allelic expression heterozygous peak, variance beyond technical binomial sampling variance allowed) sufficient produce robuts, median-based metaparameter estimates long fits large portion supplied data somewhat reasonably. following code chunk uses AllelicMeta_est_par() produce wanted estimates, check aforementioned “reasonable fit” includes control loci least 20 available samples, median coverage least 4 across samples, returning estimated SE 0.035 (unreasonably high likely indicates low-quality data failed model fit) estimated minor allele frequency least 0.15 based mixture model fit (anything lowes implies rather low occurrence least one possible genotypes, less reliable estimates population’s metaparameters): [1] 0.002481903 [2] 0.008728076 metaparameter estimates seem reasonable. Please note extremely low sequencing error metaparameter make fitting homozygous peaks later pipeline way strict, failing accomodate even single faulty read. , setting SE 0.002 recommended. inbreeding coefficient close zero sign panmictic population commonplace working human data, extreme specialized experimental setups.","code":"cl <- parallel::makeCluster(getOption(\"cl.cores\", NC)) GenoFinData <- parallel::parLapply(cl, X = ParCTRL, fun = maelstRom::AllelicMeta_est_par,   # Filter criteria mentioned in the text above:   MinAllele_filt = 0.15, SE_filt = 0.035, NumSamp_filt = 20, MedianCov_filt = 4) parallel::stopCluster(cl)  # Extract metaparameter estimates from the parallelly-produced output: SE_vec <- do.call(c, lapply(GenoFinData, `[[`, 2)) F_vec <- do.call(c, lapply(GenoFinData, `[[`, 3))  SEmedian <- median(SE_vec) Fmedian <- median(F_vec)  #estimates of resp. sequencing error rate and inbreeding coefficient: print(c(SEmedian, Fmedian))"},{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_Allelic_Dispersion_tutorial.html","id":"maelstroms-ase-fit-allelic-bias-detection","dir":"Articles","previous_headings":"","what":"maelstRom’s ASE fit & allelic bias detection","title":"maelstRom Allelic Dispersion tutorial","text":"maelstRom’s main functionality models allele-specific counts beta-binomial mixture three possible genotypes. allows Allelic Bias (AB), .e. unequal allelic expression heterozygotes, via π\\pi-parameter (beta-binomial mean); Allelic Dispersion (AD), .e. population-level variability allelic expression, via θhet\\theta_{het}-parameter (beta-binomial overdispersion): $$ \\small \\begin{aligned} \\mathrm{PMF}(counts_{ref}|counts_{total}) = &\\ \\phi_{rr} * {\\tt pBetaBinom}(x=counts_{ref} \\ |\\ n=counts_{total}, \\pi=1-SE, \\theta=\\theta_{hom}) \\ + \\\\ &\\ \\phi_{rv} * {\\tt pBetaBinom}(x=counts_{ref} \\ |\\ n=counts_{total}, \\pi=\\pi_{het}, \\theta=\\theta_{het}) \\ + \\\\ &\\ \\phi_{vv} * {\\tt pBetaBinom}(x=counts_{ref} \\ |\\ n=counts_{total}, \\pi=SE, \\theta=\\theta_{hom}) \\\\ \\end{aligned} $$ remaining parameters : (ϕrr,ϕrv,ϕvv)(\\phi_{rr}, \\phi_{rv}, \\phi_{vv}) fitted genotype frequencies, θhom\\theta_{hom} beta-binomial overdispersion parameter homozygotes. fitting former expectation-maximization, iteratively assigns sample three possible genotypes, estimates genotype-specific beta-binomial parameters, maelstRom require additional genotyping-data. code chunk uses EMfit_betabinom_robust function fit mixture model, writes results ASEfit_res. Additionally, uses previously calculated inbreeding coefficient Fmedian test every locus significant deviation Hardy-Weinberg Equilibrium (HWE), indicate failed model fit can thus used goodness--fit filter criterion later: ASEfit_res contains per-locus parameters beta-binomial mixture model discussed . Also, besides just mentioned results chi square test deviation HWE, contains additional quality metrics can used filtering results, locus’ reference allele frequency among genotypes population (allele.frequency), median count coverage (coverage), number samples involved fit (nr_samples) lastly, quality flag equals “!” case maelstRom’s fit fails particular locus, usually due apparent heterozygotes present (quality). Finally, AB_pval contains result (raw p-value) likelihood ratio test whether πhet\\pi_{het} significantly different 0.5, thus detecting whether ’s Allelic Bias (AB) expression given locus. addition dataframe per-locus fitting results, per-locus allelic count data controlList updated include, every sample, Expectation-Maximization-assigned likelihood originating reference homozygous, heterozygous, variant homozygous individual (prr, prv, pvv), listing likely options “genotypeN” column. can now list loci showcasing significant AB (.e. deviation πhet=0.5\\pi_{het} = 0.5), statistically (5% FDR level) terms effect size (deviation 0.5 least 0.1). code chunk also includes basic quality filter criteria (median counts coverage least 10 across least 20 expected heterozygotes actually fit AB ; latter calculated number samples times fraction heterozygotes ϕrv\\phi_{rv}). Furthermore, ensure good model fit, require problems regarding quality flag (.e. equal “!”), detected AB ’s extreme 0.9 0.1, HWE-deviation-checking p-value least 0.001 (filter criterion often used check HWE conformity: Sha Zhang (2011), Teo et al. (2007), Rohlfs Weir (2008)); last three criteria met indicates possibly faulty model fit. final, optional, filter, throwing loci either πhet/θhet<=1\\pi_{het}/\\theta_{het} <= 1 (1−πhet)/θhet<=1(1-\\pi_{het})/\\theta_{het} <= 1, inequalities met leads stange behavior beta-binomial distribution (either getting mode stuck 0 1 , inequalities true, becoming bimodal). case usually suggests failed model fit well (illustration, try plot Locus172’s fit - normally removed final filter - using plotting function next code chunk code chunk ). [1] “Locus4, Locus6, Locus10, Locus45, Locus73, Locus84, Locus104, Locus114” maelstRom’s maelstRom_EMfitplot() allows us plot previously obtained beta-binomial mixture model fits, together allele fraction histogram depicting actual data ’s fit. addition --plotted data parameters, function requires two additional inputs. “nbins”: number bins histogram observed per-sample (reference) allele fractions “ScaleCount”: beta-binomial distribution discrete probability distribution contains parameter total number observations, nn. distributions plotted lineplots maelstRom_EMfitplot() beta-binomials, x-axis range rescaled 0--nn 0--1. However, even rescaled, shape (variance) distribution still depends underlying nn-parameter used, thus asked input argument, ScaleCount. order closely fit underlying histogram observed data, code chunk uses locus’ median coverage ScaleCount. maelstRom_EMfitplot() accepts lot optional arguments plotting functionalities customization. Additionally, returns plot ggplot object, can freely customized even .  Besides previously established statistical evidence, plot makes visually clear Locus104’s heterozygotes biased towards allelic expression reference allele.","code":"ASEfitter <- function(data){      positions <- names(data)   results <- data.frame()      for (z in positions) {     maelstRomres <- maelstRom::EMfit_betabinom_robust(data_counts = data[[z]],                                              SE = SEmedian, inbr = Fmedian)          data[[z]] <- maelstRomres$data_hash          res_loc <- data.frame(\"Gene\" = data[[z]]$Gene[1] ,\"Locus\" = z,        \"reference\" = data[[z]]$ref[1], \"variant\" = data[[z]]$var[1],        \"phi_rr\" = maelstRomres$rho_rr, \"phi_rv\" = maelstRomres$rho_rv,        \"phi_vv\" = maelstRomres$rho_vv, \"pi\" = as.numeric(maelstRomres$AB),        \"AB_pval\" = as.numeric(maelstRomres$AB_p), \"theta_hom\" = maelstRomres$theta_hom,        \"theta_het\" = maelstRomres$theta_het, \"allele.frequency\" = data[[z]]$allelefreq[1],        \"coverage\" =  median(data[[z]]$ref_count+data[[z]]$var_count),       \"nr_samples\" = nrow(data[[z]]),        \"quality\" = maelstRomres$quality,       stringsAsFactors = FALSE)          results <- rbind(results, res_loc) # results; one position per line   }      results <- maelstRom::HWE_chisquared(data = data, Fmedian, results = results)   results$HWEpval[is.na(results$HWEpval)] <- -1   results$HWE_TestStat[is.na(results$HWE_TestStat)] <- -1   return(list(data, results))    }  cl <- parallel::makeCluster(getOption(\"cl.cores\", NC)) parallel::clusterExport(cl, c(\"Fmedian\", \"SEmedian\")) ASEfit <- parallel::parLapply(cl, X = ParCTRL, fun = ASEfitter) parallel::stopCluster(cl)  ParCTRL <- lapply(ASEfit, `[[`, 1) controlList <- do.call(c, lapply(ASEfit, `[[`, 1)) ASEfit_res <- do.call(\"rbind\", lapply(ASEfit, `[[`, 2)) knitr::kable(head(ASEfit_res)) knitr::kable(head(controlList[[\"Locus27\"]][,c(\"Sample\", \"ref\", \"var\", \"ref_count\", \"var_count\",                                             \"prr\", \"prv\", \"pvv\", \"genotypeN\")])) # Statistical evidence for significant AB at the 5% FDR level, # only retaining reliable (high-quality) loci with a large enough effect size: print(paste(ASEfit_res$Locus[      p.adjust(ASEfit_res$AB_pval, method = \"BH\") < 0.05 &   (abs(ASEfit_res$pi - 0.5) > 0.1) &    ASEfit_res$coverage >= 10 &    ASEfit_res$nr_samples * ASEfit_res$phi_rv >= 20  &      ASEfit_res$quality != \"!\" &   (ASEfit_res$pi < 0.9 &  ASEfit_res$pi > 0.1) &    ASEfit_res$HWEpval >= 0.001 &   ASEfit_res$pi/ASEfit_res$theta_het > 1 &   (1-ASEfit_res$pi)/ASEfit_res$theta_het > 1],       collapse = \", \")) PlotData <- controlList[[\"Locus104\"]] PlotData_eqtl <- ASEfit_res[ASEfit_res$Locus==\"Locus104\",]  loc_plot <- maelstRom::maelstRom_EMfitplot(ref_counts=PlotData$ref_count,    var_counts=PlotData$var_count, pr=PlotData_eqtl$phi_rr, prv=PlotData_eqtl$phi_rv,   pv=PlotData_eqtl$phi_vv, theta_hom=PlotData_eqtl$theta_hom,    theta_het=PlotData_eqtl$theta_het, probshift=as.numeric(PlotData_eqtl$pi),    SE=SEmedian, ScaleCount = PlotData_eqtl$coverage, nbins = 30)  loc_plot"},{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_Allelic_Dispersion_tutorial.html","id":"differential-allelic-dispersion","dir":"Articles","previous_headings":"","what":"Differential allelic dispersion","title":"maelstRom Allelic Dispersion tutorial","text":"maelstRom hypothesizes early (potentially causal) case-specific dysregulation events copy number alterations, aberrant hypermethylation, gene silencing (incomplete silencing; either inherent mechanism, /seemingly observed incomplete due e.g. tumor impurity allelic count data) can cause allelic expression bias within one individual , population-level, consistently favor allele. Thus, rather causing allelic bias (AB), dysregulation result increased variance allelic expression; call variance Allelic Dispersion (AD), increase e.g. disease cancer differential Allelic Dispersion (dAD). Detecting dAD two populations can done via likelihood ratio test, comparing: (1) model fitting data, control case, one beta-binomial mixture model, (2) model allowing control- case data separate θhet\\theta_{het} parameters. done dAD_analysis() function , internally performs number fits: fit control (OnlyC) case (OnlyT) data separately outlier detection. joint fit control case data sharing parameters across populations (H0, null hypothesis dAD-test) fit using separate θhet\\theta_{het} parameter controls cases Besides final interesting fit, dAD_res object contains parameter estimations three fits (OnlyC, OnlyT, H0), alongside selection quality metrics p-value testing deviation HWE controls cases (“HWEC”, “HWET”) can used filter critaria. code chunk prints interesting results: actual dAD-detecting pval along effect size (θhet\\theta_{het} cases controls) relevant filter critaria controls (number estimated heterozygotes, median coverage, HWE-deviation-testing p-value): RhoC RhoT simple rescalings ThetaHetC ThetaHetT respectively: ρ=1(1/θ)+1 \\rho = \\frac{1}{(1/\\theta)+1}  ranges 0 1 instead θ\\theta’s 0 infinity, thus suitable visualization purposes. code updated inputs controlList caseList include column marking outliers well, can come handy future analyses. Significant dAD loci increased θhet\\theta_{het} cases, passing basic filter criteria, can now selected: [1] “Locus3, Locus18, Locus19, Locus20, Locus69, Locus72, Locus74, Locus75, Locus116, Locus117, Locus118, Locus138, Locus141, Locus142, Locus143, Locus147, Locus148, Locus149, Locus154, Locus159, Locus160, Locus161, Locus164, Locus165, Locus170” , maelstRom_EMfitplot can used visualize control-case AD difference loci:","code":"ParTOT <- vector(mode = \"list\", length=NC) for(i in 1:NC){ # Put the splitted input data into a list for parallellisation   ParTOT[[i]] <- list(ParCTRL[[i]], ParCASE[[i]]) }  cl <- parallel::makeCluster(getOption(\"cl.cores\", NC)) dADFinData <- parallel::parLapply(cl, X = ParTOT, fun = maelstRom::dAD_analysis,                                    SE = SEmedian, inbr = Fmedian) parallel::stopCluster(cl)  dAD_res <- do.call(\"rbind\", lapply(dADFinData, `[[`, 1))    controlList <- do.call(c, lapply(dADFinData , `[[`, 2)) caseList <- do.call(c, lapply(dADFinData, `[[`, 3))  knitr::kable(head(dAD_res[,c(\"Locus\", \"Gene\", \"dAD_pval\", \"ThetaHetC\", \"ThetaHetT\",                               \"RhoC\", \"RhoT\", \"NumHetC\", \"CovC_Med\", \"HWEC\")])) print(paste(dAD_res$Locus[   p.adjust(dAD_res$dAD_pval, method = \"BH\") < 0.001 & #Significant at 0.1% FDR     dAD_res$RhoT > dAD_res$RhoC & #Increased AD in cases     #Median coverage of at least 10 in both cases and controls:     dAD_res$CovC_Med >= 10 & dAD_res$CovT_Med >= 10 &      #Number of heterozygotes and HWE-conformity are only checked in controls,     #as case-data can be rather erratic, e.g. due to tumorigenesis     dAD_res$NumHetC >= 15 & dAD_res$HWEC >= 0.001   ], collapse = \", \")) CTRL_DF <- controlList[[\"Locus19\"]] CASE_DF <- caseList[[\"Locus19\"]] PlotData_dAD <- dAD_res[dAD_res$Locus==\"Locus19\",]  dAD_plot1 <- maelstRom::maelstRom_EMfitplot(ref_counts=CTRL_DF$ref_count, var_counts=CTRL_DF$var_count,   pr=PlotData_dAD$phi_rr, prv=PlotData_dAD$phi_rv, pv=PlotData_dAD$phi_vv,    theta_hom = PlotData_dAD$ThetaHom, theta_het = PlotData_dAD$ThetaHetC,    probshift = PlotData_dAD$Pi, SE=SEmedian, ScaleCount = PlotData_dAD$CovC_Med, nbins = 30)  dAD_plot2 <- maelstRom::maelstRom_EMfitplot(ref_counts=CASE_DF$ref_count, var_counts=CASE_DF$var_count,   pr=PlotData_dAD$phi_rr, prv=PlotData_dAD$phi_rv, pv=PlotData_dAD$phi_vv,    theta_hom = PlotData_dAD$ThetaHom, theta_het = PlotData_dAD$ThetaHetT,    probshift = PlotData_dAD$Pi, SE=SEmedian, ScaleCount = PlotData_dAD$CovT_Med, nbins = 30)  gridExtra::grid.arrange(dAD_plot1, dAD_plot2, ncol=2)"},{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_Allelic_Dispersion_tutorial.html","id":"combining-locus-level-results-to-gene-level-results-","dir":"Articles","previous_headings":"","what":"Combining locus-level results to gene-level results.","title":"maelstRom Allelic Dispersion tutorial","text":"locus-level results can informative , - biological interpretation - easier results (θ\\theta ρ\\rho values, p-values) gene-level. Post-hoc p-value combination (without directly modelling counts transcript- gene-level) especially tricky: well-established Fisher combination method valid combining independent tests (independency hard argue SNPs close enough count data originate RNA molecule RNAseq read) combination methods like Cauchy combination (Liu Xie (2020)) behave like generalized mean - sense resulting p-value never lower minimal supplied p-value , , unable combine statistical evidence two tests even significant p-value. end, maelstRom implements correlation-corrected Lancaster p-value combination (Lancaster combination , , weighted version Fischer combination), published Dai, Leeder, Cui (2014), optimized implementation Score test (instead likelihood ratio test) sample-label-permutation-based correlation calculation (avoids iterative re-fitting maelstRom’s beta-binomial mixture model, score test relies solely H0 model fit, constant across sample-label permutations). previously mentioned (combined) p-values (Fisher, Cauchy, Lancaster, correlation-corrected Lancaster) calculated code chunk , maelstRom’s AdvancedPvalcomb function , besides sequencing error SE, also takes number permutations use correlation-correction nperm input; higher number, longer code runs. Dai, Leeder, Cui (2014) uses 1000 permutations publication : number genes highly correlated SNP-level allelic counts (suggesting said SNP located close proximity eachother genome (processed) transcripts RNAseq data generated), correlation-corrected Lancaster p-value greatly reduced compared (non-corrected) Lancaster p-value: genes, however, consist independent SNP-level data (notice relatively small change): Next per-gene correlation-corrected Lancaster p-value, can add averages per-SNP ρcontrol\\rho_{control}s ρcase\\rho_{case}s (weighted averages, according SNP’s mediancoverage×estimatednumberofheterozygotes\\sqrt{median\\ coverage \\times estimated\\ number\\ \\ heterozygotes} controls cases respectively), well (weighted averages ) quality metrics: Using similar criteria SNP-level results, can now filter genes showing significant dAD:","code":"# Split results across cores for parallellization in a gene-wise manner goi <- unique(dAD_res$Gene) NS <- length(goi) spl <- c(0, cumsum(rep(floor(NS/NC),NC)+c(rep(1,NS-floor(NS/NC)*NC),               rep(0,NC-NS+floor(NS/NC)*NC)))) # Helps in splitting input data inputlist <- vector(mode = \"list\", length=NC)  for(j in 1:NC){ # Put the splitted input data into a list for parallellisation   GenesNow <- goi[(spl[j]+1):(spl[j+1])]   ResDF_OIs <- ControlOIs <- CaseOIs <- vector(mode = \"list\", length = length(GenesNow))   for(k in 1:length(GenesNow)){     ResDF_OIs[[k]] <- dAD_res[dAD_res$Gene == GenesNow[k],]     LocsOI <- ResDF_OIs[[k]]$Locus     ControlOIs[[k]] <- (controlList)[LocsOI]     CaseOIs[[k]] <- (caseList)[LocsOI]   }   inputlist[[j]] <- list(GenesNow, ResDF_OIs, ControlOIs, CaseOIs) }  # Call the AdvancedPvalcomb function cl <- parallel::makeCluster(getOption(\"cl.cores\", NC)) AdvPVALs <- parallel::parLapply(cl, X = inputlist, fun = maelstRom::AdvancedPvalcomb, SE = SEmedian, nperm = 1000) parallel::stopCluster(cl)  # Extract gene-level p-values FisherPVAL_vec <- LancasterPVAL_vec <-  CorLancasterPVAL_vec <-  CauchyPVAL_vec <- c() for(ii in 1:NC){   FisherPVAL_vec <- c(FisherPVAL_vec, AdvPVALs[[ii]][[1]])   LancasterPVAL_vec <- c(LancasterPVAL_vec, AdvPVALs[[ii]][[2]])    CorLancasterPVAL_vec <- c(CorLancasterPVAL_vec, AdvPVALs[[ii]][[3]])   CauchyPVAL_vec <- c(CauchyPVAL_vec, AdvPVALs[[ii]][[4]]) } print(LancasterPVAL_vec[c(23, 40, 51)]) #> [1] 3.670732e-12 #> [2] 3.221818e-41 #> [3] 1.425505e-28 print(CorLancasterPVAL_vec[c(23, 40, 51)]) #> [1] 8.583444e-07 #> [2] 3.265210e-20 #> [3] 4.364865e-12 print(LancasterPVAL_vec[1:5]) #> [1] 2.636243e-09 #> [2] 5.173449e-01 #> [3] 4.123792e-06 #> [4] 7.395193e-04 #> [5] 8.312901e-01 print(CorLancasterPVAL_vec[1:5]) #> [1] 1.380708e-08 #> [2] 5.167750e-01 #> [3] 6.453343e-06 #> [4] 7.395193e-04 #> [5] 8.250935e-01 dAD_res_Gene <- data.frame(Gene=goi, Nr_SNPs=rep(NA,length(goi)),    Mean_RhoC=rep(NA,length(goi)), Mean_RhoT=rep(NA,length(goi)), CorLancasterPVAL = CorLancasterPVAL_vec,    Mean_NumHetC=rep(NA,length(goi)), Mean_NumHetT=rep(NA,length(goi)), Mean_CovC_Med=rep(NA,length(goi)), Mean_CovT_Med=rep(NA,length(goi)),    stringsAsFactors = F)       for(Gene in goi){      dAD_res_Gene$Nr_SNPs[dAD_res_Gene$Gene == Gene] <- sum(dAD_res$Gene == Gene)    CovC_Meds <- dAD_res$CovC_Med[dAD_res$Gene == Gene]   CovT_Meds <- dAD_res$CovT_Med[dAD_res$Gene == Gene]   NumHetCs <- dAD_res$NumHetC[dAD_res$Gene == Gene]   NumHetTs <- dAD_res$NumHetT[dAD_res$Gene == Gene]   Cweights <- Tweights <- c()   for(i in 1:length(CovC_Meds)){     Cweights <- c(Cweights, sqrt(CovC_Meds[i]*NumHetCs[i]))     Tweights <- c(Tweights, sqrt(CovT_Meds[i]*NumHetTs[i]))   }      dAD_res_Gene$Mean_NumHetC[dAD_res_Gene$Gene == Gene] <- maelstRom::combine_p_gene(NumHetCs, weights = sqrt(CovC_Meds), method = \"arithmetic\")   dAD_res_Gene$Mean_NumHetT[dAD_res_Gene$Gene == Gene] <- maelstRom::combine_p_gene(NumHetTs, weights = sqrt(CovT_Meds), method = \"arithmetic\")   dAD_res_Gene$Mean_CovC_Med[dAD_res_Gene$Gene == Gene] <- maelstRom::combine_p_gene(CovC_Meds, weights = sqrt(NumHetCs), method = \"arithmetic\")   dAD_res_Gene$Mean_CovT_Med[dAD_res_Gene$Gene == Gene] <- maelstRom::combine_p_gene(CovT_Meds, weights = sqrt(NumHetTs), method = \"arithmetic\")   dAD_res_Gene$Mean_RhoC[dAD_res_Gene$Gene == Gene] <- maelstRom::combine_p_gene(dAD_res$RhoC[dAD_res$Gene == Gene],                                                                               weights = Cweights, method = \"arithmetic\")   dAD_res_Gene$Mean_RhoT[dAD_res_Gene$Gene == Gene] <- maelstRom::combine_p_gene(dAD_res$RhoT[dAD_res$Gene == Gene],                                                                               weights = Tweights, method = \"arithmetic\") }  knitr::kable(head(dAD_res_Gene)) print(paste(dAD_res_Gene$Gene[   p.adjust(dAD_res_Gene$CorLancasterPVAL, method = \"BH\") < 0.001 & #Significant at 0.1% FDR     dAD_res_Gene$Mean_RhoT > dAD_res_Gene$Mean_RhoC & #Increased AD in cases     dAD_res_Gene$Mean_CovC_Med >= 10 & dAD_res_Gene$Mean_CovT_Med >= 10 &      dAD_res_Gene$Mean_NumHetC >= 15   ], collapse = \", \")) #> [1] \"Gene1, Gene3, Gene7, Gene24, Gene25, Gene26, Gene34, Gene41, Gene49, Gene50, Gene52, Gene56, Gene58, Gene60\" GeneToPlot <- \"Gene7\" LocsToPlot <- dAD_res$Locus[dAD_res$Gene==GeneToPlot]  PlotList <- list() t <- 0  for(LTP in LocsToPlot){   t <- t+1   CTRL_DF <- controlList[[LTP]]   CASE_DF <- caseList[[LTP]]   PlotData_dAD <- dAD_res[dAD_res$Locus==LTP,]      PlotList[[t]] <- maelstRom::maelstRom_EMfitplot(ref_counts=CTRL_DF$ref_count, var_counts=CTRL_DF$var_count,   pr=PlotData_dAD$phi_rr, prv=PlotData_dAD$phi_rv, pv=PlotData_dAD$phi_vv,    theta_hom = PlotData_dAD$ThetaHom, theta_het = PlotData_dAD$ThetaHetC,    probshift = PlotData_dAD$Pi, SE=SEmedian, ScaleCount = PlotData_dAD$CovC_Med, nbins = 30)      t <- t+1   PlotList[[t]] <- maelstRom::maelstRom_EMfitplot(ref_counts=CASE_DF$ref_count, var_counts=CASE_DF$var_count,   pr=PlotData_dAD$phi_rr, prv=PlotData_dAD$phi_rv, pv=PlotData_dAD$phi_vv,    theta_hom = PlotData_dAD$ThetaHom, theta_het = PlotData_dAD$ThetaHetT,    probshift = PlotData_dAD$Pi, SE=SEmedian, ScaleCount = PlotData_dAD$CovT_Med, nbins = 30) }  gridExtra::grid.arrange(grobs = PlotList, ncol=2)"},{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_Allelic_Dispersion_tutorial.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"maelstRom Allelic Dispersion tutorial","text":"","code":"sessionInfo() #> R version 4.3.3 (2024-02-29 ucrt) #> Platform: x86_64-w64-mingw32/x64 (64-bit) #> Running under: Windows 10 x64 (build 19045) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=Dutch_Belgium.utf8  #> [2] LC_CTYPE=Dutch_Belgium.utf8    #> [3] LC_MONETARY=Dutch_Belgium.utf8 #> [4] LC_NUMERIC=C                   #> [5] LC_TIME=Dutch_Belgium.utf8     #>  #> time zone: Europe/Brussels #> tzcode source: internal #>  #> attached base packages: #> [1] stats     #> [2] graphics  #> [3] grDevices #> [4] utils     #> [5] datasets  #> [6] methods   #> [7] base      #>  #> other attached packages: #> [1] maelstRom_1.1.11 #>  #> loaded via a namespace (and not attached): #>  [1] gmp_0.7-5           #>  [2] sass_0.4.9          #>  [3] utf8_1.2.4          #>  [4] generics_0.1.3      #>  [5] gtools_3.9.5        #>  [6] stringi_1.8.3       #>  [7] lattice_0.22-5      #>  [8] digest_0.6.35       #>  [9] magrittr_2.0.3      #> [10] evaluate_0.24.0     #> [11] grid_4.3.3          #> [12] fastmap_1.2.0       #> [13] jsonlite_1.8.8      #> [14] ggnewscale_0.5.0    #> [15] gridExtra_2.3       #> [16] fansi_1.0.6         #> [17] scales_1.3.0        #> [18] numDeriv_2016.8-1.1 #> [19] textshaping_0.4.0   #> [20] jquerylib_0.1.4     #> [21] Rdpack_2.6.1        #> [22] cli_3.6.2           #> [23] rlang_1.1.3         #> [24] rbibutils_2.2.16    #> [25] munsell_0.5.1       #> [26] withr_3.0.0         #> [27] MAGE_1.0.0.18       #> [28] cachem_1.1.0        #> [29] yaml_2.3.9          #> [30] tools_4.3.3         #> [31] parallel_4.3.3      #> [32] dplyr_1.1.4         #> [33] colorspace_2.1-0    #> [34] ggplot2_3.5.1       #> [35] hash_2.2.6.3        #> [36] vctrs_0.6.5         #> [37] R6_2.5.1            #> [38] zoo_1.8-12          #> [39] lifecycle_1.0.4     #> [40] stringr_1.5.1       #> [41] fs_1.6.4            #> [42] htmlwidgets_1.6.4   #> [43] MASS_7.3-60.0.1     #> [44] ragg_1.3.2          #> [45] pkgconfig_2.0.3     #> [46] desc_1.4.3          #> [47] pkgdown_2.1.0       #> [48] pillar_1.9.0        #> [49] bslib_0.7.0         #> [50] gtable_0.3.5        #> [51] data.table_1.16.0   #> [52] glue_1.7.0          #> [53] Rcpp_1.0.12         #> [54] systemfonts_1.1.0   #> [55] highr_0.11          #> [56] xfun_0.45           #> [57] tibble_3.2.1        #> [58] tidyselect_1.2.1    #> [59] rstudioapi_0.16.0   #> [60] knitr_1.48          #> [61] farver_2.1.2        #> [62] htmltools_0.5.8     #> [63] patchwork_1.2.0     #> [64] labeling_0.4.3      #> [65] rmarkdown_2.27      #> [66] compiler_4.3.3      #> [67] alabama_2023.1.0"},{"path":[]},{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_imprinting_tutorial.html","id":"maelstrom-for-imprinting-analyses","dir":"Articles","previous_headings":"","what":"maelstRom for imprinting analyses","title":"maelstRom imprinting tutorial","text":"maelstRom includes functionalities detection (differential) imprinting, previously published lab (Goovaerts et al. (2018)). extreme form allele-specific expression (ASE) requires seperate robust analysis pipeline, maelstRom’s beta-binomial mixture models (introduced “maelstRom Allelic Dispersion tutorial”) rely occurrence observeable heterozygosity RNAseq data study ASE. latter absent fully imprinted loci, results e.g. numerical failure maelstRom’s beta-binomial mixture model fit, otherwise categorization low-quality locus. vignette covers analysis pipeline retaining loci quantifying degree (differential) imprinting.","code":""},{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_imprinting_tutorial.html","id":"a-toy-dataset","dir":"Articles","previous_headings":"","what":"A toy dataset","title":"maelstRom imprinting tutorial","text":"vignette utilizes toy dataset “maelstRom Allelic Dispersion tutorial”. , code chunk re-runs code found including “Enabling parallellization”; please consult tutorial -depth explanation input data collection pre-processing.","code":"data(\"maelstRom\", package = \"maelstRom\")  # maelstRom expects lists: controlList <- list()  caseList <- list()  for(LOC in unique(ControlCountsToy$Locus)){                 # For every locus...   interDF <- ControlCountsToy[ControlCountsToy$Locus==LOC,] # extract nucleotide counts,   controlList[[LOC]] <- interDF                             # and put it into the list }  for(LOC in unique(CaseCountsToy$Locus)){                    # Do the same for case data   interDF <- CaseCountsToy[CaseCountsToy$Locus==LOC,]   caseList[[LOC]] <- interDF }  for(n in names(controlList)){   controlList[[n]] <- maelstRom::standard_alleles(controlList[[n]]) }  #> Warning: #> replacing #> previous import #> 'data.table::yearmon' #> by #> 'zoo::yearmon' #> when loading #> 'maelstRom' #> Warning: #> replacing #> previous import #> 'data.table::yearqtr' #> by #> 'zoo::yearqtr' #> when loading #> 'maelstRom'  for(n in names(caseList)){      interDF <- caseList[[n]]   interDF$ref_alleles <- controlList[[n]]$ref_alleles[1]   interDF$ref <- controlList[[n]]$ref[1]   interDF$var <- controlList[[n]]$var[1]   interDF$ref_count <- interDF[,which(colnames(interDF)==interDF$ref[1])]   interDF$var_count <- interDF[,which(colnames(interDF)==interDF$var[1])]      caseList[[n]] <- interDF    }  for(n in names(controlList)){   controlList[[n]] <- maelstRom::prior_filter(controlList[[n]], min_median_cov = 0,      min_nr_samples = 20, checkref_filter = FALSE, prior_allelefreq_filter = FALSE,      min_PriorAlleleFreq = 0)   if(is.null(controlList[[n]])){     # Filter out case data if corresponding control data was removed:     caseList[[n]] <- NULL    } }   NC <- 1 # Number of Cores, CHANGE THIS for a speed-up when working on a linux machine  NS <- length(controlList)  spl <- c(0, cumsum(rep(floor(NS/NC),NC)+c(rep(1,NS-floor(NS/NC)*NC),          rep(0,NC-NS+floor(NS/NC)*NC))))  ParCTRL <- vector(mode = \"list\", length=NC) for(i in 1:NC){ # Put the split input data into a list for parallellisation   ParCTRL[[i]] <- controlList[(spl[i]+1):(spl[i+1])] } ParCASE <- vector(mode = \"list\", length=NC) for(i in 1:NC){ # Put the split input data into a list for parallellisation   ParCASE[[i]] <- caseList[(spl[i]+1):(spl[i+1])] }"},{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_imprinting_tutorial.html","id":"metaparameter-estimation","dir":"Articles","previous_headings":"","what":"Metaparameter estimation","title":"maelstRom imprinting tutorial","text":"Like “maelstRom Allelic Dispersion tutorial”, metaparameters need calculated (Sequencing Error, inbreeding coefficient); code explanations identical tutorial, exception also update control data (ParCTRL controlList) using AllelicMeta_est_par’s output, include preliminary per-locus reference allele fraction estimate among population’s genotypes. can used prior filter imprinting detection. [1] 0.002481903 [2] 0.008728076","code":"cl <- parallel::makeCluster(getOption(\"cl.cores\", NC)) GenoFinData <- parallel::parLapply(cl, X = ParCTRL, fun = maelstRom::AllelicMeta_est_par,   MinAllele_filt = 0.15, SE_filt = 0.035, NumSamp_filt = 20, MedianCov_filt = 4) parallel::stopCluster(cl)  # Update control list with a prior allele frequency estimate: ParCTRL <- lapply(GenoFinData, `[[`, 1) controlList <- do.call(c, lapply(GenoFinData, `[[`, 1))  SE_vec <- do.call(c, lapply(GenoFinData, `[[`, 2)) F_vec <- do.call(c, lapply(GenoFinData, `[[`, 3)) SEmedian <- median(SE_vec) Fmedian <- median(F_vec) print(c(SEmedian, Fmedian))"},{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_imprinting_tutorial.html","id":"detecting-imprinted-and-differentially-imprinted-loci","dir":"Articles","previous_headings":"","what":"Detecting imprinted and differentially imprinted loci","title":"maelstRom imprinting tutorial","text":"Imprinting analyses maelstRom quite different analyses now don’t rely beta-binomial modelling make different assumptions data. , generally speaking, bit robust imprinting usually extreme phenomenon, .e. heterozygous samples imprinted loci almost always “seem like” homozygous samples one alleles silenced almost entirely. Partial imprinting can exist maelstRom can detect , phenomenon modelled thoroughly previous ones vignette. First assume samples show AB conform Hardy-Weinberg-Equilibrium taking imprinting account, tested symmetry_gof. assessing whether number samples reference allele fraction > 0.5 (also number fraction <= 0.5) equal expected HWE assuming AB using chi square test. may seem kind heuristic first prone fail even little AB, remember want mainly retain imprinted loci, meaning heterozygous samples behave one homozygotes (clearly feature reference allele fractions > 0.5 <=0.5) filter fitting retaining HWE-conform samples time likely showcase imprinting. good filter setting requiring p-value least 0.05. applying filters, imprinting_est detects imprinted loci remaining control samples first assuming unshifted binomial mixture model, splitting heterozygous samples two separate groups according degree imprinting ii varying ii 0 1 -loop, calculating likelihoods along way perform likelihood-ratio test check differential imprinting (.e. compare likely model non-imprinted one; =0i=0). completeness, imprinted PMF (see Goovaerts et al. (2018) full elaboration): $$ \\small \\begin{aligned} \\mathrm{PMF}(&counts_{ref}|counts_{total}) =  P_{rr} * {\\tt pbinom}(x=counts_{ref} \\ |\\ n=counts_{total}, p=1-SE) \\ + \\\\ & 0.5P_{rv} * {\\tt pbinom} \\left( x=counts_{ref} \\ |\\ n=counts_{total}, p=\\frac{0.5-\\frac{}{2}}{1-\\frac{}{2}}(1-SE)+\\frac{0.5}{1-\\frac{}{2}}SE\\right) \\ + \\\\ & 0.5P_{rv} * {\\tt pbinom} \\left( x=counts_{ref} \\ |\\ n=counts_{total}, p=\\frac{0.5-\\frac{}{2}}{1-\\frac{}{2}}SE+\\frac{0.5}{1-\\frac{}{2}}(1-SE)\\right) \\ + \\\\ & P_{vv} * {\\tt pbinom}(x=counts_{ref} \\ |\\ n=counts_{total}, p=SE) \\end{aligned} $$ retaining significantly sufficiently imprinted loci (5% FDR level, degree imprinting least 0.6 median degree imprinting least 0.8 robustness; see median_imprinting latter’s calculation) using final_filter function, use LOItest_logreg() test differential imprinting. specifically, logistic regression used evaluate whether case samples feature significantly higher number apparently heterozygous samples control samples (considering least expressed allele success; details can found function’s help page. Note logistic regression approach takes account variable coverage samples, contrasting previously published strategy Goovaerts et al. (2018)). true, indicates significant fraction heterozygous samples tumor tissue “lost imprinting” actually started expressing alleles . call loci “differentially imprinted”, reserve term “loss--imprinting” phenomenon differential imprinting co-occurs increased total expression, indicative re-expression silenced allele. Comments code provide additional insight imprinting analysis pipeline: can take look loci significantly sufficiently imprinted (.e. output final_filter ): [1] “Locus76, Locus77, Locus172, Locus173, Locus184, Locus185, Locus186” set, part actually differentially imprinted case samples, indicated p-value DI_pval column p_DI_df dataframe. can control loss--imprinting detection, change, 5% FWER level (actually feasible due small number actually imprinted loci remaining, though ’re looking small toy dataset ; isn’t necessarily case larger experiments): [1] “Locus172, Locus173” can plot histograms control case allele fractions; locus 202 obviously imprinted controls loses lot imprinting cases (controls plotted using maelstRom_imprintplot visualize imprinting results, since imprinting-estimation never happens case data - just detect change heterozygosity via logistic regression - simply make histogram cases instead).","code":"# Perform filtering using symmetry_gof() # Notice we use allelefreq_prel as input in this function, which is the allele frequency as  # estimated by an UNSHIFTED binomial mixture model using AllelicMeta_est() earlier in this  # vignette, which is what symmetry_GOF assumes as well so it's only fitting. # We also enforce that this allelefreq_prel can not be more extreme than 0.15 or 0.85,  # because detecting imprinting would be very hard otherwise. ImprData <- controlList for(LOC in names(controlList)){   if (ImprData[[LOC]]$allelefreq_prel[1] <= 0.15 ||        ImprData[[LOC]]$allelefreq_prel[1] >= (1 - 0.15)) {     ImprData[[LOC]] <- NULL   } else {     ImprData[[LOC]]$sym <- maelstRom::symmetry_gof(ImprData[[LOC]]$ref_count,        ImprData[[LOC]]$var_count, ImprData[[LOC]]$allelefreq_prel[1])     if (ImprData[[LOC]]$sym[1] <= 0.05) {       ImprData[[LOC]] <- NULL     }   } }   # Detect imprinted control loci impr_res <- data.frame() for(LOC in names(ImprData)){   i_results <- maelstRom::imprinting_est(ImprData[[LOC]]$ref_count, ImprData[[LOC]]$var_count,                  allelefreq = ImprData[[LOC]]$allelefreq_prel[1], SE = SEmedian, inbr = Fmedian)   # An additional robustified \"median imprinting\" across samples to be used as possible    # additional filter criterion:   med_imp <- maelstRom::median_imprinting(ImprData[[LOC]]$ref_count, ImprData[[LOC]]$var_count,                allelefreq = ImprData[[LOC]]$allelefreq_prel[1], inbr = Fmedian)   results_z <- data.frame(\"position\" = ImprData[[LOC]]$Locus[1], \"LRT\" = i_results$LRT,      \"p\" = i_results$p_value, \"estimated.i\" = i_results$est_i, \"allele.frequency\" =      ImprData[[LOC]]$allelefreq_prel[1], \"reference\" = ImprData[[LOC]]$ref[1], \"variant\" =      ImprData[[LOC]]$var[1], \"med_cov\" = ImprData[[LOC]]$coverage[1], \"nr_samples\" =      nrow(ImprData[[LOC]]), \"GOF\" = i_results$GOF_likelihood, \"symmetry\" =      ImprData[[LOC]]$sym[1], \"med_impr\" = med_imp, stringsAsFactors = FALSE)   impr_res <- rbind(impr_res, results_z) } # Retain significantly imprinted loci (5% FDR) utilizing some additional filters, amongst # which a custom  Goodness-Of-Fit which more or less corresponds to a locus' likelihood of # the imprinted model*coverage; 0.8 is a good cutoff. Other filter criteria are imprinting  # (0.6) and median imprinting (0.8) impr_res_FIN <- maelstRom::final_filter(data_hash=NULL, impr_res, results_wd=NULL, gof_filt = 0.8,    med_impr_filt = 0.8, i_filt = 0.6, adj_p_filt = 0.05, file_all = FALSE, file_impr = FALSE,    file_all_counts = FALSE, file_impr_counts = FALSE)   # Amongst actually imprinted loci, detect differential expression in case data pos_impr <- as.character(impr_res_FIN$position) p_DI_df <- impr_res_FIN p_DI_df$DI_pval <- 1 for(LOC in pos_impr){   CData <- controlList[[LOC]]   TData <- caseList[[LOC]]   p_DI <- maelstRom::LOItest_logreg(CData$ref_count, CData$var_count,                                    TData$ref_count, TData$var_count)$p.value   p_DI_df$DI_pval[p_DI_df$position == LOC] <- p_DI } print(paste(impr_res_FIN$position, collapse = \", \")) print(paste(p_DI_df$position[p.adjust(p_DI_df$DI_pval, method = \"holm\") < 0.05],              collapse = \", \")) HistCTRL <- maelstRom::maelstRom_imprintplot(controlList[[\"Locus172\"]]$ref_count,    controlList[[\"Locus172\"]]$var_count,    allelefreq = impr_res_FIN$allele.frequency[impr_res_FIN$position==\"Locus172\"],   impr = impr_res_FIN$estimated.i[impr_res_FIN$position==\"Locus172\"],   SE = SEmedian, inbr = Fmedian, plot_NoImpr = TRUE, SplitPeaks = FALSE) +    ggplot2::ggtitle(\"Control\")  RatioCASE <- caseList[[\"Locus172\"]]$ref_count /    (caseList[[\"Locus172\"]]$ref_count + caseList[[\"Locus172\"]]$var_count) CASEDat <- data.frame(\"Ratio\" = RatioCASE) HistCASE <- ggplot2::ggplot() + ggplot2::geom_histogram(data = CASEDat, ggplot2::aes(Ratio),   bins = 50) + ggplot2::labs(x=\"Reference allele fraction\", y=\"Frequency\") +    ggplot2::ggtitle(\"Case\")  gridExtra::grid.arrange(HistCTRL, HistCASE, ncol=2)"},{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_imprinting_tutorial.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"maelstRom imprinting tutorial","text":"","code":"sessionInfo() #> R version 4.3.3 (2024-02-29 ucrt) #> Platform: x86_64-w64-mingw32/x64 (64-bit) #> Running under: Windows 10 x64 (build 19045) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=Dutch_Belgium.utf8  #> [2] LC_CTYPE=Dutch_Belgium.utf8    #> [3] LC_MONETARY=Dutch_Belgium.utf8 #> [4] LC_NUMERIC=C                   #> [5] LC_TIME=Dutch_Belgium.utf8     #>  #> time zone: Europe/Brussels #> tzcode source: internal #>  #> attached base packages: #> [1] stats     #> [2] graphics  #> [3] grDevices #> [4] utils     #> [5] datasets  #> [6] methods   #> [7] base      #>  #> loaded via a namespace (and not attached): #>  [1] gmp_0.7-5           #>  [2] sass_0.4.9          #>  [3] utf8_1.2.4          #>  [4] generics_0.1.3      #>  [5] gtools_3.9.5        #>  [6] stringi_1.8.3       #>  [7] lattice_0.22-5      #>  [8] digest_0.6.35       #>  [9] magrittr_2.0.3      #> [10] evaluate_0.24.0     #> [11] grid_4.3.3          #> [12] fastmap_1.2.0       #> [13] jsonlite_1.8.8      #> [14] ggnewscale_0.5.0    #> [15] gridExtra_2.3       #> [16] fansi_1.0.6         #> [17] scales_1.3.0        #> [18] numDeriv_2016.8-1.1 #> [19] textshaping_0.4.0   #> [20] jquerylib_0.1.4     #> [21] Rdpack_2.6.1        #> [22] cli_3.6.2           #> [23] rlang_1.1.3         #> [24] rbibutils_2.2.16    #> [25] munsell_0.5.1       #> [26] withr_3.0.0         #> [27] cachem_1.1.0        #> [28] yaml_2.3.9          #> [29] tools_4.3.3         #> [30] parallel_4.3.3      #> [31] dplyr_1.1.4         #> [32] colorspace_2.1-0    #> [33] ggplot2_3.5.1       #> [34] maelstRom_1.1.11    #> [35] hash_2.2.6.3        #> [36] vctrs_0.6.5         #> [37] R6_2.5.1            #> [38] zoo_1.8-12          #> [39] lifecycle_1.0.4     #> [40] stringr_1.5.1       #> [41] fs_1.6.4            #> [42] htmlwidgets_1.6.4   #> [43] MASS_7.3-60.0.1     #> [44] ragg_1.3.2          #> [45] pkgconfig_2.0.3     #> [46] desc_1.4.3          #> [47] pkgdown_2.1.0       #> [48] pillar_1.9.0        #> [49] bslib_0.7.0         #> [50] gtable_0.3.5        #> [51] data.table_1.16.0   #> [52] glue_1.7.0          #> [53] Rcpp_1.0.12         #> [54] systemfonts_1.1.0   #> [55] highr_0.11          #> [56] xfun_0.45           #> [57] tibble_3.2.1        #> [58] tidyselect_1.2.1    #> [59] rstudioapi_0.16.0   #> [60] knitr_1.48          #> [61] farver_2.1.2        #> [62] htmltools_0.5.8     #> [63] patchwork_1.2.0     #> [64] labeling_0.4.3      #> [65] rmarkdown_2.27      #> [66] compiler_4.3.3      #> [67] alabama_2023.1.0"},{"path":[]},{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_results_exploration.html","id":"maelstrom-explorations","dir":"Articles","previous_headings":"","what":"maelstRom explorations","title":"maelstRom results exploration","text":"results maelstRom’s Allelic Dispersion tutorial can explored even auxiliary data analyses, documented tutorial. starts previously obtained Allelic Dispersion tutorial results, loaded workspace .","code":"library(maelstRom) #> Warning: #> replacing #> previous import #> 'data.table::yearmon' #> by #> 'zoo::yearmon' #> when loading #> 'maelstRom' #> Warning: #> replacing #> previous import #> 'data.table::yearqtr' #> by #> 'zoo::yearqtr' #> when loading #> 'maelstRom' #> Package 'maelstRom' version 1.1.11 data(\"VignetteImage\", package = \"maelstRom\")  knitr::kable(head(dAD_res))"},{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_results_exploration.html","id":"exploration-sample-level-ad-correlations","dir":"Articles","previous_headings":"","what":"Exploration: Sample-level AD correlations","title":"maelstRom results exploration","text":"AD reflective underlying (epi)genetic dysregulation, stands reason extreme (allelically imbalanced) samples contribute increased AD (.e. plots : heterozygotes deviating πhet\\pi_{het} - marked green vertical dotted line - thus contributing broadening heterozygous beta-binomial fit) also (epi)genetically dysregulated ones. can try detect link correlating heterozygous sample’s extremity known (epi)genetic dysregulation samples, (promotor) methylation occurrence copy number alterations. tutorial relies SNP counts alone, correlate sample extremity, “sample-level AD” amount expression . , previously mentioned mechanisms (promotor hypermethylation, copy number gains losses) known impact gene’s expression; , accordingly, dysregulated samples showing extreme sample-level AD show deviant (differential) expression well. take count biases account, actual measure sample’s extremity (sample-level AD) e.g. simply deviance πhet\\pi_{het}, -log minimum sample’s heterozygous cumulative distribution function complement, higher extreme observation sample . Though correlating AD expression default setting AD_correlator function , accepts per-sample measure (e.g. hypermethylation percentages dysregulation data available) optional input. minimum count filter 20 used avoid low-count-based biases correlations’ computation. Eventually, returned number actually significant correlations relatively small. meant data exploration tool rather hard result filter criterion anyway, analysis isn’t robust population-level AD estimates detect biologically relevant genes, AD expression can regulated many different ways influenced many biases (e.g. tumor purity), making overly strong correlations /(epi)genetic data evident. Nevertheless, cases e.g. hypermethylation strongly suspected cause allelic imbalance sequencing data afflicted samples, computing correlations can provide soft evidence effect.","code":"AD_EX_Corrs <- c() AD_EX_Corr_pvals <- c()  for(LocOI in dAD_res$Locus){   CountDF <- caseList[[LocOI]]   dAD_fitres <- dAD_res[dAD_res$Locus == LocOI,]      CorResult <- AD_correlator(CountDF, dAD_fitres, MinCount = 20, method = \"spearman\")      AD_EX_Corrs <- c(AD_EX_Corrs, as.numeric(CorResult[\"correlation\"]))   AD_EX_Corr_pvals <- c(AD_EX_Corr_pvals, as.numeric(CorResult[\"p-value\"])) }  dAD_res$AD_EX_Corr <- AD_EX_Corrs dAD_res$AD_EX_Corr_pval <- AD_EX_Corr_pvals  print(dAD_res$Locus[!is.na(dAD_res$AD_EX_Corr_pval) & dAD_res$AD_EX_Corr_pval < 0.05 & dAD_res$HWEC > 0.001 & dAD_res$HWET > 0.001]) #>  [1] \"Locus1\"   #>  [2] \"Locus2\"   #>  [3] \"Locus4\"   #>  [4] \"Locus5\"   #>  [5] \"Locus40\"  #>  [6] \"Locus74\"  #>  [7] \"Locus85\"  #>  [8] \"Locus93\"  #>  [9] \"Locus112\" #> [10] \"Locus119\" #> [11] \"Locus141\" #> [12] \"Locus174\" #> [13] \"Locus190\" #> [14] \"Locus191\""},{"path":"https://biobix.github.io/maelstRom/articles/maelstRom_results_exploration.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"maelstRom results exploration","text":"","code":"sessionInfo() #> R version 4.3.3 (2024-02-29 ucrt) #> Platform: x86_64-w64-mingw32/x64 (64-bit) #> Running under: Windows 10 x64 (build 19045) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=Dutch_Belgium.utf8  #> [2] LC_CTYPE=Dutch_Belgium.utf8    #> [3] LC_MONETARY=Dutch_Belgium.utf8 #> [4] LC_NUMERIC=C                   #> [5] LC_TIME=Dutch_Belgium.utf8     #>  #> time zone: Europe/Brussels #> tzcode source: internal #>  #> attached base packages: #> [1] stats     #> [2] graphics  #> [3] grDevices #> [4] utils     #> [5] datasets  #> [6] methods   #> [7] base      #>  #> other attached packages: #> [1] maelstRom_1.1.11 #>  #> loaded via a namespace (and not attached): #>  [1] gmp_0.7-5           #>  [2] sass_0.4.9          #>  [3] utf8_1.2.4          #>  [4] generics_0.1.3      #>  [5] gtools_3.9.5        #>  [6] stringi_1.8.3       #>  [7] lattice_0.22-5      #>  [8] digest_0.6.35       #>  [9] magrittr_2.0.3      #> [10] evaluate_0.24.0     #> [11] grid_4.3.3          #> [12] fastmap_1.2.0       #> [13] jsonlite_1.8.8      #> [14] ggnewscale_0.5.0    #> [15] fansi_1.0.6         #> [16] scales_1.3.0        #> [17] numDeriv_2016.8-1.1 #> [18] textshaping_0.4.0   #> [19] jquerylib_0.1.4     #> [20] Rdpack_2.6.1        #> [21] cli_3.6.2           #> [22] rlang_1.1.3         #> [23] rbibutils_2.2.16    #> [24] munsell_0.5.1       #> [25] MAGE_1.0.0.18       #> [26] cachem_1.1.0        #> [27] yaml_2.3.9          #> [28] tools_4.3.3         #> [29] parallel_4.3.3      #> [30] dplyr_1.1.4         #> [31] colorspace_2.1-0    #> [32] ggplot2_3.5.1       #> [33] hash_2.2.6.3        #> [34] vctrs_0.6.5         #> [35] R6_2.5.1            #> [36] zoo_1.8-12          #> [37] lifecycle_1.0.4     #> [38] stringr_1.5.1       #> [39] fs_1.6.4            #> [40] htmlwidgets_1.6.4   #> [41] MASS_7.3-60.0.1     #> [42] ragg_1.3.2          #> [43] pkgconfig_2.0.3     #> [44] desc_1.4.3          #> [45] pkgdown_2.1.0       #> [46] pillar_1.9.0        #> [47] bslib_0.7.0         #> [48] gtable_0.3.5        #> [49] data.table_1.16.0   #> [50] glue_1.7.0          #> [51] Rcpp_1.0.12         #> [52] systemfonts_1.1.0   #> [53] xfun_0.45           #> [54] tibble_3.2.1        #> [55] tidyselect_1.2.1    #> [56] rstudioapi_0.16.0   #> [57] knitr_1.48          #> [58] htmltools_0.5.8     #> [59] patchwork_1.2.0     #> [60] rmarkdown_2.27      #> [61] compiler_4.3.3      #> [62] alabama_2023.1.0"},{"path":"https://biobix.github.io/maelstRom/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cedric Stroobandt. Maintainer.","code":""},{"path":"https://biobix.github.io/maelstRom/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Stroobandt C, Goovaerts T, Coussement L, Van Steenbergen L, Voorthuyzen F, De Graeve F, Galle J, Van Criekinge W, De Meyer T (2024). maelstRom: Modeller AllELe-Specific TRanscriptOMics (maelstRom): Detection allele-specific expression allelic imbalance. R package version 1.1.11, https://biobix.github.io/maelstRom/.","code":"@Manual{,   title = {maelstRom: Modeller of AllELe-Specific TRanscriptOMics (maelstRom): Detection of allele-specific expression and allelic imbalance},   author = {Cedric Stroobandt and Tine Goovaerts and Louis Coussement and Laure {Van Steenbergen} and Floris Voorthuyzen and Femke {De Graeve} and Jeroen Galle and Wim {Van Criekinge} and Tim {De Meyer}},   year = {2024},   note = {R package version 1.1.11},   url = {https://biobix.github.io/maelstRom/}, }"},{"path":"https://biobix.github.io/maelstRom/index.html","id":"maelstrom","dir":"","previous_headings":"","what":"Modeller of AllELe-Specific TRanscriptOMics (maelstRom): Detection of allele-specific expression and allelic imbalance","title":"Modeller of AllELe-Specific TRanscriptOMics (maelstRom): Detection of allele-specific expression and allelic imbalance","text":"Welcome maelstRom’s readme! maelstRom Modeller Allelic Gene Expression, R package providing extensive functions various RNAseq-based allelic analyses. ranges basic tasks (solely) RNAseq-based genotyping, analysis complex population-level phenomena (differential) allelic bias, allellic divergence (loss ) imprinting analyses. information model using maelstRom can found package vignette.","code":""},{"path":[]},{"path":"https://biobix.github.io/maelstRom/index.html","id":"hardware-requirements","dir":"","previous_headings":"System requirements","what":"Hardware requirements","title":"Modeller of AllELe-Specific TRanscriptOMics (maelstRom): Detection of allele-specific expression and allelic imbalance","text":"maelstRom requires standard computer (server) sufficient RAM -memory operations.","code":""},{"path":"https://biobix.github.io/maelstRom/index.html","id":"os-requirements","dir":"","previous_headings":"System requirements","what":"OS requirements","title":"Modeller of AllELe-Specific TRanscriptOMics (maelstRom): Detection of allele-specific expression and allelic imbalance","text":"package supported Windows, Linux MacOS. package tested following systems: Linux: Ubuntu 18.04 (bionic), Ubuntu 16.04 (Xenial) Windows: Windows 10","code":""},{"path":"https://biobix.github.io/maelstRom/index.html","id":"other-software-requirements","dir":"","previous_headings":"System requirements","what":"Other software requirements","title":"Modeller of AllELe-Specific TRanscriptOMics (maelstRom): Detection of allele-specific expression and allelic imbalance","text":"maelstRom R software package additional C/C++ code --hood, relies (versions listed used maelstRom’s latest test, though recent versions work fine well): R (v4.0.2) GNU multiple precision arithmetic library (gmp; v6.1.2) Boost Multiple Precision Floating-Point Reliable Library (mpfr; v4.0.1) Furthermore, maelstRom relies R packages operations, listed tutorial: https://biobix.github.io/maelstRom/articles/maelstRom_tutorial.html#session-info","code":""},{"path":"https://biobix.github.io/maelstRom/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Modeller of AllELe-Specific TRanscriptOMics (maelstRom): Detection of allele-specific expression and allelic imbalance","text":"want install maelstRom conda environment including R-installation, following bash commands sets previously listed software dependencies, opens environment, launches R: Setting environment takes 9 minutes linux-based server (Ubuntu 18.04; bionic) maelstRom source code can found associated Github page: https://github.com/Biobix/maelstRom. , maelstRom can installed using install_github function R’s devtools package: clean R installation (e.g. conda environment set previously), installation takes 2 minutes. local installation, rtools required. case code chunk throws error ERROR: loading failed 'i386', running following instead potentially solves issue:","code":"conda create -n <envname> r-essentials r-base r-devtools gmp mpfr conda activate <envname> R library(devtools) install_github(\"BioBix/maelstRom\") library(devtools) install_github(\"BioBix/maelstRom\", INSTALL_opts=c(\"--no-multiarch\"))"},{"path":"https://biobix.github.io/maelstRom/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Modeller of AllELe-Specific TRanscriptOMics (maelstRom): Detection of allele-specific expression and allelic imbalance","text":"maelstRom contains vignette going entire anaylis pipeline, can found : https://biobix.github.io/maelstRom/articles/maelstRom_tutorial.html Besides “regular” vignette “expanded” one included well (https://biobix.github.io/maelstRom/articles/maelstRom_expanded_tutorial.html), containing -depth code using maelstRom’s base functions regular one uses wrapper functions handle many analyses intermediary steps -hood. , regular vignette recommended first-time users users just want plug--play pipeline, expanded vignette provides insight maelstRom’s analyses recommended setting create custom/specialized analysis pipeline. Running entire vignette takes 2.5 hours standard computer (local installation; Windows 10) parallellization used (single-core). Enabling parallellization running maelstRom large-scale datasets server advised. maelstRom associated paper pending publication. Coming soon…","code":""},{"path":"https://biobix.github.io/maelstRom/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Modeller of AllELe-Specific TRanscriptOMics (maelstRom): Detection of allele-specific expression and allelic imbalance","text":"theoretical/technical questions issues using maelstRom package, please contact cedric.stroobandt@ugent.; everything else, contact Tim De Meyer tim.demeyer@ugent..","code":""},{"path":"https://biobix.github.io/maelstRom/reference/AllelicMeta_est.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate sequencing error rate and inbreeding using an Expectation-Maximisation algorithm — AllelicMeta_est","title":"Estimate sequencing error rate and inbreeding using an Expectation-Maximisation algorithm — AllelicMeta_est","text":"AllelicMeta_est calculates sequencing error rates, inbreeding     coefficients, allele frequencies, genotypes genotype probabilities ref_counts var_counts     specific locus. end fits (regular) binomial mixture model allelic bias heterozygotes (alleles equally likely).     somewhat simplistic model (overdispersion parameter, allelic bias) makes inferior fast fit,     ideal get rough estimates allelic population metaparameters (sequencing error rate inbreeding coefficient) e.g. taking mean median across large amount loci.     per-sample allele frequencies genotype (probabilities) less reliable , , function's main use.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/AllelicMeta_est.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate sequencing error rate and inbreeding using an Expectation-Maximisation algorithm — AllelicMeta_est","text":"","code":"AllelicMeta_est(   ref_counts,   var_counts,   deltaF = 10^-8,   maxIT = 100,   SE_prior = 0.002,   F_inbr_prior = NULL,   HetProb = 0.5 )"},{"path":"https://biobix.github.io/maelstRom/reference/AllelicMeta_est.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate sequencing error rate and inbreeding using an Expectation-Maximisation algorithm — AllelicMeta_est","text":"ref_counts Numeric vector. Reference counts. var_counts Numeric vector. Variant counts. deltaF Number. Expectation-Maximisation threshold, minimal difference two consecutive iterations (default 1e-08). maxIT Number. Maximum number iterations Expectation-Maximisation algorithm (default 100). SE_prior Number. Initial estimate sequencing error rate (default 0.002). F_inbr_prior Number. Initial estimate inbreeding coefficient used calculating initial genotype frequencies (default NULL, case initial genotype frequences get set 1/3). HetProb Number. Allelic bias heterozygotes (expected reference total allele count RNAseq data; default 0.5","code":""},{"path":"https://biobix.github.io/maelstRom/reference/AllelicMeta_est.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate sequencing error rate and inbreeding using an Expectation-Maximisation algorithm — AllelicMeta_est","text":"list containing following components: allelefreq estimated allele frequency. SE estimated sequencing error rate. F_inbr estimated inbreeding coefficient. genotypes likely genotype (rr, rv, vv) sample. genoprobs genotype probabilties (p(rr), p(rv), p(vv)) sample. nrep number iterations","code":""},{"path":"https://biobix.github.io/maelstRom/reference/AllelicMeta_est.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate sequencing error rate and inbreeding using an Expectation-Maximisation algorithm — AllelicMeta_est","text":"","code":"AllelicMeta_est(c(5, 8, 10, 3, 5, 6, 23), c(8, 8, 6, 4, 4, 10, 0)) #> $allelefreq #> [1] 0.5714285 #>  #> $SE #> [1] 0 #>  #> $F_inbr #> [1] -0.7500002 #>  #> $genotypes #> [1] \"rv\" \"rv\" \"rv\" \"rv\" \"rv\" \"rv\" \"rr\" #>  #> $genoprobs #>       p.rr.        p.rv. p.vv. #> 1 0.0000000 1.000000e+00     0 #> 2 0.0000000 1.000000e+00     0 #> 3 0.0000000 1.000000e+00     0 #> 4 0.0000000 1.000000e+00     0 #> 5 0.0000000 1.000000e+00     0 #> 6 0.0000000 1.000000e+00     0 #> 7 0.9999993 7.152558e-07     0 #>  #> $nrep #> [1] 3 #>  AllelicMeta_est(c(5, 0, 0, 3, 5, 1, 23), c(1, 8, 6, 2, 0, 10, 0),     SE_prior = 0.2, F_inbr_prior = 0.1) #> $allelefreq #> [1] 0.4931604 #>  #> $SE #> [1] 0.03413917 #>  #> $F_inbr #> [1] 0.678992 #>  #> $genotypes #> [1] \"rr\" \"vv\" \"vv\" \"rv\" \"rr\" \"vv\" \"rr\" #>  #> $genoprobs #>          p.rr.        p.rv.        p.vv. #> 1 8.253493e-01 1.746494e-01 1.330900e-06 #> 2 2.353486e-12 1.936346e-03 9.980637e-01 #> 3 1.873889e-09 7.187552e-03 9.928124e-01 #> 4 7.935723e-02 9.177449e-01 2.897870e-03 #> 5 9.857576e-01 1.424238e-02 5.618446e-08 #> 6 8.271749e-14 7.557152e-03 9.924428e-01 #> 7 9.999999e-01 1.029936e-07 4.226079e-34 #>  #> $nrep #> [1] 20 #>"},{"path":"https://biobix.github.io/maelstRom/reference/AllelicMeta_est_par.html","id":null,"dir":"Reference","previous_headings":"","what":"multi-locus wrapper function of AllelicMeta_est — AllelicMeta_est_par","title":"multi-locus wrapper function of AllelicMeta_est — AllelicMeta_est_par","text":"AllelicMeta_est_par wrapper function AllelicMeta_est allowing multiple loci given input (lists) focussing solely obtaining reliable sequencing error rate inbreeding coefficient estimate (population metaparameters), via extra inputs specifying filter criteria retain high-quality loci.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/AllelicMeta_est_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multi-locus wrapper function of AllelicMeta_est — AllelicMeta_est_par","text":"","code":"AllelicMeta_est_par(   DataList,   deltaF = 10^-8,   maxIT = 100,   SE_prior = 0.002,   F_inbr_prior = NULL,   HetProb = 0.5,   MinAllele_filt = 0.15,   SE_filt = 0.035,   NumSamp_filt = 20,   MedianCov_filt = 4 )"},{"path":"https://biobix.github.io/maelstRom/reference/AllelicMeta_est_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multi-locus wrapper function of AllelicMeta_est — AllelicMeta_est_par","text":"DataList List dataframes. dataframes least contain column reference- variant-allele counts (named \"ref_count\" \"var_count\" respectively). deltaF Number. Expectation-Maximisation threshold, minimal difference two consecutive iterations (default 1e-08). maxIT Number. Maximum number iterations Expectation-Maximisation algorithm (default 100). SE_prior Number. Initial estimate sequencing error rate (default 0.002). F_inbr_prior Number. Initial estimate inbreeding coefficient used calculating initial genotype frequencies (default NULL, case initial genotype frequences get set 1/3). HetProb Number. Allelic bias heterozygotes (expected reference total allele count RNAseq data; default 0.5 MinAllele_filt Number. Minimum allowed estimated minor allele frequency locus considered metaparameter estimates. SE_filt Number. Maximum allowed estimated sequencing error rate locus considered metaparameter estimates. NumSamp_filt Number. Minimum allowed number samples locus considered metaparameter estimates. MedianCov_filt Number. Minimum allowed median coverage across samples (reference plus variant allele count) locus considered metaparameter estimates.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/AllelicMeta_est_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"multi-locus wrapper function of AllelicMeta_est — AllelicMeta_est_par","text":"list containing following components: DataList_out updated DataList, now containing locus' sequencing error estimate (est_SE), inbreeding coefficient estimate (est_inbr), reference allele frequency estimate (allelefreq_prel), preliminary genotype probabilities (prr_prel, prv_prel, pvv_prel) preliminary genotype (genotype_prel) SE_vec Vector estimated sequencing error rates reliable loci. F_vec Vector estimated inbreeding coefficients reliable loci.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/BetaBinomGenotyping.html","id":null,"dir":"Reference","previous_headings":"","what":"multi-locus wrapper function of EMfit_betabinom_robust for the purpose of genotyping — BetaBinomGenotyping","title":"multi-locus wrapper function of EMfit_betabinom_robust for the purpose of genotyping — BetaBinomGenotyping","text":"BetaBinomGenotyping wrapper function EMfit_betabinom_robust allowing multiple loci given input (lists). Besides calling latter perform EM-fit update inputted per-locus dataframes listed EMfit_betabinom_robust output, also returns results-dataframe one row every locus, containing genotyping- Allelic Bias-detection results. function mainly useful following maelstRom's vignette step--step, input requirement rather stictly dependent performing previous steps pipeline. See help page EMfit_betabinom_robust information outputs","code":""},{"path":"https://biobix.github.io/maelstRom/reference/BetaBinomGenotyping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multi-locus wrapper function of EMfit_betabinom_robust for the purpose of genotyping — BetaBinomGenotyping","text":"","code":"BetaBinomGenotyping(   DataList,   allelefreq = 0.5,   SE,   inbr = 0,   dltaco = 10^-6,   HWE = FALSE,   p_InitEst = FALSE,   ThetaInits = \"moment\",   ReEstThetas = \"moment\",   NoSplitHom = TRUE,   NoSplitHet = TRUE,   ResetThetaMin = 10^-10,   ResetThetaMax = 10^-1,   DistRob = \"Cook\",   CookMargin = 5,   LikEmpNum = 1000,   LikMargin = 0,   NumHetMin = 5,   MaxOutFrac = 0.5,   thetaTRY = c(10^-1, 10^-3, 10^-7),   fitH0 = TRUE )"},{"path":"https://biobix.github.io/maelstRom/reference/BetaBinomGenotyping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multi-locus wrapper function of EMfit_betabinom_robust for the purpose of genotyping — BetaBinomGenotyping","text":"DataList List dataframes. dataframes least contain columns \"ref\", ref_count\", \"var\", \"var_count\" \"est_SE\", case following vignette function's appearance. allelefreq, SE, inbr, dltaco, HWE, p_InitEst, ThetaInits, ReEstThetas, NoSplitHom, NoSplitHet, ResetThetaMin, ResetThetaMax, DistRob, CookMargin, LikEmpNum, LikMargin, NumHetMin, MaxOutFrac, thetaTRY, fitH0 remaining parameters EMfit_betabinom_robust","code":""},{"path":"https://biobix.github.io/maelstRom/reference/BetaBinomGenotyping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"multi-locus wrapper function of EMfit_betabinom_robust for the purpose of genotyping — BetaBinomGenotyping","text":"list containing following components: DataList_out updated DataList, corresponding data_hash output EMfit_betabinom_robust Geno_AB_res dataframe containing per-locus results EMfit_betabinom_robust EM-fit well metrics, namely: positionThe locus' name, according names(DataList) probshiftFitted reference allele fraction RNAseq reads, indicating allelic bias different 0.5 LRTThe likelihood ratio test statistic, testing significant allelic bias pThe likelihood ratio test p-value, testing significant allelic bias qualityEquals \"!\" sample contains fitted heterozygotes, otherwise \"\" allele_frequencyestimated reference allele frequency population referencereference allele nucleotide variantvariant allele nucleotide est_SEper-locus sequencing error rate estimate, outputted earlier AllelicMeta_est coveragemedian coverage across samples nr_samplesnumber samples covering locus least one reference- variant-count median_ABmedian allelic bias, outputted median_AB rho_rrfitted reference homozygous fraction population rho_rvfitted heterozygous fraction population rho_vvfitted variant homozygous fraction population theta_homfitted overdispersion parameter homozygous PMFs theta_hetfitted overdispersion parameter heterozygous PMF theta_hom_NoShiftfitted overdispersion parameter homozygous PMFs assuming allelic bias theta_het_NoShiftfitted overdispersion parameter heterozygous PMF assuming allelic bias Chi2PVALp-value chi square test assessing Hardy-Weinberg-Equilibrium locus given inbreeding coefficient metaparameter; see HWE_chisquared Chi2STATtest statistic chi square test assessing Hardy-Weinberg-Equilibrium locus given inbreeding coefficient metaparameter; see HWE_chisquared","code":""},{"path":"https://biobix.github.io/maelstRom/reference/BetaBinomMix_LLDeriv.html","id":null,"dir":"Reference","previous_headings":"","what":"Beta-binomial mixture model log-likelihood derivatives to its parameters involved in optimization — BetaBinomMix_LLDeriv","title":"Beta-binomial mixture model log-likelihood derivatives to its parameters involved in optimization — BetaBinomMix_LLDeriv","text":"BetaBinomMix_LLDeriv Lorem ipsum","code":""},{"path":"https://biobix.github.io/maelstRom/reference/BetaBinomMix_LLDeriv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beta-binomial mixture model log-likelihood derivatives to its parameters involved in optimization — BetaBinomMix_LLDeriv","text":"","code":"BetaBinomMix_LLDeriv(   ref_counts,   var_counts,   probshift,   SE,   prr,   pvv,   prv,   theta_hom,   theta_het,   Der1,   Der2 = NULL )"},{"path":"https://biobix.github.io/maelstRom/reference/BetaBinomMix_LLDeriv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beta-binomial mixture model log-likelihood derivatives to its parameters involved in optimization — BetaBinomMix_LLDeriv","text":"ref_counts Number Numeric vector Reference count(s). var_counts Number Numeric vector. Variant count(s). probshift Number. reference allele fraction heterozygotes, indicating allelic bias deviating 0.5 SE Number. Sequencing error rate. prr Number. Reference homozygote genotype probability locus. pvv Number. Variant homozygote genotype probability locus. prv Number. Heterozygote genotype probability locus. theta_hom Number. dispersion parameter homozygous peaks. Der1 String. Derivate respect parameter. Der2 String. Derivate respect parameter well; optional. isCase Number Numeric vector. Equals 1 cases 0 controls.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/BetaBinomMix_LLDeriv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beta-binomial mixture model log-likelihood derivatives to its parameters involved in optimization — BetaBinomMix_LLDeriv","text":"log-likelihood derivative","code":""},{"path":"https://biobix.github.io/maelstRom/reference/BetaBinomMix_LLDeriv_transfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Beta-binomial mixture model log-likelihood derivatives to its parameters involved in optimization — BetaBinomMix_LLDeriv_transfo","title":"Beta-binomial mixture model log-likelihood derivatives to its parameters involved in optimization — BetaBinomMix_LLDeriv_transfo","text":"BetaBinomMix_LLDeriv Lorem ipsum","code":""},{"path":"https://biobix.github.io/maelstRom/reference/BetaBinomMix_LLDeriv_transfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beta-binomial mixture model log-likelihood derivatives to its parameters involved in optimization — BetaBinomMix_LLDeriv_transfo","text":"","code":"BetaBinomMix_LLDeriv_transfo(   ref_counts,   var_counts,   probshift,   SE,   prr,   pvv,   prv,   theta_hom,   theta_het,   Der1,   Der2 = NULL )"},{"path":"https://biobix.github.io/maelstRom/reference/BetaBinomMix_LLDeriv_transfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beta-binomial mixture model log-likelihood derivatives to its parameters involved in optimization — BetaBinomMix_LLDeriv_transfo","text":"ref_counts Number Numeric vector Reference count(s). var_counts Number Numeric vector. Variant count(s). probshift Number. reference allele fraction heterozygotes, indicating allelic bias deviating 0.5 SE Number. Sequencing error rate. prr Number. Reference homozygote genotype probability locus. pvv Number. Variant homozygote genotype probability locus. prv Number. Heterozygote genotype probability locus. theta_hom Number. dispersion parameter homozygous peaks. Der1 String. Derivate respect parameter. Der2 String. Derivate respect parameter well; optional. isCase Number Numeric vector. Equals 1 cases 0 controls.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/BetaBinomMix_LLDeriv_transfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beta-binomial mixture model log-likelihood derivatives to its parameters involved in optimization — BetaBinomMix_LLDeriv_transfo","text":"log-likelihood derivative","code":""},{"path":"https://biobix.github.io/maelstRom/reference/BetaBinom_test_pvalTS.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs an exact beta-binomial p-test — BetaBinom_test_pvalTS","title":"Performs an exact beta-binomial p-test — BetaBinom_test_pvalTS","text":"BetaBinom_test_pvalTS performs exact test, returning p-value reflects probability observed data m assuming beta-binomial PMF given parameters m, pi theta. See dBetaBinom information used parameterization.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/BetaBinom_test_pvalTS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs an exact beta-binomial p-test — BetaBinom_test_pvalTS","text":"","code":"BetaBinom_test_pvalTS(m, n, pi, theta)"},{"path":"https://biobix.github.io/maelstRom/reference/BetaBinom_test_pvalTS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs an exact beta-binomial p-test — BetaBinom_test_pvalTS","text":"m Number. Number successes n Number. Number trials pi Number. Probability success; 0 >= pi >= 1 theta Number. Overdispersion parameter; 0 >= theta > +Inf","code":""},{"path":"https://biobix.github.io/maelstRom/reference/BetaBinom_test_pvalTS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs an exact beta-binomial p-test — BetaBinom_test_pvalTS","text":"probability make observation equally less likely input data","code":""},{"path":"https://biobix.github.io/maelstRom/reference/BrolDB.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — BrolDB","title":"DO SOMETHING — BrolDB","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/BrolDB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — BrolDB","text":"","code":"BrolDB(TC, TP)"},{"path":"https://biobix.github.io/maelstRom/reference/combine_p_gene.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine p-values of SNPs per gene. — combine_p_gene","title":"Combine p-values of SNPs per gene. — combine_p_gene","text":"combine_p_gene combines per-SNP p-values per-gene p-values; method can chosen via input","code":""},{"path":"https://biobix.github.io/maelstRom/reference/combine_p_gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine p-values of SNPs per gene. — combine_p_gene","text":"","code":"combine_p_gene(p_values, weights = NULL, method = \"geometric\", r = NULL)"},{"path":"https://biobix.github.io/maelstRom/reference/combine_p_gene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine p-values of SNPs per gene. — combine_p_gene","text":"p_values Numeric vector. P-values combine. weights Numeric vector. Weights given observation (corresponds much observation occurs, can non-integer well). method String. Specifies method combining p-values, options \"arithmetic\" (mean), \"geometric\" (mean), \"harmonic\" (mean), \"minimum\" (p-value), \"maximum\" (p-value) \"GMP\" (Generalized Mean P-value). case latter, value r must specified, GMP calculated (sum(weights * p_values^r)/sum(weights))^(1/r), see (Wilson 2020) . r Numeric. r-value used calculation GMP, option chosen method.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/combine_p_gene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine p-values of SNPs per gene. — combine_p_gene","text":"Combined p-value gene.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/combine_p_gene.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Combine p-values of SNPs per gene. — combine_p_gene","text":"Wilson DJ (2020). “Generalized mean p-values combining dependent tests: comparison generalized central limit theorem robust risk analysis.” Wellcome Open Research, 5.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/combine_p_gene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine p-values of SNPs per gene. — combine_p_gene","text":"","code":"combine_p_gene(c(0.015, 0.414, 8.47E-03, 7.43E-03, 0.574, 0.837)) #> [1] 0.07567171 combine_p_gene(c(0.063, 0.725, 0.657, 0.378, 0.291)) #> [1] 0.3189523"},{"path":"https://biobix.github.io/maelstRom/reference/CppCnT_Optim.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — CppCnT_Optim","title":"DO SOMETHING — CppCnT_Optim","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/CppCnT_Optim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — CppCnT_Optim","text":"","code":"CppCnT_Optim(   StartVals,   ref_counts,   var_counts,   isCase,   sprv,   MemLim = 2048L,   Xtra = 7L,   step_size = 0.01,   tol = 0.1,   epsabs = 0.001 )"},{"path":"https://biobix.github.io/maelstRom/reference/CppHetH0_Optim.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — CppHetH0_Optim","title":"DO SOMETHING — CppHetH0_Optim","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/CppHetH0_Optim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — CppHetH0_Optim","text":"","code":"CppHetH0_Optim(   ThetaHetStart,   probshift,   ref_counts,   var_counts,   sprv,   MemLim = 2048L,   Xtra = 7L,   step_size = 0.01,   tol = 0.1,   epsabs = 0.001 )"},{"path":"https://biobix.github.io/maelstRom/reference/CppHet_Optim.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — CppHet_Optim","title":"DO SOMETHING — CppHet_Optim","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/CppHet_Optim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — CppHet_Optim","text":"","code":"CppHet_Optim(   StartVals,   ref_counts,   var_counts,   sprv,   MemLim = 2048L,   Xtra = 7L,   step_size = 0.01,   tol = 0.1,   epsabs = 0.001 )"},{"path":"https://biobix.github.io/maelstRom/reference/CppHom_Optim.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — CppHom_Optim","title":"DO SOMETHING — CppHom_Optim","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/CppHom_Optim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — CppHom_Optim","text":"","code":"CppHom_Optim(   ThetaHomStart,   SE,   ref_counts,   var_counts,   spr,   spv,   MemLim = 2048L,   Xtra = 7L,   step_size = 0.01,   tol = 0.1,   epsabs = 0.001 )"},{"path":"https://biobix.github.io/maelstRom/reference/dAD_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs a differential Allelic Divergence analysis on a control- and case-dataset — dAD_analysis","title":"Performs a differential Allelic Divergence analysis on a control- and case-dataset — dAD_analysis","text":"dAD_analysis wrapper function bundling EMfit_betabinom_robust, EMfit_betabinom, EMfit_betabinom_popcomb, pmf_betabinomMix, HWE_chisquared run entire differential Allelic Divergence detection analysis discussed package vignette. end, goes following steps: Calling EMfit_betabinom_robust control- case-dataset separately sole purpose outlier detection;   detected outliers datasets play part future Expectation-Maximization-fits. Perform one fit joint (case+control) data using EMfit_betabinom, .e. assuming population parameters shared including   heterozygous overdispersion parameter, .e. assuming differential Allelic Divergence. Perform fit control- case-data using EMfit_betabinom_popcomb, assumes population parameters shared   except heteroyzous overdispersion parameter, .e. fit accomodating differential Allelic Divergence Statistically test differential Allelic Divergence using likelihood ratio test one degree freedom comparing   fits two previous points. Filling results dataframe dAD_res.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/dAD_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs a differential Allelic Divergence analysis on a control- and case-dataset — dAD_analysis","text":"","code":"dAD_analysis(   datas,   SE,   inbr,   allelefreq = 0.5,   dltaco = 10^-6,   HWE = FALSE,   p_InitEst = FALSE,   p_inits = c(1/3, 1/3, 1/3),   ThetaInits = \"moment\",   ReEstThetas = \"moment\",   NoSplitHom = TRUE,   NoSplitHet = TRUE,   ResetThetaMin = 10^-10,   ResetThetaMax = 10^-1,   DistRob = \"Cook\",   CookMargin = 5,   LikEmpNum = 1000,   LikMargin = 0,   NumHetMin = 5,   MaxOutFrac = 0.5,   thetaTRY = c(10^-1, 10^-3, 10^-7),   probshift_init = 0.5,   FirstFewFixed = NULL,   MemLim = 2048,   Xtra = 5,   epsabs = 0.001,   MaxIt = 100 )"},{"path":"https://biobix.github.io/maelstRom/reference/dAD_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs a differential Allelic Divergence analysis on a control- and case-dataset — dAD_analysis","text":"SE Number. Sequencing error rate population metaparameter. inbr Number. Inbreeding coefficient population metaparameter. allelefreq, dltaco, HWE, p_InitEst, ThetaInits, ReEstThetas, NoSplitHom, NoSplitHet, ResetThetaMin, ResetThetaMax, DistRob, CookMargin, LikEmpNum, LikMargin, NumHetMin, MaxOutFrac, thetaTRY Remaining control parameters passed EMfit_betabinom_robust, EMfit_betabinom, EMfit_betabinom_popcomb. See respective documentation information. Usually, parameter's default values fine. Datalist list containing two lists dataframes, turn contain control- case-data (order). Subsequent entries lists correspond subsequent loci (lists must size named per-locus). dataframes least contain ref_count var_count column.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/dAD_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs a differential Allelic Divergence analysis on a control- and case-dataset — dAD_analysis","text":"dataframe one row per locus, containing locus columns: LocName Locus name. PiFitH0 Heterozygous pi parameter (reference allele fraction) joint fit sharing parameters. PiFitH1 Heterozygous pi parameter (reference allele fraction) fit allowing differential Allelic Divergence. ThetaHetH0 Heterozygous theta parameter (overdispersion) joint fit sharing parameters. ThetaHetCTRL Heterozygous theta parameter (overdispersion) controls fit allowing differential Allelic Divergence. ThetaHetCASE Heterozygous theta parameter (overdispersion) cases fit allowing differential Allelic Divergence. RhoHetH0 Heterozygous rho parameter (overdispersion, ranging 0 1) joint fit sharing parameters. RhoHetCTRL Heterozygous rho parameter (overdispersion, ranging 0 1) controls fit allowing differential Allelic Divergence. RhoHetCASE Heterozygous rho parameter (overdispersion, ranging 0 1) cases fit allowing differential Allelic Divergence. NumHetCTRL Estimate number heterozygotes controls, according separate outlier-detection fit step 1 . Outliers genotyped counted towards number, just used actual fitting procedure. NumHetCASE Estimate number heterozygotes cases, according separate outlier-detection fit step 1 . Outliers genotyped counted towards number, just used actual fitting procedure. RobFlagCTRL RobFlag output separate outlier-detection fit step 1 controls, see EMfit_betabinom_robust's documentation. RobFlagCASE RobFlag output separate outlier-detection fit step 1 cases, see EMfit_betabinom_robust's documentation. HWECTRL HWE chi squared p-value controls, see HWE_chisquared. Performed genotyping data according outlier-detection fit step 1. HWECASE HWE chi squared p-value cases, see HWE_chisquared. Performed genotyping data according outlier-detection fit step 1. CovCTRL_mean Mean coverage (reference + variant count) across control data. CovCASE_mean Mean coverage (reference + variant count) across case data. CovCTRL_med Median coverage (reference + variant count) across control data. CovCASE_med Median coverage (reference + variant count) across case data. NumOutCTRL Number outliers detected control data. NumOutCASE Number outliers detected case data. QualityCTRL Quality flag returned EMfit_betabinom_robust (see documentation) outlier-detection fit control data (step 1 ). QualityCASE Quality flag returned EMfit_betabinom_robust (see documentation) outlier-detection fit case data (step 1 ). pr Reference homozygote fraction according differential Allelic Divergence accomodating fit (different heterozygous overdispersion parameters). prv Heterozygote fraction according differential Allelic Divergence accomodating fit (different heterozygous overdispersion parameters). pv Variant homozygote fraction according differential Allelic Divergence accomodating fit (different heterozygous overdispersion parameters). ThetaHomH0 Homozygous theta parameter (overdispersion) joint fit sharing parameters. ThetaHomH1 Homozygous theta parameter (overdispersion) fit allowing differential Allelic Divergence.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/dBetaBinom_cpp_old.html","id":null,"dir":"Reference","previous_headings":"","what":"Exact beta-binomial density using sums. — dBetaBinom_cpp_old","title":"Exact beta-binomial density using sums. — dBetaBinom_cpp_old","text":"dBetaBinom_cpp_old calculates beta-binomial density via number sums, slow high-value data fast low-value data. function called dBetaBinom necessary, called outside .","code":""},{"path":"https://biobix.github.io/maelstRom/reference/dBetaBinom_cpp_old.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exact beta-binomial density using sums. — dBetaBinom_cpp_old","text":"","code":"dBetaBinom_cpp_old(ms, ns, pi, theta, LOG)"},{"path":"https://biobix.github.io/maelstRom/reference/dBetaBinom_cpp_old.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exact beta-binomial density using sums. — dBetaBinom_cpp_old","text":"ms Numeric vector. Vector number successes ns Numeric vector. Vector number trials pi Number. Probability success; 0 >= pi >= 1 theta Number. Dispersion parameter; 0 >= theta > +Inf LOG Logical. TRUE, return log-densities","code":""},{"path":"https://biobix.github.io/maelstRom/reference/dBetaBinom_cpp_old.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exact beta-binomial density using sums. — dBetaBinom_cpp_old","text":"numeric vector length ms ns, containing (log-)beta-binomial densities","code":""},{"path":"https://biobix.github.io/maelstRom/reference/dBetaBinom_MP.html","id":null,"dir":"Reference","previous_headings":"","what":"Exact beta-binomial density using a multiprecision library. — dBetaBinom_MP","title":"Exact beta-binomial density using a multiprecision library. — dBetaBinom_MP","text":"dBetaBinom_MP calculates beta-binomial density avoiding numerical mistakes (catastrophic cancellations) due extreme parameter values. function called dBetaBinom necessary, called outside .","code":""},{"path":"https://biobix.github.io/maelstRom/reference/dBetaBinom_MP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exact beta-binomial density using a multiprecision library. — dBetaBinom_MP","text":"","code":"dBetaBinom_MP(ms, ns, piX, thetaX, LOG, NecPres)"},{"path":"https://biobix.github.io/maelstRom/reference/dBetaBinom_MP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exact beta-binomial density using a multiprecision library. — dBetaBinom_MP","text":"ms Numeric vector. Vector number successes ns Numeric vector. Vector number trials piX Number. Probability success; 0 >= piX >= 1 thetaX Number. Dispersion parameter; 0 >= thetaX > +Inf LOG Logical. TRUE, return log-densities NecPres Number. Necessary Precision, .e. number bits, accurate density calculatation, determined function dBetaBinom","code":""},{"path":"https://biobix.github.io/maelstRom/reference/dBetaBinom_MP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exact beta-binomial density using a multiprecision library. — dBetaBinom_MP","text":"numeric vector length ms ns, containing (log-)beta-binomial densities","code":""},{"path":"https://biobix.github.io/maelstRom/reference/dBetaBin_cppi.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — dBetaBin_cppi","title":"DO SOMETHING — dBetaBin_cppi","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/dBetaBin_cppi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — dBetaBin_cppi","text":"","code":"dBetaBin_cppi(M, N, PI, THETA, LOG, MemLim, Xtra)"},{"path":"https://biobix.github.io/maelstRom/reference/dBetaBin_cppi_MP.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — dBetaBin_cppi_MP","title":"DO SOMETHING — dBetaBin_cppi_MP","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/dBetaBin_cppi_MP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — dBetaBin_cppi_MP","text":"","code":"dBetaBin_cppi_MP(M, N, PI, THETA, NecPres)"},{"path":"https://biobix.github.io/maelstRom/reference/dpqrBetaBinom.html","id":null,"dir":"Reference","previous_headings":"","what":"The Beta-binomial distribution — dBetaBinom","title":"The Beta-binomial distribution — dBetaBinom","text":"Density, distribution function, quantile function random generation beta-binomial distribution parameters pi theta. can interpreted expected probability success dispersion parameter respectively, can respectively expressed terms common alpha, beta parameterization pi = alpha/(alpha+beta) theta = 1/(alpha+beta).","code":""},{"path":"https://biobix.github.io/maelstRom/reference/dpqrBetaBinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Beta-binomial distribution — dBetaBinom","text":"","code":"dBetaBinom(ms, ns, pi, theta, LOG = FALSE, MemLim = 2048L, Xtra = 7L)  pBetaBinom(ms, ns, pi, theta, lower.tail = TRUE, log.p = FALSE)  qBetaBinom(p, ns, pi, theta, lower.tail = TRUE, log.p = FALSE)  rBetaBinom(ns, pi, theta)"},{"path":"https://biobix.github.io/maelstRom/reference/dpqrBetaBinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Beta-binomial distribution — dBetaBinom","text":"ms Numeric vector. Vector number successes ns Numeric vector. Vector number trials pi Number. Probability success; 0 >= pi >= 1 theta Number. Dispersion parameter; 0 >= theta > +Inf LOG Logical. TRUE, dBetaBinom returns log-densities. MemLim Integer. memory limit, bits, numbers used calculation density. extreme data/parameter values, may necesssary go beyond R's double memory, .e. 53 bits, order get correct results. However, argument prevents boundless memory usage. case limit reached, dBetaBinom falls back regular dbinom function, happen extremely close--zero theta-values anyway. warning message generated occurs. Xtra Integer. internal control parameter, determines number decimal places stored correctly memory calculation beta-binomial densities, upon number bits used per number depends. recommended change default. log.p Logical. TRUE, probabilities p returned accepted pBetaBinom qBetaBinom respectively given log(p).","code":""},{"path":"https://biobix.github.io/maelstRom/reference/dpqrBetaBinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Beta-binomial distribution — dBetaBinom","text":"dBetaBinom gives density, pBetaBinom gives distribution function, qBetaBinom gives quantile function rBetaBinom generates random deviates. applicable, output length ms /ns.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/EMfit_betabinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Models allelic RNAseq counts using an expectation-maximization fit of a beta-binomial mixture distribution — EMfit_betabinom","title":"Models allelic RNAseq counts using an expectation-maximization fit of a beta-binomial mixture distribution — EMfit_betabinom","text":"EMfit_betabinom estimates, per locus, parameters assumed beta-binomial mixture model via expectation maximization (genotype frequencies, allelic bias .e. heterozygous pi parameter, homozygous heterozygous allelic divergence .e. respective theta- (overdispersion) parameters. fit, per-samples genotype probabilities obtained well. Optionally, fit assuming allelic bias (heterozygous pi-parameter = 0.5) performed well, purpose significant allelic bias detection via likelihood ratio test.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/EMfit_betabinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Models allelic RNAseq counts using an expectation-maximization fit of a beta-binomial mixture distribution — EMfit_betabinom","text":"","code":"EMfit_betabinom(   data_counts,   allelefreq = 0.5,   SE,   inbr = 0,   dltaco = 10^-6,   HWE = FALSE,   p_InitEst = FALSE,   probshift_init = NULL,   ThetaInits = \"moment\",   ReEstThetas = \"moment\",   NoSplitHom = TRUE,   NoSplitHet = TRUE,   ResetThetaMin = 10^-10,   ResetThetaMax = 10^-1,   thetaTRY = c(10^-1, 10^-3, 10^-7),   fitH0 = TRUE,   FirstFewFixed = NULL,   epsabs = 0.001,   MaxIt = 100 )"},{"path":"https://biobix.github.io/maelstRom/reference/EMfit_betabinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Models allelic RNAseq counts using an expectation-maximization fit of a beta-binomial mixture distribution — EMfit_betabinom","text":"data_counts Data frame. Data frame SNP reference variant counts (\"ref_count\" \"var_count\", respectively) sample (\"sample\"). allelefreq Number. Allele frequency. used pInitEst TRUE (default = 0.5) SE Number. Sequencing error rate. inbr Number. Degree inbreeding (default = 0). dltaco Number. Minimal difference 2 iterations (default = 0.001). HWE Logical. HWE used allele frequency estimation, recommended (default = FALSE). p_InitEst Logical. Calculate initial estimates pr, pv prv allelefreq, recommended (default = FALSE). probshift_init Number. Initial estimate allelic bias heterozygotes; recommended leave NULL, case initial estimate 0.5 ThetaInits Numeric vector, \"moment\" \"TryThree\". vector length two containing initial dispersion estimate homozygous peaks, followed one heterozygous peak, \"moment\", case moment initial estimates generated. case \"TryThree\", three initial values given thetaTRY input argument tried one yielding best fit retained. ReEstThetas String. Accepts methods \"moment\" \"simple\" arguments, case dispersions re-estimated every EM-step using moment estimate simple custom procedure respectively, used starting NoSplitHom Logical. TRUE, allow beta-binomial fits homozygotes bimodal NoSplitHet Logical. TRUE, allow beta-binomial fit heterozygotes bimodal ResetThetaMin Number. Initial theta values numeric optimization get capped minimum (e.g. case moment estimate even lower) ResetThetaMax Number. Initial theta values numeric optimization get capped maximum (e.g. case moment estimate even higher) thetaTRY Numeric vector. See ReEstThetas, case argument equals \"TryThree\". fitH0 Logical. TRUE, performs fit assuming allelic bias (heterozygous pi-parameter = 0.5) subsequent likihood ratio test significant allelic bias.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/EMfit_betabinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Models allelic RNAseq counts using an expectation-maximization fit of a beta-binomial mixture distribution — EMfit_betabinom","text":"list containing following components: AB estimated Allelic Bias (estimated reference read fraction heterozygous samples). AB_lrt test statistic likelihood ratio test perfectly balanced Allelic Bias (0.5). included fitH0==FALSE. AB_p p-value likelihood ratio test perfectly balanced Allelic Bias (0.5). included fitH0==FALSE. nrep number iterations. quality Indicates quality locus. \"!\" indicates bad data bad fit due apparent heterozygosity. rho_vv variant homozygote genotype frequency locus. rho_rr reference homozygote genotype frequency locus. rho_rv heterozyous genotype frequency locus. rho_vv_H0 variant homozygote genotype frequency Allelic Bias = 0.5. included fitH0==FALSE. rho_rr_H0 reference homozygote genotype frequency Allelic Bias = 0.5. included fitH0==FALSE. rho_rv_H0 heterozyous genotype frequency Allelic Bias = 0.5. included fitH0==FALSE. data_hash Data frame. Input data frame extra columns: allelefreq, (likely) genotype, genotype probabilities (prr, prv, pvv), whether data point outlier (\"Outlier\", equals 1 ) per sample. theta_hom Final overdispersion estimate homozygous peaks. theta_het Final overdispersion estimate heterozygous peak. theta_hom_H0 Final overdispersion estimate homozygous peaks Allelic Bias = 0.5. included fitH0==FALSE. theta_het_H0 Final overdispersion estimate heterozygous peak Allelic Bias = 0.5. included fitH0==FALSE. GOF, GOFaltMEAN, GOFaltMEDIAN, GOFaltPERDIST, GOFaltPERDIST_S, GOFaltONLYHET, GOFexactMEAN, GOFexactMEANLOG Various Goodness--Fit heuristics.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/EMfit_betabinom_popcomb.html","id":null,"dir":"Reference","previous_headings":"","what":"Models and estimates the allelic shift for cis-eQTL data, using beta-binomial models. — EMfit_betabinom_popcomb","title":"Models and estimates the allelic shift for cis-eQTL data, using beta-binomial models. — EMfit_betabinom_popcomb","text":"EMfit_betabinom_popcomb, similar EMfit_betabinom, fits beta-binomial mixture model input reference- allele RNAseq counts, counts originating two different populations (control- case-population). distribution models jointly fitted except heterozygous overdispersion parameters, allowed differ populations. main purpose fit getting model's likelihood used likelihood ratio test, checking statistical evidence heterozygous overdispersion parameter truly differs populations, indicate differential allelic divergence.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/EMfit_betabinom_popcomb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Models and estimates the allelic shift for cis-eQTL data, using beta-binomial models. — EMfit_betabinom_popcomb","text":"","code":"EMfit_betabinom_popcomb(   data_counts,   allelefreq = 0.5,   SE,   inbr = 0,   dltaco = 10^-6,   HWE = FALSE,   p_InitEst = FALSE,   p_inits = c(1/3, 1/3, 1/3),   ThetaInits = \"moment\",   ReEstThetas = \"moment\",   NoSplitHom = TRUE,   NoSplitHet = TRUE,   ResetThetaMin = 10^-10,   ResetThetaMax = 10^-1,   thetaTRY = c(10^-1, 10^-3, 10^-7),   probshift_init = 0.5,   FirstFewFixed = NULL,   MemLim = 2048,   Xtra = 5,   epsabs = 0.001,   MaxIt = 100 )"},{"path":"https://biobix.github.io/maelstRom/reference/EMfit_betabinom_popcomb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Models and estimates the allelic shift for cis-eQTL data, using beta-binomial models. — EMfit_betabinom_popcomb","text":"data_counts Data frame. Data frame SNP reference variant counts (\"ref_count\" \"var_count\", respectively) sample (\"sample\"). Also required \"isCase\" column, equaling 1 case-samples 0 control-samples allelefreq Number. Allele frequency. used pInitEst TRUE (default = 0.5) SE Number. Sequencing error rate. inbr Number. Degree inbreeding (default = 0). dltaco Number. Minimal difference 2 iterations (default = 0.001). HWE Logical. HWE used allele frequency estimation, recommended (default = FALSE). p_InitEst Logical. Calculate initial estimates pr, pv prv allelefreq, recommended (default = FALSE). ThetaInits Numeric vector, \"moment\" \"TryThree\". vector length two containing initial dispersion estimate homozygous peaks, followed one heterozygous peak, \"moment\", case moment initial estimates generated. case \"TryThree\", three initial values given thetaTRY input argument tried one yielding best fit retained. ReEstThetas String. Accepts methods \"moment\" \"simple\" arguments, case dispersions re-estimated every EM-step using moment estimate simple custom procedure respectively, used starting NoSplitHom Logical. TRUE, allow beta-binomial fits homozygotes bimodal NoSplitHet Logical. TRUE, allow beta-binomial fit heterozygotes bimodal ResetThetaMin Number. Initial theta values numeric optimization get capped minimum (e.g. case moment estimate even lower) ResetThetaMax Number. Initial theta values numeric optimization get capped maximum (e.g. case moment estimate even higher) thetaTRY Numeric vector. See ReEstThetas, case argument equals \"TryThree\". probshift_init Number. Initial estimate position heterozygous peak (allelic bias; expected fraction reference reads)","code":""},{"path":"https://biobix.github.io/maelstRom/reference/EMfit_betabinom_popcomb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Models and estimates the allelic shift for cis-eQTL data, using beta-binomial models. — EMfit_betabinom_popcomb","text":"list containing following components: ParamVec vector containing fitted model parameters: genotype frequencies, heterozygous peak position (allelic bias), overdispersion homozygous peaks separate heterozygous control- case-peaks. GenoDF dataframe containing per-samples genotypes likelihoods according fitted model. genotypeN character vector containing likely per-sample genotypes according fitted model. nrep number iterations. quality \"!\" indicates bad quality locus fit (apparent heterozygotes)","code":""},{"path":"https://biobix.github.io/maelstRom/reference/EMfit_betabinom_robust.html","id":null,"dir":"Reference","previous_headings":"","what":"Models allelic RNAseq counts using a robust expectation-maximization fit of a beta-binomial mixture distribution — EMfit_betabinom_robust","title":"Models allelic RNAseq counts using a robust expectation-maximization fit of a beta-binomial mixture distribution — EMfit_betabinom_robust","text":"EMfit_betabinom_robust estimates, per locus, parameters assumed beta-binomial mixture model via robust expectation maximization (genotype frequencies, allelic bias .e. heterozygous pi parameter, homozygous heterozygous allelic divergence .e. respective theta- (overdispersion) parameters. fit, per-samples genotype probabilities obtained well. Optionally, fit assuming allelic bias (heterozygous pi-parameter = 0.5) performed well, purpose significant allelic bias detection via likelihood ratio test.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/EMfit_betabinom_robust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Models allelic RNAseq counts using a robust expectation-maximization fit of a beta-binomial mixture distribution — EMfit_betabinom_robust","text":"","code":"EMfit_betabinom_robust(   data_counts,   allelefreq = 0.5,   SE,   inbr = 0,   dltaco = 10^-6,   HWE = FALSE,   p_InitEst = FALSE,   ThetaInits = \"moment\",   ReEstThetas = \"moment\",   NoSplitHom = TRUE,   NoSplitHet = TRUE,   ResetThetaMin = 10^-10,   ResetThetaMax = 10^-1,   DistRob = \"Cook\",   CookMargin = 5,   LikEmpNum = 1000,   LikMargin = 0,   NumHetMin = 5,   MaxOutFrac = 0.5,   thetaTRY = c(10^-1, 10^-3, 10^-7),   fitH0 = TRUE,   FirstFewFixed = NULL,   epsabs = 0.001 )"},{"path":"https://biobix.github.io/maelstRom/reference/EMfit_betabinom_robust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Models allelic RNAseq counts using a robust expectation-maximization fit of a beta-binomial mixture distribution — EMfit_betabinom_robust","text":"data_counts Data frame. Data frame SNP reference variant counts (\"ref_count\" \"var_count\", respectively) sample (\"sample\"). allelefreq Number. Allele frequency. used pInitEst TRUE (default = 0.5) SE Number. Sequencing error rate. inbr Number. Degree inbreeding (default = 0). dltaco Number. Minimal difference 2 iterations (default = 0.001). HWE Logical. HWE used allele frequency estimation, recommended (default = FALSE). p_InitEst Logical. Calculate initial estimates pr, pv prv allelefreq, recommended (default = FALSE). ThetaInits Numeric vector, \"moment\" \"TryThree\". vector length two containing initial dispersion estimate homozygous peaks, followed one heterozygous peak, \"moment\", case moment initial estimates generated. case \"TryThree\", three initial values given thetaTRY input argument tried one yielding best fit retained. ReEstThetas String. Accepts methods \"moment\" \"simple\" arguments, case dispersions re-estimated every EM-step using moment estimate simple custom procedure respectively, used starting NoSplitHom Logical. TRUE, allow beta-binomial fits homozygotes bimodal NoSplitHet Logical. TRUE, allow beta-binomial fit heterozygotes bimodal ResetThetaMin Number. Initial theta values numeric optimization get capped minimum (e.g. case moment estimate even lower) ResetThetaMax Number. Initial theta values numeric optimization get capped maximum (e.g. case moment estimate even higher) DistRob One \"Cook\", \"CookEmp\" \"LikelyEmp\"; removes outlying heterozygous samples anyway, either checking whether difference leave-one-maximum likelihood estimates pi /theta respective full-data estimates deviate CookMargin observed standard deviations observed mean (\"Cook\"). using similar procedure calculating standard deviation mean via simulation assuming fitted full-data model 100 100 observed likelihood distance particular sample extreme LikMargin simulated distanced considered outlier. outliers disregarded final model fit parameter estimates, remain final output genotyped, marked . CookMargin Number. See DistRob. LikEmpNum Integer. See DistRob. LikMargin Integer. See DistRob. NumHetMin Integer. Minimal amount expected heterozygotes required even try perform outlier-removal (default 5). MaxOutFrac Number. Maximum allowed fraction detected outlying samples; , outlier-detection procedure disregarded (default 0.5) thetaTRY Numeric vector. See ReEstThetas, case argument equals \"TryThree\". fitH0 Logical. TRUE, performs fit assuming allelic bias (heterozygous pi-parameter = 0.5) subsequent likihood ratio test significant allelic bias.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/EMfit_betabinom_robust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Models allelic RNAseq counts using a robust expectation-maximization fit of a beta-binomial mixture distribution — EMfit_betabinom_robust","text":"list containing following components: AB estimated Allelic Bias (estimated reference read fraction heterozygous samples). AB_lrt test statistic likelihood ratio test perfectly balanced Allelic Bias (0.5). included fitH0==FALSE. AB_p p-value likelihood ratio test perfectly balanced Allelic Bias (0.5). included fitH0==FALSE. nrep number iterations. quality Indicates quality locus. \"!\" indicates bad data bad fit due apparent heterozygosity. rho_vv variant homozygote genotype frequency locus. rho_rr reference homozygote genotype frequency locus. rho_rv heterozyous genotype frequency locus. rho_vv_H0 variant homozygote genotype frequency Allelic Bias = 0.5. included fitH0==FALSE. rho_rr_H0 reference homozygote genotype frequency Allelic Bias = 0.5. included fitH0==FALSE. rho_rv_H0 heterozyous genotype frequency Allelic Bias = 0.5. included fitH0==FALSE. data_hash Data frame. Input data frame extra columns: allelefreq, (likely) genotype, genotype probabilities (prr, prv, pvv), whether data point outlier (\"Outlier\", equals 1 ) per sample. theta_hom Final overdispersion estimate homozygous peaks. theta_het Final overdispersion estimate heterozygous peak. theta_hom_H0 Final overdispersion estimate homozygous peaks Allelic Bias = 0.5. included fitH0==FALSE. theta_het_H0 Final overdispersion estimate heterozygous peak Allelic Bias = 0.5. included fitH0==FALSE. RobFlag Provides information outlier removal procedurs. Either enough heterozygotes start procedure (\"NotEnoughHet\", see NumHetMin), outliers detected (\"NoOutliers\"), many detected procedure disregarded (\"TooManyOutliers\"; see MaxOutFrac), least one outlier detected passing previous checks, fit re-done non-outlying data (\"ReFittingDone\"). GOF, GOFaltMEAN, GOFaltMEDIAN, GOFaltPERDIST, GOFaltPERDIST_S, GOFaltONLYHET, GOFexactMEAN, GOFexactMEANLOG Various Goodness--Fit heuristics.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/EMfit_betabinom_SEslack.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is a work in progress. As such, it is not exported yet; but it allows for some leniency on the sequencing error parameter, hence ","title":"This function is a work in progress. As such, it is not exported yet; but it allows for some leniency on the sequencing error parameter, hence ","text":"function work progress. , exported yet; allows leniency sequencing error parameter, hence \"SESlack\"","code":""},{"path":"https://biobix.github.io/maelstRom/reference/EMfit_betabinom_SEslack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is a work in progress. As such, it is not exported yet; but it allows for some leniency on the sequencing error parameter, hence ","text":"","code":"EMfit_betabinom_SEslack(   data_counts,   allelefreq = 0.5,   SE,   inbr = 0,   dltaco = 10^-6,   HWE = FALSE,   p_InitEst = FALSE,   ThetaInits = \"moment\",   ReEstThetas = \"moment\",   NoSplitHom = TRUE,   NoSplitHet = TRUE,   ResetThetaMin = 10^-10,   ResetThetaMax = 10^-1,   thetaTRY = c(10^-1, 10^-3, 10^-7),   fitH0 = TRUE,   SESlack = 10,   probshift_InitEst = TRUE )"},{"path":"https://biobix.github.io/maelstRom/reference/EMfit_binom.html","id":null,"dir":"Reference","previous_headings":"","what":"Models allelic RNAseq counts using an expectation-maximization fit of a binomial mixture distribution — EMfit_binom","title":"Models allelic RNAseq counts using an expectation-maximization fit of a binomial mixture distribution — EMfit_binom","text":"EMfit_binom estimates, per locus, parameters assumed binomial mixture model via expectation maximization (genotype frequencies, allelic bias .e. heterozygous p-parameter). fit, per-samples genotype probabilities obtained well. fit assuming allelic bias (heterozygous p-parameter = 0.5) performed well, purpose significant allelic bias detection via likelihood ratio test.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/EMfit_binom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Models allelic RNAseq counts using an expectation-maximization fit of a binomial mixture distribution — EMfit_binom","text":"","code":"EMfit_binom(   data_counts,   SE,   allelefreq = 0.5,   inbr = 0,   dltaco = 0.001,   HWE = FALSE,   p_InitEst = FALSE )"},{"path":"https://biobix.github.io/maelstRom/reference/EMfit_binom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Models allelic RNAseq counts using an expectation-maximization fit of a binomial mixture distribution — EMfit_binom","text":"data_counts Data frame. Data frame SNP reference variant counts (\"ref_count\" \"var_count\", respectively) sample (\"sample\"). SE Number. Sequencing error rate. allelefreq Number. Allele frequency. used pInitEst TRUE (default = 0.5) inbr Number. Degree inbreeding (default = 0). dltaco Number. Minimal difference 2 iterations (default = 0.001). HWE Logical. HWE used allele frequency estimation, recommended (default = FALSE). p_InitEst Logical. Calculate initial estimates pr, pv prv allelefreq, recommended (default = FALSE).","code":""},{"path":"https://biobix.github.io/maelstRom/reference/EMfit_binom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Models allelic RNAseq counts using an expectation-maximization fit of a binomial mixture distribution — EMfit_binom","text":"list containing following components: AB estimated allelic shift. AB_lrt test statistic likelihood ratio test. AB_p p-value likelihood ratio test. GOF goodness--fit value based corrected likelihood. nrep number iterations. quality Indicates quality locus. \"!\" indicates bad data bad fit due apparent heterozygosity. rho_vv variant (homozygote) genotype probability SNP. rho_rr reference (homozygote) genotype probability SNP. rho_rv heterozyous genotype probability SNP. rho_vv_H0 variant (homozygote) genotype probability Allelic Bias = 0.5. rho_rr_H0 reference (homozygote) genotype probability Allelic Bias = 0.5. rho_rv_H0 heterozyous genotype probability Allelic Bias = 0.5. data_hash Data frame. Input data frame extra columns: allelefreq, genotype genotype probabilities (prr, prv, pvv) per sample.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/final_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Final filtering of maelstRom analysis results and writing to output files — final_filter","title":"Final filtering of maelstRom analysis results and writing to output files — final_filter","text":"final_filter retains significantly imprinted SNPs (adjusting multiple testing) SNPs interest (suitable GOF degree (median) imprinting) chromosomes. Results allelic count files generated. file_all_counts file_impr_counts set FALSE, function can used simply filter results_df input.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/final_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Final filtering of maelstRom analysis results and writing to output files — final_filter","text":"","code":"final_filter(   data_hash,   results_df,   results_wd,   gof_filt = 1.2,   adj_p_filt = 0.05,   med_impr_filt = 0.8,   i_filt = 0.6,   file_all = TRUE,   file_impr = TRUE,   file_all_counts = FALSE,   file_impr_counts = TRUE )"},{"path":"https://biobix.github.io/maelstRom/reference/final_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Final filtering of maelstRom analysis results and writing to output files — final_filter","text":"data_hash Hash. Hash SNP positions data frame every SNP position. results_df Data frame. Results data frame columns: \"position\", \"gene\", \"LRT\", \"p\", \"estimated.\", \"allele.frequency\", \"dbSNP\", \"reference\", \"variant\", \"est_SE\", \"coverage\", \"nr_samples\", \"GOF\", \"symmetry\", \"med_impr\", est_inbreeding\", \"tot_inbreeding\". results_wd String. Directory results files written . gof_filt Number. Minimal Goodness Fit, mean(log(sample likelihood imprinted model * sample coverage + 1)) across samples locus. good (default) cutoff 0.8. adj_p_filt Number. FDR adjusted singnificance level filter (default 0.05). med_impr_filt Number. Minimal median imprinting (default 0.8). i_filt Number. Minimal degree imprinting (default 0.6). file_all Logical. file SNP information (imprinted non-imprinted SNPs) made (default TRUE). file_impr Logical. file imprinted SNP information made (default TRUE). file_all_counts Logical. file SNP counts (imprinted non-imprinted SNPs) made (default FALSE). file_impr_counts Logical. file imprinted SNP counts made (default TRUE).","code":""},{"path":"https://biobix.github.io/maelstRom/reference/final_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Final filtering of maelstRom analysis results and writing to output files — final_filter","text":"Data frame results filtered adjusted p-value, GOF, median imprinting degree imprinting.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/GOF_uniform.html","id":null,"dir":"Reference","previous_headings":"","what":"Goodness-of-fit test comparing data following a uniform distribution to a Hardy-Weinberg distribution. — GOF_uniform","title":"Goodness-of-fit test comparing data following a uniform distribution to a Hardy-Weinberg distribution. — GOF_uniform","text":"GOF_uniform determines GOF heterozygous samples HWE model.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/GOF_uniform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Goodness-of-fit test comparing data following a uniform distribution to a Hardy-Weinberg distribution. — GOF_uniform","text":"","code":"GOF_uniform(ref_counts, var_counts, allelefreq, SE, inbr = 0)"},{"path":"https://biobix.github.io/maelstRom/reference/GOF_uniform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Goodness-of-fit test comparing data following a uniform distribution to a Hardy-Weinberg distribution. — GOF_uniform","text":"ref_counts Numeric list. Reference counts. var_counts Numeric list. Variant counts. allelefreq Number. Allele frequency. SE Number. Sequencing error rate. inbr Number. Degree inbreeding (default = 0).","code":""},{"path":"https://biobix.github.io/maelstRom/reference/GOF_uniform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Goodness-of-fit test comparing data following a uniform distribution to a Hardy-Weinberg distribution. — GOF_uniform","text":"Geometric mean ratios putative heterozygous samples measure GOF.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/GOF_uniform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Goodness-of-fit test comparing data following a uniform distribution to a Hardy-Weinberg distribution. — GOF_uniform","text":"","code":"GOF_uniform(c(5, 8, 10, 3, 5, 6, 23), c(8, 8, 6, 4, 4, 10, 0), 0.5, 0.002, 0.12) #> [1] 0.3810761 GOF_uniform(c(5, 0, 0, 3, 5, 1, 23), c(1, 8, 6, 2, 0, 10, 0), 0.5, 0.002) #> [1] 0.9689088"},{"path":"https://biobix.github.io/maelstRom/reference/GradPiPi_cppi.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — GradPiPi_cppi","title":"DO SOMETHING — GradPiPi_cppi","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/GradPiPi_cppi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — GradPiPi_cppi","text":"","code":"GradPiPi_cppi(M, N, PI, THETA, MemLim, Xtra)"},{"path":"https://biobix.github.io/maelstRom/reference/GradPiPi_cppi_MP.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — GradPiPi_cppi_MP","title":"DO SOMETHING — GradPiPi_cppi_MP","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/GradPiPi_cppi_MP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — GradPiPi_cppi_MP","text":"","code":"GradPiPi_cppi_MP(M, N, PI, THETA, NecPres)"},{"path":"https://biobix.github.io/maelstRom/reference/GradPiTheta_cppi.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — GradPiTheta_cppi","title":"DO SOMETHING — GradPiTheta_cppi","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/GradPiTheta_cppi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — GradPiTheta_cppi","text":"","code":"GradPiTheta_cppi(M, N, PI, THETA, MemLim, Xtra)"},{"path":"https://biobix.github.io/maelstRom/reference/GradPiTheta_cppi_MP.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — GradPiTheta_cppi_MP","title":"DO SOMETHING — GradPiTheta_cppi_MP","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/GradPiTheta_cppi_MP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — GradPiTheta_cppi_MP","text":"","code":"GradPiTheta_cppi_MP(M, N, PI, THETA, NecPres)"},{"path":"https://biobix.github.io/maelstRom/reference/GradPi_cppi.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — GradPi_cppi","title":"DO SOMETHING — GradPi_cppi","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/GradPi_cppi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — GradPi_cppi","text":"","code":"GradPi_cppi(M, N, PI, THETA, MemLim, Xtra)"},{"path":"https://biobix.github.io/maelstRom/reference/GradPi_cppi_MP.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — GradPi_cppi_MP","title":"DO SOMETHING — GradPi_cppi_MP","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/GradPi_cppi_MP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — GradPi_cppi_MP","text":"","code":"GradPi_cppi_MP(M, N, PI, THETA, NecPres)"},{"path":"https://biobix.github.io/maelstRom/reference/GradThetaTheta_cppi.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — GradThetaTheta_cppi","title":"DO SOMETHING — GradThetaTheta_cppi","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/GradThetaTheta_cppi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — GradThetaTheta_cppi","text":"","code":"GradThetaTheta_cppi(M, N, PI, THETA, MemLim, Xtra)"},{"path":"https://biobix.github.io/maelstRom/reference/GradThetaTheta_cppi_MP.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — GradThetaTheta_cppi_MP","title":"DO SOMETHING — GradThetaTheta_cppi_MP","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/GradThetaTheta_cppi_MP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — GradThetaTheta_cppi_MP","text":"","code":"GradThetaTheta_cppi_MP(M, N, PI, THETA, NecPres)"},{"path":"https://biobix.github.io/maelstRom/reference/GradTheta_cppi.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — GradTheta_cppi","title":"DO SOMETHING — GradTheta_cppi","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/GradTheta_cppi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — GradTheta_cppi","text":"","code":"GradTheta_cppi(M, N, PI, THETA, MemLim, Xtra)"},{"path":"https://biobix.github.io/maelstRom/reference/GradTheta_cppi_MP.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — GradTheta_cppi_MP","title":"DO SOMETHING — GradTheta_cppi_MP","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/GradTheta_cppi_MP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — GradTheta_cppi_MP","text":"","code":"GradTheta_cppi_MP(M, N, PI, THETA, NecPres)"},{"path":"https://biobix.github.io/maelstRom/reference/grad_pi.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — grad_pi","title":"DO SOMETHING — grad_pi","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/grad_pi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — grad_pi","text":"","code":"grad_pi(ms, ns, pi, theta, MemLim = 2048L, Xtra = 7L)"},{"path":"https://biobix.github.io/maelstRom/reference/grad_pi_MP.html","id":null,"dir":"Reference","previous_headings":"","what":"Exact gradient of the beta-binomial log-likelihood function for pi using a multiprecision library. — grad_pi_MP","title":"Exact gradient of the beta-binomial log-likelihood function for pi using a multiprecision library. — grad_pi_MP","text":"grad_pi_MP calculates value gradient beta-binomial log-likelihood function pi given data points, avoiding numerical mistakes (catastrophic cancellations) due extreme parameter values. function called grad_pi necessary, called outside .","code":""},{"path":"https://biobix.github.io/maelstRom/reference/grad_pi_MP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exact gradient of the beta-binomial log-likelihood function for pi using a multiprecision library. — grad_pi_MP","text":"","code":"grad_pi_MP(ms, ns, piX, thetaX, NecPres)"},{"path":"https://biobix.github.io/maelstRom/reference/grad_pi_MP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exact gradient of the beta-binomial log-likelihood function for pi using a multiprecision library. — grad_pi_MP","text":"ms Numeric vector. Vector number successes ns Numeric vector. Vector number trials piX Number. Probability success; 0 >= piX >= 1 thetaX Number. Dispersion parameter; 0 >= thetaX > +Inf NecPres Number. Necessary Precision, .e. number bits, accurate gradient calculatation, determined function grad_pi","code":""},{"path":"https://biobix.github.io/maelstRom/reference/grad_pi_MP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exact gradient of the beta-binomial log-likelihood function for pi using a multiprecision library. — grad_pi_MP","text":"numeric vector length ms ns, containing gradient pi give data points","code":""},{"path":"https://biobix.github.io/maelstRom/reference/grad_pi_old.html","id":null,"dir":"Reference","previous_headings":"","what":"Exact gradient of the beta-binomial log-likelihood function for pi using sums. — grad_pi_old","title":"Exact gradient of the beta-binomial log-likelihood function for pi using sums. — grad_pi_old","text":"grad_pi_old calculates value gradient beta-binomial log-likelihood function pi given data points via number sums, slow high-value data fast low-value data. function called grad_pi necessary, called outside .","code":""},{"path":"https://biobix.github.io/maelstRom/reference/grad_pi_old.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exact gradient of the beta-binomial log-likelihood function for pi using sums. — grad_pi_old","text":"","code":"grad_pi_old(ms, ns, pi, theta)"},{"path":"https://biobix.github.io/maelstRom/reference/grad_pi_old.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exact gradient of the beta-binomial log-likelihood function for pi using sums. — grad_pi_old","text":"ms Numeric vector. Vector number successes ns Numeric vector. Vector number trials pi Number. Probability success; 0 >= pi >= 1 theta Number. Dispersion parameter; 0 >= theta > +Inf","code":""},{"path":"https://biobix.github.io/maelstRom/reference/grad_pi_old.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exact gradient of the beta-binomial log-likelihood function for pi using sums. — grad_pi_old","text":"numeric vector length ms ns, containing gradient pi give data points","code":""},{"path":"https://biobix.github.io/maelstRom/reference/grad_pi_pi.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — grad_pi_pi","title":"DO SOMETHING — grad_pi_pi","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/grad_pi_pi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — grad_pi_pi","text":"","code":"grad_pi_pi(ms, ns, pi, theta, MemLim = 2048L, Xtra = 7L)"},{"path":"https://biobix.github.io/maelstRom/reference/grad_pi_theta.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — grad_pi_theta","title":"DO SOMETHING — grad_pi_theta","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/grad_pi_theta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — grad_pi_theta","text":"","code":"grad_pi_theta(ms, ns, pi, theta, MemLim = 2048L, Xtra = 7L)"},{"path":"https://biobix.github.io/maelstRom/reference/grad_theta.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — grad_theta","title":"DO SOMETHING — grad_theta","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/grad_theta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — grad_theta","text":"","code":"grad_theta(ms, ns, pi, theta, MemLim = 2048L, Xtra = 7L)"},{"path":"https://biobix.github.io/maelstRom/reference/grad_theta_MP.html","id":null,"dir":"Reference","previous_headings":"","what":"Exact gradient of the beta-binomial log-likelihood function for theta using a multiprecision library. — grad_theta_MP","title":"Exact gradient of the beta-binomial log-likelihood function for theta using a multiprecision library. — grad_theta_MP","text":"grad_theta_MP calculates value gradient beta-binomial log-likelihood function theta given data points, avoiding numerical mistakes (catastrophic cancellations) due extreme parameter values. function called grad_theta necessary, called outside .","code":""},{"path":"https://biobix.github.io/maelstRom/reference/grad_theta_MP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exact gradient of the beta-binomial log-likelihood function for theta using a multiprecision library. — grad_theta_MP","text":"","code":"grad_theta_MP(ms, ns, piX, thetaX, NecPres)"},{"path":"https://biobix.github.io/maelstRom/reference/grad_theta_MP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exact gradient of the beta-binomial log-likelihood function for theta using a multiprecision library. — grad_theta_MP","text":"ms Numeric vector. Vector number successes ns Numeric vector. Vector number trials piX Number. Probability success; 0 >= piX >= 1 thetaX Number. Dispersion parameter; 0 >= thetaX > +Inf NecPres Number. Necessary Precision, .e. number bits, accurate gradient calculatation, determined function grad_pi","code":""},{"path":"https://biobix.github.io/maelstRom/reference/grad_theta_MP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exact gradient of the beta-binomial log-likelihood function for theta using a multiprecision library. — grad_theta_MP","text":"numeric vector length ms ns, containing gradient theta give data points","code":""},{"path":"https://biobix.github.io/maelstRom/reference/grad_theta_old.html","id":null,"dir":"Reference","previous_headings":"","what":"Exact gradient of the beta-binomial log-likelihood function for theta using sums. — grad_theta_old","title":"Exact gradient of the beta-binomial log-likelihood function for theta using sums. — grad_theta_old","text":"grad_theta_old calculates value gradient beta-binomial log-likelihood function theta given data points via number sums, slow high-value data fast low-value data. function called grad_theta necessary, called outside .","code":""},{"path":"https://biobix.github.io/maelstRom/reference/grad_theta_old.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exact gradient of the beta-binomial log-likelihood function for theta using sums. — grad_theta_old","text":"","code":"grad_theta_old(ms, ns, pi, theta)"},{"path":"https://biobix.github.io/maelstRom/reference/grad_theta_old.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exact gradient of the beta-binomial log-likelihood function for theta using sums. — grad_theta_old","text":"ms Numeric vector. Vector number successes ns Numeric vector. Vector number trials pi Number. Probability success; 0 >= pi >= 1 theta Number. Dispersion parameter; 0 >= theta > +Inf","code":""},{"path":"https://biobix.github.io/maelstRom/reference/grad_theta_old.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exact gradient of the beta-binomial log-likelihood function for theta using sums. — grad_theta_old","text":"numeric vector length ms ns, containing gradient theta give data points","code":""},{"path":"https://biobix.github.io/maelstRom/reference/grad_theta_theta.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — grad_theta_theta","title":"DO SOMETHING — grad_theta_theta","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/grad_theta_theta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — grad_theta_theta","text":"","code":"grad_theta_theta(ms, ns, pi, theta, MemLim = 2048L, Xtra = 7L)"},{"path":"https://biobix.github.io/maelstRom/reference/HWE_chisquared.html","id":null,"dir":"Reference","previous_headings":"","what":"Chi-squared test assessing the Hardy-Weinberg assumption. — HWE_chisquared","title":"Chi-squared test assessing the Hardy-Weinberg assumption. — HWE_chisquared","text":"HWE_chisquared performs per-SNP chi-squared test comparing observed genotype    frequencies expected assuming Hardy-Weinberg Equilibrium (HWE).    per-SNP corrected inbreeding coefficient used Fmedian lower    mathematically minimal possible value -q/(1-q), q minor allele frequency (.e. minimum used instead).","code":""},{"path":"https://biobix.github.io/maelstRom/reference/HWE_chisquared.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chi-squared test assessing the Hardy-Weinberg assumption. — HWE_chisquared","text":"","code":"HWE_chisquared(data, inbr = 0, results = NULL)"},{"path":"https://biobix.github.io/maelstRom/reference/HWE_chisquared.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chi-squared test assessing the Hardy-Weinberg assumption. — HWE_chisquared","text":"data List dataframe. named list per-SNP data frames (one dataframe) single chromosome, names corresponding position chromosome. list contains genotype probabilities (\"prr\", \"prv\" \"pvv\") sample (\"sample\"). inbr Number. Estimated assumed degree inbreeding within population study (default = 0). results Data frame. Data frame SNP results row, containing least chromosomal position SNP (results$position). NULL, one dataframe expected data input argument.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/HWE_chisquared.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chi-squared test assessing the Hardy-Weinberg assumption. — HWE_chisquared","text":"results input data frame appended following columns: HWEpval p-value chi-squared test. HWE_TestStat test statistic chi-squared test.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/imprinting_est.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the degree of imprinting. — imprinting_est","title":"Estimate the degree of imprinting. — imprinting_est","text":"imprinting_est estimates degree imprinting using iterative likelihood ratio tests specific SNP, going imprinting = 0 imprinting = 1 steps 0.01, performing LRTs along way (imprinting = 0), finally retaining best fit. See function pmf_impr degree imprinting entails, mathematically","code":""},{"path":"https://biobix.github.io/maelstRom/reference/imprinting_est.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the degree of imprinting. — imprinting_est","text":"","code":"imprinting_est(ref_counts, var_counts, allelefreq, SE, inbr = 0)"},{"path":"https://biobix.github.io/maelstRom/reference/imprinting_est.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the degree of imprinting. — imprinting_est","text":"ref_counts Numeric list. Reference counts. var_counts Numeric list. Variant counts. allelefreq Number. Allele frequency. SE Number. Sequencing error rate. inbr Number. Degree inbreeding (default = 0).","code":""},{"path":"https://biobix.github.io/maelstRom/reference/imprinting_est.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the degree of imprinting. — imprinting_est","text":"list containing following components: est_i estimated degree imprinting. LRT test statistic likelihood ratio test imprinting. p_value p-value likelihood ratio test imprinting. GOF_likelihood goodness--fit value based count-corrected likelihood, .e. mean log PMF-value according pmf_impr multiplied sample's coverage + 1 across samples locus.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/imprinting_est.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the degree of imprinting. — imprinting_est","text":"","code":"imprinting_est(c(5, 8, 10, 3, 5, 6, 23), c(8, 8, 6, 4, 4, 10, 0), 0.5, 0.002) #> $est_i #> [1] 0 #>  #> $LRT #> [1] 0 #>  #> $p_value #> [1] 1 #>  #> $GOF_likelihood #> [1] 0.389424 #>  imprinting_est(c(5, 0, 0, 3, 5, 1, 23), c(1, 8, 6, 2, 0, 10, 0), 0.5, 0.002, 0.12) #> $est_i #> [1] 0.81 #>  #> $LRT #> [1] 4.60567 #>  #> $p_value #> [1] 0.0159332 #>  #> $GOF_likelihood #> [1] 0.3810867 #>"},{"path":"https://biobix.github.io/maelstRom/reference/impr_LOI_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"multi-locus wrapper function for imprinting detection and loss-of-imprinting analysis — impr_LOI_analysis","title":"multi-locus wrapper function for imprinting detection and loss-of-imprinting analysis — impr_LOI_analysis","text":"impr_LOI_analysis wrapper function symmetry_gof, imprinting_est, median_imprinting, final_filter, LOItest_logreg performing maelstRom's entire (loss ) imprinting pipeline. goes following steps: Prior filtering basis allelefreq_prel column present control dataframe,   running AllelicMeta_est. Prior filtering via symmetry_gof, see documentation details. Running imprinting_est detect imprinted loci write results impr_res; includes measure median   imprinting returned function median_imprinting well. Filter impr_res significantly sufficiently imprinted loci using final_filter, perform loss--imprinting   detection using LOItest_logreg. LOI-detection results written LOI_res.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/impr_LOI_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multi-locus wrapper function for imprinting detection and loss-of-imprinting analysis — impr_LOI_analysis","text":"","code":"impr_LOI_analysis(   DataList,   SE,   inbr,   MinMinorAllelefreq = 0.15,   sym_filt = 0.05,   adj_p_filt = 0.05,   gof_filt = 0.8,   med_i_filt = 0.8,   i_filt = 0.6 )"},{"path":"https://biobix.github.io/maelstRom/reference/impr_LOI_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multi-locus wrapper function for imprinting detection and loss-of-imprinting analysis — impr_LOI_analysis","text":"DataList list containing two lists dataframes, turn contain control- case-data (order). Subsequent entries lists correspond subsequent loci (lists must size named per-locus). dataframes least contain ref_count var_count column; control dataframes also contain columns allelefreq_prel (running AllelicMeta_est), locus_id, ref, var, coverage (running prior_filter). SE Number. Sequencing error rate, population metaparameter. inbr Number. Inbreeding coefficient, population metaparameter. MinMinorAllelefreq Number. Minimal allowed minor allele frequency determinde via estimated reference allele frequency AllelicMeta_est consider locus imprinting analysis. sym_filt Number. Minimum required symmetry statistic consider locus imprinting analysis, see symmetry_gof. adj_p_filt Number. Required FDR-corrected significance level imprinting loci considered loss--imprinting detection, see function final_filter. gof_filt Number. Required minimum goodness--fit heuristic imprinted loci considered loss--imprinting detection, see function final_filter. med_i_filt Number. Required minimum median imprinting imprinted loci considered loss--imprinting detection, see functions median_imprinting final_filter. i_filt Number. Required minimum estimated imprinting imprinted loci considered loss--imprinting detection, see functions imprinting_est final_filter.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/impr_LOI_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"multi-locus wrapper function for imprinting detection and loss-of-imprinting analysis — impr_LOI_analysis","text":"list containing following components: impr_res Results imprinting detection analysis, containing, every locus: positionThe locus' name, according names(DataList) LRTThe test statistic likelihood ratio test imprinting (see imprinting_est). pThe p-value likelihood ratio test imprinting (see imprinting_est). estimated.iThe estimated degree imprinting (see imprinting_est). allele.frequencyReference allele frequency estimated AllelicMeta_est, already given input. referenceReference allele nucleotide. variantVariant allele nucleotide. med_covMedian coverage (reference + variant) across locus. nr_samplesNumber samples (total reference + variant read count least 1) covering locus. GOFGoodness--fit heuristic determined imprinting_est. symmetrySymmetry statistic determined symmetry_gof. med_imprMedian imprinting determined median_imprinting. LOI_res dataframe containing, loci fitting well maelstRom's imprinting model (see imprinting_est, determined gof_filt) significantly (determined adj_p_filt input) suffiently (determined i_filt med_i_filt) imprinted, results differential imprinting analysis (equals loss imprinting less imprinting cases). contains columns impr_res, supplemented : DI_pvalThe p-value testing differential imprinting using logistic regression, see documentation LOItest_logreg details.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/LikelyDistsHet.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns parameter- and likelihood-distances based on leave-on-out (case-deletion) MLE's of EMfit_betabinom_robust's fitted model — LikelyDistsHet","title":"Returns parameter- and likelihood-distances based on leave-on-out (case-deletion) MLE's of EMfit_betabinom_robust's fitted model — LikelyDistsHet","text":"LikelyDistsHet mainly internal use EMfit_betabinom_robust. assists robustifying function's EM-fit iteratively re-fitting model entire input dataset except one point, difference heterozygous pi- theta-estimates likelihoods logged. difference respective full-data fit counterparts measure left-data point's influence model fit; either one sufficiently high data point considered outlier.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/LikelyDistsHet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns parameter- and likelihood-distances based on leave-on-out (case-deletion) MLE's of EMfit_betabinom_robust's fitted model — LikelyDistsHet","text":"","code":"LikelyDistsHet(   ref_counts,   var_counts,   sprv,   parvec_cur,   NoSplitHet,   ResetThetaMin,   ResetThetaMax,   SE,   ReEstPars = FALSE )"},{"path":"https://biobix.github.io/maelstRom/reference/LikelyDistsHet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns parameter- and likelihood-distances based on leave-on-out (case-deletion) MLE's of EMfit_betabinom_robust's fitted model — LikelyDistsHet","text":"ref_counts Numeric vector. reference counts. var_counts Numeric vector. variant counts. sprv Numeric vector. sample's EM-weight reflecting likelihood part heterozygous population. parvec_cur Numeric vector. Pi theta (order) heterozyous peak full-data fit. NoSplitHet Logical. TRUE, allow beta-binomial fit heterozygotes bimodal ResetThetaMin Number. Initial theta values numeric optimization get capped minimum (e.g. case moment estimate even lower) ResetThetaMax Number. Initial theta values numeric optimization get capped maximum (e.g. case moment estimate even higher) SE Number. Sequencing error rate. ReEstPars Logical. TRUE, re-estimates parvec_cur given ref_counts var_counts. useless actual counts full dataset, useful emperical approach \"expected\" parameter- likelihood-distances assumed model 100 correct simulated drawing ref_counts var_counts assumed model (see EMfit_betabinom_robust)","code":""},{"path":"https://biobix.github.io/maelstRom/reference/LikelyDistsHet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns parameter- and likelihood-distances based on leave-on-out (case-deletion) MLE's of EMfit_betabinom_robust's fitted model — LikelyDistsHet","text":"list containing following components: LikDists vector containing likelihood distances per sample (2 times full-data log-likelihood minus re-fitted log-likelihood leaving sample). PiDists vector containing pi distances per sample (leave-sample-refitted pi minus full-data pi). ThetaDists vector containing theta distances per sample (leave-sample-refitted theta minus full-data theta).","code":""},{"path":"https://biobix.github.io/maelstRom/reference/LogGaussianQuad_CPP.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — LogGaussianQuad_CPP","title":"DO SOMETHING — LogGaussianQuad_CPP","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/LogGaussianQuad_CPP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — LogGaussianQuad_CPP","text":"","code":"LogGaussianQuad_CPP(lower, upper, a, b, q, TC, RC, curTR, curRC, Wvec, Nvec)"},{"path":"https://biobix.github.io/maelstRom/reference/LogNewtonCotes_CPP.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — LogNewtonCotes_CPP","title":"DO SOMETHING — LogNewtonCotes_CPP","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/LogNewtonCotes_CPP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — LogNewtonCotes_CPP","text":"","code":"LogNewtonCotes_CPP(lower, upper, a, b, q, TC, RC, curTR, curRC, Wvec)"},{"path":"https://biobix.github.io/maelstRom/reference/logSums_MaxMethodSigned_CPP.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — logSums_MaxMethodSigned_CPP","title":"DO SOMETHING — logSums_MaxMethodSigned_CPP","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/logSums_MaxMethodSigned_CPP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — logSums_MaxMethodSigned_CPP","text":"","code":"logSums_MaxMethodSigned_CPP(logvec, signvec)"},{"path":"https://biobix.github.io/maelstRom/reference/logSums_MaxMethod_CPP.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — logSums_MaxMethod_CPP","title":"DO SOMETHING — logSums_MaxMethod_CPP","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/logSums_MaxMethod_CPP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — logSums_MaxMethod_CPP","text":"","code":"logSums_MaxMethod_CPP(logvec)"},{"path":"https://biobix.github.io/maelstRom/reference/logSums_MaxMethod_CPP_R.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — logSums_MaxMethod_CPP_R","title":"DO SOMETHING — logSums_MaxMethod_CPP_R","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/logSums_MaxMethod_CPP_R.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — logSums_MaxMethod_CPP_R","text":"","code":"logSums_MaxMethod_CPP_R(logvec)"},{"path":"https://biobix.github.io/maelstRom/reference/LogTanhSinhQuad_CPP.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — LogTanhSinhQuad_CPP","title":"DO SOMETHING — LogTanhSinhQuad_CPP","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/LogTanhSinhQuad_CPP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — LogTanhSinhQuad_CPP","text":"","code":"LogTanhSinhQuad_CPP(lower, upper, n, a, b, q, TC, RC, curTR, curRC, prec)"},{"path":"https://biobix.github.io/maelstRom/reference/LogTrapezoidalInt_CPP.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — LogTrapezoidalInt_CPP","title":"DO SOMETHING — LogTrapezoidalInt_CPP","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/LogTrapezoidalInt_CPP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — LogTrapezoidalInt_CPP","text":"","code":"LogTrapezoidalInt_CPP(lower, upper, n, a, b, q, TC, RC, curTR, curRC)"},{"path":"https://biobix.github.io/maelstRom/reference/LOItest_logreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Logistic regression on the degree of heterozygosity between cases and controls — LOItest_logreg","title":"Logistic regression on the degree of heterozygosity between cases and controls — LOItest_logreg","text":"LOItest_logreg performs logistic regression degree heterozygosity cases compared control samples.     tests whether significant difference (p-value) fraction heterozygous samples     cases versus controls, (case higher fraction cases) can indicate loss imprinting.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/LOItest_logreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logistic regression on the degree of heterozygosity between cases and controls — LOItest_logreg","text":"","code":"LOItest_logreg(   ref_counts_ctrl,   var_counts_ctrl,   ref_counts_case,   var_counts_case )"},{"path":"https://biobix.github.io/maelstRom/reference/LOItest_logreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logistic regression on the degree of heterozygosity between cases and controls — LOItest_logreg","text":"ref_counts_ctrl, var_counts_ctrl Numeric vectors. Reference variant counts control samples. ref_counts_case, var_counts_case Numeric vectors. Reference variant counts case samples.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/LOItest_logreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logistic regression on the degree of heterozygosity between cases and controls — LOItest_logreg","text":"Beta-value (beta) p-value (p.value) generalised linear model comparing fraction heterozygous samples     cases versus controls.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/LOItest_logreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logistic regression on the degree of heterozygosity between cases and controls — LOItest_logreg","text":"","code":"LOItest_logreg(c(5, 8, 10, 3, 5, 6, 23), c(8, 8, 6, 4, 4, 10, 0),     c(5, 0, 0, 3, 5, 1, 23), c(1, 8, 6, 2, 0, 10, 0)) #> $beta #> [1] -1.954278 #>  #> $p.value #> [1] 3.152053e-05 #>"},{"path":"https://biobix.github.io/maelstRom/reference/LOI_calling.html","id":null,"dir":"Reference","previous_headings":"","what":"Call LOI samples over al imprinted loci. — LOI_calling","title":"Call LOI samples over al imprinted loci. — LOI_calling","text":"LOI_calling calls LOI samples based binomial p-value.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/LOI_calling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call LOI samples over al imprinted loci. — LOI_calling","text":"","code":"LOI_calling(data_hash, samples_all, SE)"},{"path":"https://biobix.github.io/maelstRom/reference/LOI_calling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call LOI samples over al imprinted loci. — LOI_calling","text":"data_hash Hash. Hash SNP positions data frame every position least columns allelic counts (\"\", \"T\", \"C\", \"G\"), reference variants counts (\"ref_count\" \"var_count\", respectively) sample ids (\"samples\"). samples_all Character list. List sample names. SE Number. Sequencing error rate.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/LOI_calling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call LOI samples over al imprinted loci. — LOI_calling","text":"Data frame LOI calls per samples. data frame contains sample ids (\"samples\"), number least    expressed alleles (\"least\" \"\", respectively), quality check (\"warning\"), binomial p-values (\"binom\"),    FDR adjusted p-values (\"FDR\") LOI vs LOI calls (\"geno\"). \"!\" warning column indicates    non-standard alleles standard alleles present sample (count least 2).","code":""},{"path":"https://biobix.github.io/maelstRom/reference/maelstRom.html","id":null,"dir":"Reference","previous_headings":"","what":"maelstRom: A package for RNAseq-based allelic analyses — maelstRom","title":"maelstRom: A package for RNAseq-based allelic analyses — maelstRom","text":"Detection imprinting, loss imprinting, cis-eQTLS differential allelic imbalance.","code":""},{"path":[]},{"path":"https://biobix.github.io/maelstRom/reference/maelstRom_ADChromplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a plot summarizing allelic divergence (-related phenomena) across a chromosome — maelstRom_ADChromplot","title":"Make a plot summarizing allelic divergence (-related phenomena) across a chromosome — maelstRom_ADChromplot","text":"maelstRom_ADChromplot returns various ggplot-objects visualizing maelstRom's differential allelic divergence results across chromosome, together differential expression logFC can determined using RNAseq data, well (optionally) methylation- copy-number-alteration-data available. data supplied separate dataframes, enables plotting even data missing loci genes.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/maelstRom_ADChromplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a plot summarizing allelic divergence (-related phenomena) across a chromosome — maelstRom_ADChromplot","text":"","code":"maelstRom_ADChromplot(   AD_Data,   DE_Data,   Meth_Data = NULL,   CNAgain_Data = NULL,   CNAloss_Data = NULL,   pvalSIG = 0.05,   roll_median = 15 )"},{"path":"https://biobix.github.io/maelstRom/reference/maelstRom_ADChromplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a plot summarizing allelic divergence (-related phenomena) across a chromosome — maelstRom_ADChromplot","text":"AD_Data Dataframe. least contain chromosomal position (\"pos\"), overdispersion controls cases expressed rho lies 0 1 (\"rho_control\", \"rho_case\") p-value testing differential allelic divergence (difference overdispersion parameter controls cases; \"pval\") DE_Data Dataframe. least contain chromosomal position (\"pos\") log(2)FC expression cases controls (\"logFC\") Meth_Data Dataframe. Optional; least contain chromosomal position (\"pos\") p-value testing case hypermethylation (\"logFC\") CNAgain_Data Dataframe. Optional; least contain chromosomal position (\"pos\") average gain cases (\"CNAgain\") CNAloss_Data Dataframe. Optional; least contain chromosomal position (\"pos\") average loss cases (\"CNAloss\") pvalSIG Number. Significance cutoff provided p-values (FDR-corrected advance) roll_median integer. measures plotted rolling medians across roll_median data points. allelefreq Number. Allele frequency.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/maelstRom_ADChromplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a plot summarizing allelic divergence (-related phenomena) across a chromosome — maelstRom_ADChromplot","text":"list containing following components: ADDE_plot plot vizualizing Allelic Divergence Differential Expression results. MethCNA_plot plot vizualizing hypermethylation copy-number-alteration results. LEG1, LEG2, LEG3 Various legend items, combined ADDE_plot MethCNA_plot user desires, e.g. using patchwork package.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/maelstRom_EMfitplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot maelstRom's EM-fit results. — maelstRom_EMfitplot","title":"Plot maelstRom's EM-fit results. — maelstRom_EMfitplot","text":"maelstRom_EMfitplot plots results maelstRom's beta-binomial EM-fit. specifically, plots observed reference allele fractions histogram (optionally scaled single total count parameter, see ScaleHist ScaleCount) parameters yielded EM-fit beta-binomial PMFs (assuming total read counts ScaleCount compressed zero--one interval reference allele fraction instead integer reference counts). Optionally, unshifted fit assuming allelic bias (heterozygous pi-parameter = 0.5) plotted well, plot_NoShift TRUE distributional parameters provided input.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/maelstRom_EMfitplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot maelstRom's EM-fit results. — maelstRom_EMfitplot","text":"","code":"maelstRom_EMfitplot(   ref_counts = NULL,   var_counts = NULL,   pr = NULL,   prv = NULL,   pv = NULL,   theta_hom = NULL,   theta_het = NULL,   pr_NoShift = NULL,   prv_NoShift = NULL,   pv_NoShift = NULL,   theta_hom_NoShift = NULL,   theta_het_NoShift = NULL,   probshift,   SE,   MinCount = 0,   ScaleCount = 50,   ScaleHist = FALSE,   nbins = 100,   plot_NoShift = FALSE,   SplitPeaks = TRUE,   ShiftCols = NULL,   NoShiftCol = NULL,   wd_res = NULL,   chr = \"\",   position = \"\",   gene = \"\",   DataList_out = NULL,   Geno_AB_res = NULL,   dAD_res = NULL,   PlotWhich = \"choose\",   BG = \"#F2F2F2\" )"},{"path":"https://biobix.github.io/maelstRom/reference/maelstRom_EMfitplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot maelstRom's EM-fit results. — maelstRom_EMfitplot","text":"ref_counts Numeric vector. Reference counts. var_counts Numeric vector. Variant counts. pr Number. Reference homozygote genotype probability locus. prv Number. Heterozygote genotype probability locus. pv Number. Variant homozygote genotype probability locus. theta_hom Number. dispersion parameter homozygous peaks. theta_het Number. dispersion parameter heterozygous peak. pr_NoShift Number. Reference homozygote genotype probability locus null hypothesis fit (allelic bias; heterozygous pi-parameter = 0.5). prv_NoShift Number. Heterozygote genotype probability locus null hypothesis fit (allelic bias; heterozygous pi-parameter = 0.5). pv_NoShift Number. Variant homozygote genotype probability locus null hypothesis fit (allelic bias; heterozygous pi-parameter = 0.5). theta_hom_NoShift Number. dispersion parameter homozygous peaks null hypothesis fit (allelic bias; heterozygous pi-parameter = 0.5). theta_het_NoShift Number. dispersion parameter heterozygous peak null hypothesis fit (allelic bias; heterozygous pi-parameter = 0.5). probshift Number. reference allele fraction heterozygotes, indicating allelic bias deviating 0.5 SE Number. Sequencing error rate. MinCount Number. minimal count filter plotting ; samples lower count included plotted histogram. ScaleCount Number. Even though observed number reads can vary per sample, assume single number observed reads plot PMFs. One can opt pick set value (default 50) e.g. use locus' median mean coverage , best correspond observed data. ScaleHist Logical. See remark given ScaleCount; TRUE, tranforms input data total allele counts ScaleCount, actual number reference reads determined quantile function assuming ScaleCount total counts probability observed data (probability calculated actually observed number counts). idea better reflect well observed data corresponds fitted PMF, plotted single number observed reads. nbins Number. Number bins histogram depicting observed reference allele fractions. plot_NoShift Logical. TRUE, also plots PMF unshifted fit (allelic bias; heterozygous pi-parameter = 0.5) SplitPeaks Logical. TRUE, PMFs homozygotes heterozygotes plotted seperately using different colors. FALSE, one total PMF mixture model plotted. ShiftCols String (vector). Colors plotted PMFs fit incorporating allelic bias. Three values required SplitPeaks TRUE, otherwise just one value required. Default colors used case none given input. NoShiftCol String. Color unshifted PMF (allelic bias; heterozygous pi-parameter = 0.5). option split peaks unshifted fit make final figure way clustered, one color value required. default color used case non given input. wd_res String. Working directory plots saved; non given, plot (ggplot2 object) returned instead. chr Number. Chromosome locus, used naming output file wd_res given. position Number. Position locus, used naming output file wd_res given. gene String. Gene locus part , used naming output file wd_res given; optional. DataList_out Dataframe. Alternatively, maelstRom_EMfitplot accepts dataframes containing per-sample data locus interest. , can infer ref_counts, var_counts, pr_NoShift, prv_NoShift pv_NoShift arguments. possible long EMfit_betabinom_robust run dataframe fitH0 argument set TRUE. Geno_AB_res Dataframe 1 row. Alternatively, maelstRom_EMfitplot accepts dataframe containing beta-binomial mixture model EM-fit results calling EMfit_betabinom_robust's wrapper function BetaBinomGenotyping. , expected columns listed BetaBinomGenotyping's help page, specifically produced Geno_AB_res output. one row provided must correspond locus interest. , maelstRom_EMfitplot can infer pr, prv, pv, theta_hom, theta_het, theta_hom_NoShift, theta_het_NoShift probshift arguments. dAD_res Dataframe 1 row. Alternatively, maelstRom_EMfitplot accepts dataframe containing beta-binomial mixture model EM-fit results calling EMfit_betabinom_popcomb's wrapper function dAD_analysis. , expected columns listed dAD_analysis's help page, specifically produced dAD_res output. one row provided must correspond locus interest. , maelstRom_EMfitplot can infer pr, prv, pv, theta_hom, theta_het, probshift arguments. \"NoShift\" case can plotted scenario, dAD-detection happens without AB-detection. dAD_res NULL, Geno_AB_res NULL vice-versa. Also, using dAD_res, need specify whether plot controls cases using PlotWhich argument. PlotWhich String. Either \"control\" \"case\", know data fetch dAD_res plotting. dataframe given DataList_out argument course corresponding population.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/maelstRom_imprintplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot maelstRom's imprinting detection results. — maelstRom_imprintplot","title":"Plot maelstRom's imprinting detection results. — maelstRom_imprintplot","text":"maelstRom_imprintplot plots results maelstRom's imprinting detection analysis. specifically, plots histogram observed reference allele fraction, als well PMF fitted imprinted model, binomial mixture model using heterozygous peak variant bias (p-parameter = 0.5) split according fitted degree imprinting (see imprinting_est fitting procedure pmf_impr imprinted pmf). Optionally, non-imprinted fit (just binomial mixture model without variant bias) plotted well, plot_NoImpr TRUE.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/maelstRom_imprintplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot maelstRom's imprinting detection results. — maelstRom_imprintplot","text":"","code":"maelstRom_imprintplot(   ref_counts,   var_counts,   allelefreq,   impr,   SE,   inbr = 0,   PlotCov = 50,   plot_NoImpr = FALSE,   SplitPeaks = FALSE,   ImprCols = NULL,   NoImprCol = NULL,   wd_res = NULL,   chr = \"\",   position = \"\",   gene = \"\" )"},{"path":"https://biobix.github.io/maelstRom/reference/maelstRom_imprintplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot maelstRom's imprinting detection results. — maelstRom_imprintplot","text":"ref_counts Numeric vector. Reference counts locus. var_counts Numeric vector. Variant counts locus. allelefreq Number. Allele frequency. impr Number. Degree imprinting. SE Number. Sequencing error rate. inbr Number. Degree inbreeding (default = 0). PlotCov Number. Even though observed number reads can vary per sample, assume single number observed reads plot imprinting PMFs. One can opt pick set value (default 50) e.g. use locus' median mean coverage , best correspond observed data. SplitPeaks Logical.  TRUE, PMFs homozygotes heterozygotes plotted seperately using different colors. FALSE, one total imprinted PMF plotted. NoImprCol String. Color non-imprinted PMF (also allelic bias; heterozygous binomial p-parameter = 0.5). option split peaks PMF make final figure way clustered, one color value required. default color used case non given input. wd_res String. Working directory plots saved; non given, plot (ggplot2 object) returned instead. chr Number. Chromosome locus, used naming outpud file wd_res given. position Number. Position locus, used naming outpud file wd_res given. gene String. Gene locus part , used naming outpud file wd_res given; optional. Plot_NoImpr Logical. TRUE, also plot non-imprintend PMF (binomial mixture model without variant bias .e. binomial p-parameter heterozygotes = 0.5) ImrCols String (vector). Colors plotted PMFs imprinted fit. Three values required SplitPeaks TRUE, otherwise just one value required. Default colors used case none given input.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/median_AB.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the median allelic bias — median_AB","title":"Calculates the median allelic bias — median_AB","text":"median_AB calculates median allelic bias given locus, .e. heterozygous reference allele ratio. ordering samples according degree heterozygosity (.e. minor major allele count), calculating location \"median heterozyogous sample\" assuming HWE given input parameters (allelefreq, inbr) round(number samples \\* allelefreq \\* (1 - allelefreq) \\* (1 - inbr)), 2 times unrounded number expected number heterozygotes. median heterozygous observation, allelic bias returned (reference total allele ratio).","code":""},{"path":"https://biobix.github.io/maelstRom/reference/median_AB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the median allelic bias — median_AB","text":"","code":"median_AB(ref_counts, var_counts, allelefreq, inbr = 0)"},{"path":"https://biobix.github.io/maelstRom/reference/median_AB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the median allelic bias — median_AB","text":"ref_counts Numeric vector. Reference counts. var_counts Numeric vector. Variant counts. allelefreq Number. Allele frequency. inbr Number. Inbreeding coefficient (default = 0).","code":""},{"path":"https://biobix.github.io/maelstRom/reference/median_AB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the median allelic bias — median_AB","text":"Median heterozygous allelic bias ref_counts var_counts taking account allelefreq inbr.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/median_AB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the median allelic bias — median_AB","text":"","code":"median_AB(c(5, 8, 10, 3, 5, 6, 23), c(8, 8, 6, 4, 4, 10, 0), 0.5, 0.12) #> [1] 0.5555556 median_AB(c(5, 0, 0, 3, 5, 1, 23), c(1, 8, 6, 2, 0, 10, 0), 0.5, 0.12) #> [1] 0.8333333 median_AB(c(5, 0, 0, 3, 5, 1, 23), c(1, 8, 6, 2, 0, 10, 0), 0.5) #> [1] 0.8333333"},{"path":"https://biobix.github.io/maelstRom/reference/median_imprinting.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate median imprinting. — median_imprinting","title":"Calculate median imprinting. — median_imprinting","text":"median_imprinting calculates median imprinting allelic counts locus. ordering samples according degree heterozygosity (.e. minor major allele count), calculating location \"median heterozyogous sample\" assuming HWE given input parameters (allelefreq, inbr) round(number samples \\* allelefreq \\* (1 - allelefreq) \\* (1 - inbr)), 2 times unrounded number expected number heterozygotes. median heterozygous observation, degree imprining returned 2 \\* (0.5 - minor major allele count).","code":""},{"path":"https://biobix.github.io/maelstRom/reference/median_imprinting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate median imprinting. — median_imprinting","text":"","code":"median_imprinting(ref_counts, var_counts, allelefreq, inbr = 0)"},{"path":"https://biobix.github.io/maelstRom/reference/median_imprinting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate median imprinting. — median_imprinting","text":"ref_counts Numeric vector. Reference counts. var_counts Numeric vector. Variant counts. allelefreq Number. Allele frequency. inbr Number. Inbreeding coefficient (default = 0).","code":""},{"path":"https://biobix.github.io/maelstRom/reference/median_imprinting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate median imprinting. — median_imprinting","text":"Median degree imprinting ref_counts var_counts taking account allelefreq inbr.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/median_imprinting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate median imprinting. — median_imprinting","text":"","code":"median_imprinting(c(5, 8, 10, 3, 5, 6, 23), c(8, 8, 6, 4, 4, 10, 0), 0.5, 0.12) #> [1] -0.6 median_imprinting(c(5, 0, 0, 3, 5, 1, 23), c(1, 8, 6, 2, 0, 10, 0), 0.5, 0.12) #> [1] 0.6 median_imprinting(c(5, 0, 0, 3, 5, 1, 23), c(1, 8, 6, 2, 0, 10, 0), 0.5) #> [1] 0.6"},{"path":"https://biobix.github.io/maelstRom/reference/MomentEst_MixedBetaBinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates moment estimates for the beta-binomial parameters given observed data — MomentEst_MixedBetaBinom","title":"Calculates moment estimates for the beta-binomial parameters given observed data — MomentEst_MixedBetaBinom","text":"MomentEst_MixedBetaBinom calculates moment estimates pi- theta-parameters beta-binomial data, given data varying number observations. estimator previously described (Kleinman 1973) , adapted weighted (according likely sample homozygous reference, homozygous variant, heterozygous) estimator used expectation-maximization-framework. Due varying number observations, moment estimate actually rather tricky incorporate additional per-sample weight tuned via iterative procedure, given function's aim just obtaining rough estimate starting point numerical expectation maximization, weights set one (corresponds ideal weights case true theta equals zero).","code":""},{"path":"https://biobix.github.io/maelstRom/reference/MomentEst_MixedBetaBinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates moment estimates for the beta-binomial parameters given observed data — MomentEst_MixedBetaBinom","text":"","code":"MomentEst_MixedBetaBinom(   ref_counts,   var_counts,   spr,   spv,   sprv,   pi_hom_fix = NULL,   pi_het_fix = NULL )"},{"path":"https://biobix.github.io/maelstRom/reference/MomentEst_MixedBetaBinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates moment estimates for the beta-binomial parameters given observed data — MomentEst_MixedBetaBinom","text":"ref_counts Numeric vector. Reference counts. var_counts Numeric vector. Variant counts. spr Numeric vector. Chances samples reference homozygotes spv Numeric vector. Chances samples variant homozygotes sprv Numeric vector. Chances samples heterozygotes pi_hom_fix Number. set value, fixes pi-parameter homozygous peaks instead generating moment estimate; option moment estimate theta-parameter depends pi-parameter. pi_het_fix Number. set value, fixes pi-parameter heterozygous peak instead generating moment estimate; option moment estimate theta-parameter depends pi-parameter.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/MomentEst_MixedBetaBinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates moment estimates for the beta-binomial parameters given observed data — MomentEst_MixedBetaBinom","text":"named vector containing moment estimates pi- theta-parameters homozygous heterozygous peaks.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/MomentEst_MixedBetaBinom.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates moment estimates for the beta-binomial parameters given observed data — MomentEst_MixedBetaBinom","text":"Kleinman JC (1973). “Proportions extraneous variance: single independent samples.” Journal American Statistical Association, 68(341), 46–54.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/MomentEst_MixedBetaBinom_SESlack.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is a work in progress. As such, it is not exported yet; but it allows for some leniency on the sequencing error parameter, hence ","title":"This function is a work in progress. As such, it is not exported yet; but it allows for some leniency on the sequencing error parameter, hence ","text":"function work progress. , exported yet; allows leniency sequencing error parameter, hence \"SESlack\"","code":""},{"path":"https://biobix.github.io/maelstRom/reference/MomentEst_MixedBetaBinom_SESlack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is a work in progress. As such, it is not exported yet; but it allows for some leniency on the sequencing error parameter, hence ","text":"","code":"MomentEst_MixedBetaBinom_SESlack(   ref_counts,   var_counts,   spr,   spv,   sprv,   pi_RR_fix = NULL,   pi_VV_fix = NULL,   pi_het_fix = NULL )"},{"path":"https://biobix.github.io/maelstRom/reference/MPhelper_GradThetaTheta.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — MPhelper_GradThetaTheta","title":"DO SOMETHING — MPhelper_GradThetaTheta","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/MPhelper_GradThetaTheta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — MPhelper_GradThetaTheta","text":"","code":"MPhelper_GradThetaTheta(M, N, PI, NecPres)"},{"path":"https://biobix.github.io/maelstRom/reference/multinomial_coeff.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate multinomial coefficient(s). — multinomial_coeff","title":"Calculate multinomial coefficient(s). — multinomial_coeff","text":"multinomial_coeff calculates multinomial coefficients given locus data, mainly internal use imprinting_est.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/multinomial_coeff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate multinomial coefficient(s). — multinomial_coeff","text":"","code":"multinomial_coeff(ref_counts, var_counts)"},{"path":"https://biobix.github.io/maelstRom/reference/multinomial_coeff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate multinomial coefficient(s). — multinomial_coeff","text":"ref_counts Numeric vector. Reference count(s). var_counts Numeric vector. Variant count(s).","code":""},{"path":"https://biobix.github.io/maelstRom/reference/multinomial_coeff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate multinomial coefficient(s). — multinomial_coeff","text":"multinomial coefficient(s) ref_counts var_counts.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/multinomial_coeff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate multinomial coefficient(s). — multinomial_coeff","text":"","code":"multinomial_coeff(5, 11) #> Big Rational ('bigq') : #> [1] 4368 multinomial_coeff(c(5, 8, 10, 3, 5, 6, 23), c(8, 8, 6, 4, 4, 10, 0)) #> Big Rational ('bigq') object of length 7: #> [1] 1287  12870 8008  35    126   8008  1"},{"path":"https://biobix.github.io/maelstRom/reference/MyOptTest.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — MyOptTest","title":"DO SOMETHING — MyOptTest","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/MyOptTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — MyOptTest","text":"","code":"MyOptTest(parX)"},{"path":"https://biobix.github.io/maelstRom/reference/pmf_betabinomMix.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability Mass Function of the beta-binomial mixture distribution modeling population-level RNAseq data — pmf_betabinomMix","title":"Probability Mass Function of the beta-binomial mixture distribution modeling population-level RNAseq data — pmf_betabinomMix","text":"pmf_betabinomMix calculates probability observing given population-level RNAseq data (.e. reference- variant counts one samples) assuming beta-binomial mixture model parameter values determined input. specifically, formula used (using maelstRom's dBetaBinom function): pr * dBetaBinom(ref_counts, ref_counts + var_counts, pi = 1 - SE, theta = theta_hom, LOG = FALSE) + pv * dBetaBinom(var_counts, ref_counts + var_counts, pi = 1 - SE, theta = theta_hom, LOG = FALSE) + prv * dBetaBinom(ref_counts, ref_counts + var_counts, pi = probshift, theta = theta_het, LOG = FALSE)","code":""},{"path":"https://biobix.github.io/maelstRom/reference/pmf_betabinomMix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability Mass Function of the beta-binomial mixture distribution modeling population-level RNAseq data — pmf_betabinomMix","text":"","code":"pmf_betabinomMix(   ref_counts,   var_counts,   probshift,   SE,   pr,   pv,   prv,   theta_hom,   theta_het )"},{"path":"https://biobix.github.io/maelstRom/reference/pmf_betabinomMix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability Mass Function of the beta-binomial mixture distribution modeling population-level RNAseq data — pmf_betabinomMix","text":"ref_counts Number Numeric vector Reference count(s). var_counts Number Numeric vector. Variant count(s). probshift Number. reference allele fraction heterozygotes, indicating allelic bias deviating 0.5 SE Number. Sequencing error rate. pr Number. Reference homozygote genotype probability locus. pv Number. Variant homozygote genotype probability locus. prv Number. Heterozygote genotype probability locus. theta_hom Number. dispersion parameter homozygous peaks. theta_het Number. dispersion parameter heterozygous peak.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/pmf_betabinomMix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability Mass Function of the beta-binomial mixture distribution modeling population-level RNAseq data — pmf_betabinomMix","text":"Probability observing ref_counts var_counts","code":""},{"path":"https://biobix.github.io/maelstRom/reference/pmf_betabinomMix_SEslack.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is a work in progress. As such, it is not exported yet; but it allows for some leniency on the sequencing error parameter, hence ","title":"This function is a work in progress. As such, it is not exported yet; but it allows for some leniency on the sequencing error parameter, hence ","text":"function work progress. , exported yet; allows leniency sequencing error parameter, hence \"SESlack\"","code":""},{"path":"https://biobix.github.io/maelstRom/reference/pmf_betabinomMix_SEslack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is a work in progress. As such, it is not exported yet; but it allows for some leniency on the sequencing error parameter, hence ","text":"","code":"pmf_betabinomMix_SEslack(   ref_counts,   var_counts,   probshift,   piRR,   piVV,   pr,   pv,   prv,   theta_RR,   theta_VV,   theta_het )"},{"path":"https://biobix.github.io/maelstRom/reference/pmf_binomMix.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability Mass Function of the binomial mixture distribution modeling population-level RNAseq data — pmf_binomMix","title":"Probability Mass Function of the binomial mixture distribution modeling population-level RNAseq data — pmf_binomMix","text":"pmf_binomMix calculates probability observing given population-level RNAseq data (.e. reference- variant counts one samples) assuming binomial mixture model parameter values determined input. specifically, formula used : pr * dbinom(ref_counts, ref_counts + var_counts, prob = 1 - SE) + pv * dbinom(var_counts, ref_counts + var_counts, prob = 1 - SE) + prv * dbinom(ref_counts, ref_counts + var_counts, prob = probshift)","code":""},{"path":"https://biobix.github.io/maelstRom/reference/pmf_binomMix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability Mass Function of the binomial mixture distribution modeling population-level RNAseq data — pmf_binomMix","text":"","code":"pmf_binomMix(ref_counts, var_counts, probshift, SE, pr, pv, prv)"},{"path":"https://biobix.github.io/maelstRom/reference/pmf_binomMix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability Mass Function of the binomial mixture distribution modeling population-level RNAseq data — pmf_binomMix","text":"ref_counts Number Numeric vector Reference count(s). var_counts Number Numeric vector. Variant count(s). probshift Number. reference allele fraction heterozygotes, indicating allelic bias deviating 0.5 SE Number. Sequencing error rate. pr Number. Reference homozygote genotype probability locus. pv Number. Variant homozygote genotype probability locus. prv Number. Heterozygote genotype probability locus.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/pmf_binomMix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability Mass Function of the binomial mixture distribution modeling population-level RNAseq data — pmf_binomMix","text":"Probability observing ref_counts var_counts","code":""},{"path":"https://biobix.github.io/maelstRom/reference/pmf_binomMix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability Mass Function of the binomial mixture distribution modeling population-level RNAseq data — pmf_binomMix","text":"","code":"pmf_binomMix(10, 10, 0.5, 0.002, 0.25, 0.25, 0.5) #> [1] 0.08809853 pmf_binomMix(0, 10, 0.8, 0.002, 0.25, 0.25, 0.5) #> [1] 0.2450448 pmf_binomMix(c(5, 8, 10, 3, 5, 6, 23), c(8, 8, 6, 4, 4, 10, 0), 0.8, 0.002, 0.25, 0.25, 0.5) #> [1] 0.0005398069 0.0027638115 0.0275152785 0.0143360696 0.0330301445 #> [6] 0.0001074816 0.2417009722 pmf_binomMix(c(5, 0, 0, 3, 5, 1, 23), c(1, 8, 6, 2, 0, 10, 0), 0.8, 0.002, 0.25, 0.25, 0.5) #> [1] 0.199578120 0.246029168 0.247046960 0.102409960 0.411349980 0.005391435 #> [7] 0.241700972"},{"path":"https://biobix.github.io/maelstRom/reference/pmf_impr.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability Mass Function for an imprinted SNP. — pmf_impr","title":"Probability Mass Function for an imprinted SNP. — pmf_impr","text":"pmf_impr calculates probability observing population-level RNAseq data (reference- variant allele counts per sample) assuming imprinted binomial mixture model mean reference allele fraction heterozygotes fixed 0.5 (allelic bias). specifically, formula used (though --hood using R's built-dbinom function mathematical implementation): pr * dbinom(x = ref_counts, size = ref_counts + var_counts, prob = 1-SE) + 0.5 * prv * dbinom(x = ref_counts, size = ref_counts + var_counts, prob = (0.5-(impr/2)) / (1-(impr/2)) * (1-SE) + (0.5/1-(impr/2)) * SE) + 0.5 * prv * dbinom(x = ref_counts, size = ref_counts + var_counts, prob = (0.5-(impr/2)) / (1-(impr/2)) * SE + (0.5/1-(impr/2)) * (1-SE)) + pv * dbinom(x = ref_counts, size = ref_counts + var_counts, prob = SE) pr, pv prv calculated assuming Hardy-Weinberg-Equilibrium given input parameters (inbreeding coefficient inbr reference allele frequency allelefreq)","code":""},{"path":"https://biobix.github.io/maelstRom/reference/pmf_impr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability Mass Function for an imprinted SNP. — pmf_impr","text":"","code":"pmf_impr(ref_counts, var_counts, allelefreq, impr, SE, inbr = 0)"},{"path":"https://biobix.github.io/maelstRom/reference/pmf_impr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability Mass Function for an imprinted SNP. — pmf_impr","text":"ref_counts Number Numeric vector Reference count(s). var_counts Number Numeric vector. Variant count(s). allelefreq Number. Allele frequency. impr Number. Degree imprinting. SE Number. Sequencing error rate. inbr Number. Degree inbreeding (default = 0).","code":""},{"path":"https://biobix.github.io/maelstRom/reference/pmf_impr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability Mass Function for an imprinted SNP. — pmf_impr","text":"Probability observing ref_counts var_counts","code":""},{"path":"https://biobix.github.io/maelstRom/reference/pmf_impr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability Mass Function for an imprinted SNP. — pmf_impr","text":"","code":"pmf_impr(10, 10, 0.5, 0, 0.002, 0.12) #> [1] 0.0775267 pmf_impr(10, 10, 0.5, 1, 0.002) #> [1] 1.854402e-22 pmf_impr(0, 10, 0.5, 1, 0.002, 0.12) #> [1] 0.4900895 pmf_impr(c(5, 8, 10, 3, 5, 6, 23), c(8, 8, 6, 4, 4, 10, 0), 0.5, 1, 0.002, 0.12) #> [1] 2.026483e-11 3.242372e-18 2.511768e-13 1.391617e-07 9.999602e-10 #> [6] 2.511768e-13 4.774990e-01 pmf_impr(c(5, 0, 0, 3, 5, 1, 23), c(1, 8, 6, 2, 0, 10, 0), 0.5, 1, 0.002) #> [1] 5.940240e-03 4.920558e-01 4.940299e-01 1.992008e-05 4.950200e-01 #> [6] 1.078197e-02 4.774990e-01"},{"path":"https://biobix.github.io/maelstRom/reference/prior_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Prior filtering of loci. — prior_filter","title":"Prior filtering of loci. — prior_filter","text":"prior_filter filters loci prior analysis using maelstRom: filter throwing samples showcasing relevant allele counts alleles present ref_alleles column (checkref_filter == TRUE) filter throwing loci showcasing low minor allele fraction (prior_allelefreq_filter == TRUE, governed min_PrioAlleleFreq) filter median coverage (governed min_median_cov, looking ref_count var_count) filter number samples (governed min_nr_samples) Also, samples zero-counts \"ref_count\" \"var_count\" discarded, useless analyses.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/prior_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prior filtering of loci. — prior_filter","text":"","code":"prior_filter(   data_pos,   min_median_cov = 5,   min_nr_samples = 30,   checkref_filter = FALSE,   prior_allelefreq_filter = FALSE,   min_PriorAlleleFreq = 0.1 )"},{"path":"https://biobix.github.io/maelstRom/reference/prior_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prior filtering of loci. — prior_filter","text":"data_pos Data frame. Data frame SNP position columns: \"ref_alleles\", \"\", \"T\", \"C\", \"G\", \"ref\", \"var\", \"ref_count\" \"var_count\". min_median_cov Number. Minimal median coverage necessary retain locus (default 5). min_nr_samples Number. Minimal number samples necessary retain locus (default 30). checkref_filter Logical. samples high allele count alleles present ref_alleles column data_pos filtered ? \"high\", mean either highest allele count sample, second highest heuristic evidence sample homozygous common allele. particular check involves, sample, extracting first second common allele, using entire population data data_pos get genotype probabilities homozygocity common allele heterozygosity alleles, using allele's observed population frequencies assuming Hardy-Weinberg Equilibrium (inbreeding parameter = 0). multiplied particular sample's corresponding evidence homozygocity common allele (using multinomial distribution assuming equal observed frequencies alleles, low dictated e.g. sequencing errors) evidence heterozygosity common alleles (using multinomial distribution assuming equal expression two alleles high, equal expression two remaining nucleotides low, dictated e.g. sequencing error rate). prior_allelefreq_filter Logical. loci filtered using minimal prior minor allele frequency, simply determined percent occurrence less common (variant) allele across nucleotides. (default FALSE). min_PriorAlleleFreq Number. Prior allele frequency filter SNPs prior_allelefreq_filter TRUE (default 0.1).","code":""},{"path":"https://biobix.github.io/maelstRom/reference/prior_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prior filtering of loci. — prior_filter","text":"data data frame total median coverage NULL SNP positions filtered.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/qbeta_C.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — qbeta_C","title":"DO SOMETHING — qbeta_C","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/qbeta_C.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — qbeta_C","text":"","code":"qbeta_C(qs, a, b)"},{"path":"https://biobix.github.io/maelstRom/reference/qbeta_C3.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — qbeta_C3","title":"DO SOMETHING — qbeta_C3","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/qbeta_C3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — qbeta_C3","text":"","code":"qbeta_C3(qs, a, b)"},{"path":"https://biobix.github.io/maelstRom/reference/standard_alleles.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine standard alleles of SNP positions. — standard_alleles","title":"Determine standard alleles of SNP positions. — standard_alleles","text":"standard_alleles determines reference variant allele SNP position, (using total across-sample counts) simply two -occurring nucleotides also present given ref_alleles column data_pos. case ties (two equally-abundant highest-count alleles one equally-abundant second-highest-count alleles), rare, final choice reference- /variant allele made random among suitable candidates.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/standard_alleles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine standard alleles of SNP positions. — standard_alleles","text":"","code":"standard_alleles(data_pos)"},{"path":"https://biobix.github.io/maelstRom/reference/standard_alleles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine standard alleles of SNP positions. — standard_alleles","text":"data_pos Data frame. Data frame SNP position columns: \"chromosome\", \"position\", \"ref_alleles\", \"dbSNP_ref\", \"gene\", \"\", \"T\", \"C\", \"G\", \"sample\", \"sample_nr\". least columns allelic counts (\"\", \"T\", \"C\", \"G\") dbSNP reference alleles (\"ref_alleles\") present. dbSNP reference alleles available, \"/T/C/G\" can used reference alleles.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/standard_alleles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine standard alleles of SNP positions. — standard_alleles","text":"data data frame standard alleles(\"ref_alleles\", \"ref\" \"var\"),     well respective counts (\"ref_count\" \"var_count\").","code":""},{"path":"https://biobix.github.io/maelstRom/reference/symmetry_gof.html","id":null,"dir":"Reference","previous_headings":"","what":"Goodness-of-fit test for symmetry. — symmetry_gof","title":"Goodness-of-fit test for symmetry. — symmetry_gof","text":"symmetry_gof calculates chi-squared test symmetry allelic counts. tests whether number samples expressing 50 correspond amounts expect assuming HWE WELL allelic shift (average equal expression reference- variant alleles heterozygotes). expected number homozygote ref-samples plus half expected number heterozygous samples, expected number homozygote var-samples plus half expected number heterozygous samples, HWE, respectively. function used imprinting analyses , assumptions made analyses.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/symmetry_gof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Goodness-of-fit test for symmetry. — symmetry_gof","text":"","code":"symmetry_gof(ref_counts, var_counts, allelefreq)"},{"path":"https://biobix.github.io/maelstRom/reference/symmetry_gof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Goodness-of-fit test for symmetry. — symmetry_gof","text":"ref_counts Numeric list. Reference counts. var_counts Numeric list. Variant counts. allelefreq Number. Allele frequency.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/symmetry_gof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Goodness-of-fit test for symmetry. — symmetry_gof","text":"p-value chi-squared test ref_counts var_counts.","code":""},{"path":"https://biobix.github.io/maelstRom/reference/symmetry_gof.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Goodness-of-fit test for symmetry. — symmetry_gof","text":"","code":"symmetry_gof(c(5, 8, 10, 3, 5, 6, 23, 4, 12, 10, 9, 6, 7, 25), c(8, 8, 6, 4, 4, 10, 0, 7, 8, 4, 2, 7, 15, 13), 0.5) #> [1] 1 symmetry_gof(c(5, 0, 0, 3, 5, 1, 23, 0, 12, 0, 9, 0, 1, 0), c(1, 8, 6, 2, 0, 10, 0, 7, 0, 4, 0, 7, 0, 13), 0.5) #> [1] 1"},{"path":"https://biobix.github.io/maelstRom/reference/TumPurHelpFun_CPP.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — TumPurHelpFun_CPP","title":"DO SOMETHING — TumPurHelpFun_CPP","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/TumPurHelpFun_CPP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — TumPurHelpFun_CPP","text":"","code":"TumPurHelpFun_CPP(   RCcol,   TC,   TumReads_oi,   a,   b,   q,   SCP_oi,   n,   NumIntMethod,   prec,   Wvec,   Nvec )"},{"path":"https://biobix.github.io/maelstRom/reference/TumPurHelpFun_CPP_R.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — TumPurHelpFun_CPP_R","title":"DO SOMETHING — TumPurHelpFun_CPP_R","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/TumPurHelpFun_CPP_R.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — TumPurHelpFun_CPP_R","text":"","code":"TumPurHelpFun_CPP_R(   RCcol,   TC,   TumReads_oi,   a,   b,   q,   SCP_oi,   n,   NumIntMethod,   prec,   Wvec,   Nvec )"},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — TumPur_LogLik_CPP","title":"DO SOMETHING — TumPur_LogLik_CPP","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — TumPur_LogLik_CPP","text":"","code":"TumPur_LogLik_CPP(   optpars,   ref_counts,   var_counts,   tumpur,   weights,   SCPthreshold,   n = 0L,   NumIntMethod = \"Gregory\",   prec = 1e-04,   Wvec = 0L,   Nvec = 0L )"},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP2.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — TumPur_LogLik_CPP2","title":"DO SOMETHING — TumPur_LogLik_CPP2","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — TumPur_LogLik_CPP2","text":"","code":"TumPur_LogLik_CPP2(   optpars,   ref_counts,   var_counts,   tumpur,   weights,   SCPthreshold,   n = 0L,   NumIntMethod = \"Gregory\",   prec = 1e-04,   Wvec = 0L,   Nvec = 0L )"},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP2X.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — TumPur_LogLik_CPP2X","title":"DO SOMETHING — TumPur_LogLik_CPP2X","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP2X.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — TumPur_LogLik_CPP2X","text":"","code":"TumPur_LogLik_CPP2X(   optpars,   ref_counts,   var_counts,   tumpur,   weights,   SCPthreshold,   n = 0L,   NumIntMethod = \"Gregory\",   prec = 1e-04,   Wvec = 0L,   Nvec = 0L )"},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP2Y.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — TumPur_LogLik_CPP2Y","title":"DO SOMETHING — TumPur_LogLik_CPP2Y","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP2Y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — TumPur_LogLik_CPP2Y","text":"","code":"TumPur_LogLik_CPP2Y(   optpars,   ref_counts,   var_counts,   tumpur,   weights,   SCPthreshold,   n = 0L,   NumIntMethod = \"Gregory\",   prec = 1e-04,   Wvec = 0L,   Nvec = 0L )"},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP2_10.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — TumPur_LogLik_CPP2_10","title":"DO SOMETHING — TumPur_LogLik_CPP2_10","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP2_10.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — TumPur_LogLik_CPP2_10","text":"","code":"TumPur_LogLik_CPP2_10(   optpars,   ref_counts,   var_counts,   tumpur,   weights,   SCPthreshold,   n = 0L,   NumIntMethod = \"Gregory\",   prec = 1e-04,   Wvec = 0L,   Nvec = 0L )"},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP2_100.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — TumPur_LogLik_CPP2_100","title":"DO SOMETHING — TumPur_LogLik_CPP2_100","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP2_100.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — TumPur_LogLik_CPP2_100","text":"","code":"TumPur_LogLik_CPP2_100(   optpars,   ref_counts,   var_counts,   tumpur,   weights,   SCPthreshold,   n = 0L,   NumIntMethod = \"Gregory\",   prec = 1e-04,   Wvec = 0L,   Nvec = 0L )"},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP2_1000.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — TumPur_LogLik_CPP2_1000","title":"DO SOMETHING — TumPur_LogLik_CPP2_1000","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP2_1000.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — TumPur_LogLik_CPP2_1000","text":"","code":"TumPur_LogLik_CPP2_1000(   optpars,   ref_counts,   var_counts,   tumpur,   weights,   SCPthreshold,   n = 0L,   NumIntMethod = \"Gregory\",   prec = 1e-04,   Wvec = 0L,   Nvec = 0L )"},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP3.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — TumPur_LogLik_CPP3","title":"DO SOMETHING — TumPur_LogLik_CPP3","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — TumPur_LogLik_CPP3","text":"","code":"TumPur_LogLik_CPP3(   q,   a,   b,   ref_counts,   var_counts,   tumpur,   weights,   SCPthreshold,   n = 0L,   NumIntMethod = \"Gregory\",   prec = 1e-04,   Wvec = 0L,   Nvec = 0L )"},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP3X.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — TumPur_LogLik_CPP3X","title":"DO SOMETHING — TumPur_LogLik_CPP3X","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP3X.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — TumPur_LogLik_CPP3X","text":"","code":"TumPur_LogLik_CPP3X(   q,   a,   b,   qlim,   ref_counts,   var_counts,   tumpur,   weights,   SCPthreshold,   n = 0L,   NumIntMethod = \"Gregory\",   prec = 1e-04,   Wvec = 0L,   Nvec = 0L )"},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP4.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — TumPur_LogLik_CPP4","title":"DO SOMETHING — TumPur_LogLik_CPP4","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — TumPur_LogLik_CPP4","text":"","code":"TumPur_LogLik_CPP4(   q,   a,   b,   ref_counts,   var_counts,   tumpur,   weights,   SCPthreshold,   n = 0L,   NumIntMethod = \"Gregory\",   prec = 1e-04,   Wvec = 0L,   Nvec = 0L )"},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP_DB1.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — TumPur_LogLik_CPP_DB1","title":"DO SOMETHING — TumPur_LogLik_CPP_DB1","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP_DB1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — TumPur_LogLik_CPP_DB1","text":"","code":"TumPur_LogLik_CPP_DB1(   optpars,   ref_counts,   var_counts,   tumpur,   weights,   SCPthreshold,   n = 0L,   NumIntMethod = \"Gregory\",   prec = 1e-04,   Wvec = 0L,   Nvec = 0L )"},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP_DB2.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — TumPur_LogLik_CPP_DB2","title":"DO SOMETHING — TumPur_LogLik_CPP_DB2","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP_DB2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — TumPur_LogLik_CPP_DB2","text":"","code":"TumPur_LogLik_CPP_DB2(   optpars,   ref_counts,   var_counts,   tumpur,   weights,   SCPthreshold,   n = 0L,   NumIntMethod = \"Gregory\",   prec = 1e-04,   Wvec = 0L,   Nvec = 0L )"},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP_DB3.html","id":null,"dir":"Reference","previous_headings":"","what":"DO SOMETHING — TumPur_LogLik_CPP_DB3","title":"DO SOMETHING — TumPur_LogLik_CPP_DB3","text":"SOMETHING","code":""},{"path":"https://biobix.github.io/maelstRom/reference/TumPur_LogLik_CPP_DB3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DO SOMETHING — TumPur_LogLik_CPP_DB3","text":"","code":"TumPur_LogLik_CPP_DB3(   optpars,   ref_counts,   var_counts,   tumpur,   weights,   SCPthreshold,   n = 0L,   NumIntMethod = \"Gregory\",   prec = 1e-04,   Wvec = 0L,   Nvec = 0L )"}]
